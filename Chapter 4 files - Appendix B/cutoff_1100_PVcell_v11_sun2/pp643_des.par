Material = "GaTlP"
{

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C	= 2.0000e-10	# [cm^3/s]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

*********Copied from, TlP which is copied from InP
TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *WAVELEN(um)	n	k

0.206666667	1.310927492	2.342945518;
0.20735786	1.313322131	2.347052722;
0.208053691	1.315248415	2.352015899;
0.208754209	1.316770366	2.357820618;
0.209459459	1.317967553	2.364454785;
0.210169492	1.318932166	2.371886064;
0.210884354	1.319692718	2.380125414;
0.211604096	1.320314911	2.389147391;
0.212328767	1.320827273	2.398939225;
0.213058419	1.321292694	2.409517789;
0.213793103	1.321723757	2.420878788;
0.214532872	1.322193293	2.433001847;
0.215277778	1.322710384	2.445922848;
0.216027875	1.323311834	2.459609658;
0.216783217	1.324033271	2.47412202;
0.21754386	1.324924149	2.489443168;
0.218309859	1.326016164	2.505595759;
0.219081272	1.327351214	2.522611423;
0.219858156	1.328994818	2.540489715;
0.220640569	1.330995016	2.559277149;
0.221428571	1.333417539	2.578972185;
0.222222222	1.336330199	2.59957919;
0.223021583	1.339815657	2.621129638;
0.223826715	1.343961106	2.643594825;
0.224637681	1.348854972	2.666982446;
0.225454545	1.354580455	2.691239654;
0.226277372	1.361210016	2.716326951;
0.227106227	1.368831456	2.742181104;
0.227941176	1.377473373	2.768727339;
0.228782288	1.387182502	2.795906045;
0.22962963	1.397934586	2.823637518;
0.230483271	1.409734085	2.851866275;
0.231343284	1.422509934	2.880570064;
0.232209738	1.436214141	2.909793928;
0.233082707	1.45083243	2.939574987;
0.233962264	1.466261088	2.970037013;
0.234848485	1.482613661	3.001374718;
0.235741445	1.499880869	3.033753497;
0.236641221	1.518292351	3.067429391;
0.237547893	1.538141706	3.102615248;
0.238461538	1.559743266	3.139441123;
0.239382239	1.583714901	3.17805446;
0.240310078	1.610532639	3.21833604;
0.241245136	1.640870416	3.260122662;
0.2421875	1.675286453	3.302953002;
0.243137255	1.714360008	3.346256332;
0.244094488	1.758533239	3.389324198;
0.245059289	1.808032445	3.431157892;
0.246031746	1.862800294	3.470867655;
0.247011952	1.922609562	3.507416343;
0.248	1.986965453	3.539834317;
0.248995984	2.055106919	3.567416499;
0.25	2.126109068	3.589586403;
0.251012146	2.198950342	3.605958228;
0.25203252	2.272527625	3.616604761;
0.253061224	2.345784572	3.621751899;
0.254098361	2.417954173	3.622020684;
0.255144033	2.48840057	3.618125502;
0.256198347	2.556823693	3.610945327;
0.257261411	2.623251844	3.60131053;
0.258333333	2.687965894	3.589875246;
0.259414226	2.751517205	3.577129026;
0.260504202	2.814502042	3.563218312;
0.261603376	2.877449675	3.547950775;
0.262711864	2.940833485	3.531017591;
0.263829787	3.004579917	3.511830523;
0.264957265	3.06849378	3.490031454;
0.266094421	3.132407707	3.465591395;
0.267241379	3.196191864	3.438434568;
0.268398268	3.259992004	3.408432623;
0.269565217	3.323678563	3.375188171;
0.270742358	3.386989013	3.338544245;
0.271929825	3.449673737	3.298416283;
0.273127753	3.511976541	3.254715279;
0.274336283	3.574105717	3.20688403;
0.275555556	3.635787653	3.153760886;
0.276785714	3.696182402	3.094191717;
0.278026906	3.753756849	3.027259265;
0.279279279	3.806326236	2.952647977;
0.280542986	3.851437136	2.870929308;
0.281818182	3.886923787	2.783751752;
0.283105023	3.911365124	2.693496862;
0.28440367	3.924147093	2.602977043;
0.285714286	3.925856161	2.51486196;
0.287037037	3.91779062	2.431518885;
0.288372093	3.901672979	2.354317354;
0.289719626	3.879516378	2.284365068;
0.291079812	3.853225441	2.221692743;
0.29245283	3.82437057	2.16613209;
0.293838863	3.794188994	2.117066845;
0.295238095	3.763615029	2.073858713;
0.296650718	3.733223394	2.035771317;
0.298076923	3.703436355	2.002292222;
0.299516908	3.674574664	1.972758363;
0.300970874	3.646648114	1.946657268;
0.302439024	3.619748036	1.923693223;
0.303921569	3.59402332	1.903454759;
0.305418719	3.569419155	1.885768702;
0.306930693	3.545978077	1.870329273;
0.308457711	3.523738725	1.856893583;
0.31	3.502664625	1.845322313;
0.311557789	3.482764605	1.835433721;
0.313131313	3.46408251	1.82717584;
0.314720812	3.446547395	1.820263417;
0.316326531	3.430138291	1.814584108;
0.317948718	3.414873115	1.810084046;
0.319587629	3.400749943	1.806709258;
0.321243523	3.387685975	1.804227286;
0.322916667	3.375684519	1.802651005;
0.32460733	3.364700471	1.80185989;
0.326315789	3.354755441	1.801860916;
0.328042328	3.345738021	1.802484358;
0.329787234	3.33770267	1.803785955;
0.331550802	3.330567425	1.805654737;
0.333333333	3.324361222	1.808158023;
0.335135135	3.319028098	1.811167278;
0.336956522	3.314524554	1.814636027;
0.338797814	3.310872649	1.818612114;
0.340659341	3.30810921	1.82315482;
0.342541436	3.306124293	1.828089426;
0.344444444	3.305034736	1.833581697;
0.346368715	3.304723002	1.839448272;
0.348314607	3.305296733	1.845858312;
0.350282486	3.306736623	1.852734794;
0.352272727	3.309047846	1.860068379;
0.354285714	3.312301567	1.867951288;
0.356321839	3.3165002	1.876303063;
0.358381503	3.321723644	1.885220167;
0.360465116	3.327993465	1.894653029;
0.362573099	3.335400329	1.904631298;
0.364705882	3.344043024	1.915221205;
0.366863905	3.353984754	1.926355006;
0.369047619	3.365378212	1.938074939;
0.371257485	3.378344803	1.950423527;
0.373493976	3.393046906	1.963362007;
0.375757576	3.409635503	1.976959003;
0.37804878	3.428272477	1.991297975;
0.380368098	3.44935103	2.006762931;
0.382716049	3.473807871	2.023850597;
0.385093168	3.503877729	2.042665606;
0.3875	3.542654354	2.060908181;
0.389937107	3.591292399	2.073351393;
0.392405063	3.646421945	2.07388788;
0.394904459	3.700414611	2.060203723;
0.397435897	3.746082721	2.035887977;
0.4	3.780433658	2.007882039;
0.402597403	3.805239329	1.982463875;
0.405228758	3.824309645	1.96299502;
0.407894737	3.841642821	1.950834236;
0.410596026	3.860789237	1.946122178;
0.413333333	3.885248064	1.948377242;
0.416107383	3.919625173	1.956496658;
0.418918919	3.970334838	1.966458568;
0.421768707	4.04271079	1.96679179;
0.424657534	4.13074358	1.939208247;
0.427586207	4.210495206	1.874731521;
0.430555556	4.258367652	1.789795044;
0.433566434	4.275501252	1.711445849;
0.436619718	4.280350603	1.650691011;
0.439716312	4.286136385	1.60157022;
0.442857143	4.29507417	1.555867512;
0.446043165	4.304759868	1.509325313;
0.449275362	4.312345825	1.461047741;
0.452554745	4.315587238	1.412083713;
0.455882353	4.313621973	1.364307548;
0.459259259	4.306849753	1.319845063;
0.462686567	4.296683234	1.280142127;
0.466165414	4.284789059	1.245976427;
0.46969697	4.272864859	1.217515111;
0.473282443	4.262554037	1.194497715;
0.476923077	4.255581316	1.176360253;
0.480620155	4.253890683	1.162246665;
0.484375	4.25972563	1.150414687;
0.488188976	4.275114635	1.137056681;
0.492063492	4.300062543	1.116319624;
0.496	4.330071007	1.082143116;
0.5	4.356438825	1.032196748;
0.504065041	4.370536628	0.970723156;
0.508196721	4.368808169	0.906425715;
0.512396694	4.353972112	0.847180107;
0.516666667	4.33179936	0.796343961;
0.521008403	4.307070705	0.753157257;
0.525423729	4.281984329	0.71562687;
0.52991453	4.257039696	0.682143505;
0.534482759	4.232243202	0.651858056;
0.539130435	4.207746816	0.624341849;
0.543859649	4.183527846	0.599311942;
0.548672566	4.159760592	0.576509904;
0.553571429	4.136657021	0.555718083;
0.558558559	4.114021181	0.536747925;
0.563636364	4.092207764	0.51938129;
0.568807339	4.071110538	0.503453999;
0.574074074	4.050750416	0.488810308;
0.579439252	4.031271731	0.475268075;
0.58490566	4.012588075	0.46269224;
0.59047619	3.994682401	0.45096982;
0.596153846	3.977533493	0.439963298;
0.601941748	3.961190127	0.429571456;
0.607843137	3.945455256	0.419716331;
0.613861386	3.930509457	0.410288461;
0.62	3.916031497	0.401254065;
0.626262626	3.902207422	0.3925436;
0.632653061	3.888973504	0.384117755;
0.639175258	3.876133848	0.37593605;
0.645833333	3.863818405	0.367985618;
0.652631579	3.851836731	0.36025385;
0.659574468	3.8404457	0.352709616;
0.666666667	3.829323383	0.345344479;
0.673913043	3.818729864	0.338092048;
0.681318681	3.80853049	0.330836694;
0.688888889	3.798718085	0.323376353;
0.696629213	3.788959645	0.315626603;
0.704545455	3.778802694	0.307842647;
0.712643678	3.768390464	0.300439645;
0.720930233	3.757865924	0.293736226;
0.729411765	3.747756391	0.287650403;
0.738095238	3.738123294	0.281959165;
0.746987952	3.728896503	0.276495986;
0.756097561	3.720139323	0.271155682;
0.765432099	3.711784587	0.265901956;
0.775	3.70370284	0.260749602;
0.784810127	3.696025125	0.255653689;
0.794871795	3.688619677	0.250625023;
0.805194805	3.681554708	0.245645976;
0.815789474	3.674898025	0.240698176;
0.826666667	3.668720465	0.235773322;
0.837837838	3.66309456	0.230884425;
0.849315068	3.658704241	0.225935887;
0.861111111	3.65689924	0.219413298;
0.873239437	3.655154203	0.206243046;
0.885714286	3.643977951	0.190066081;
0.898550725	3.627519938	0.182021891;
0.911764706	3.614391843	0.179022427;
0.925373134	3.603936917	0.176771327;
0.939393939	3.594785007	0.174617176;
0.953846154	3.586522831	0.172492374;
0.96875	3.57887447	0.170380477;
0.984126984	3.571845573	0.168285989;
1	3.565085952	0.166201456;
1.016393443	3.558808948	0.164120783;
1.033333333	3.552945414	0.162037567;

1.050847458	3.547285509	0.299958321;
1.068965517	3.541969868	0.297863533;
1.087719298	3.536932132	0.295766428;
1.107142857	3.532028652	0.293660349;
1.127272727	3.527473804	0.281539716;
1.148148148	3.523196041	0.289398071;
1.169811321	3.518985259	0.287240237;
1.192307692	3.515053356	0.285061958;
1.215686275	3.511400847	0.282856784;
1.24	3.507816915	0.270629073;
1.265306122	3.504440263	0.278368152;
1.291666667	3.501344863	0.276074495;
1.319148936	3.498318785	0.273745058;
1.347826087	3.495501928	0.271383528;
1.377777778	3.492967017	0.268969659;
1.409090909	3.49049863	0.266515781;
1.441860465	3.488382256	0.263998754;
1.476190476	3.486474117	0.261403356;
1.512195122	3.484906892	0.258624111;
1.55	3.483736969	0.275443357;
1.58974359	3.482527211	0.241580306;
1.631578947	3.48101182	0.246997843;
1.675675676	3.478593608	0.232167285;
1.722222222	3.475376343	0.217787135;
1.771428571	3.471941453	0.217787135;
1.823529412	3.468752124	0.217787135;
1.878787879	3.466072387	0.207787135;
1.9375	3.463820738	0.207787135;
2	3.461923454	0.197787135;
2.066666667	3.460165693	0;
2.137931034	3.458697453	0;
2.214285714	3.457438917	0;
2.296296296	3.456395562	0;
2.384615385	3.455492645	0;
2.48	3.454875152	0;
2.583333333	3.454543565	0;
2.695652174	3.454707211	0;
2.818181818	3.455360608	0;
2.952380952	3.457341762	0;
3.1	3.462343086	0;
3.263157895	3.471091513	0;
3.444444444	3.468876966	0;
3.647058824	3.452617339	0;
3.875	3.439165968	0;
4.133333333	3.430418258	0;
4.428571429	3.423821699	0;
4.769230769	3.418483586	0;
5.166666667	3.41398823	0;
5.636363636	3.410194121	0;
6.2	3.406967553	0;


}


}


Material = "TlP"
{

Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 18	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + aplpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
	refractiveindex	= 3.22	# [1]
	alpha	= 2.0000e-04	# [1/K]
}


EnergyRelaxationTime
{ *  Energy relaxation times in picoseconds
	tau_w_ele	= 1	# [ps]
	tau_w_hol	= 0.4	# [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8	# [1]
	p_l_f	= 0.8	# [1]
	n_gamma	= 0.0000e+00	# [1]
	p_gamma	= 0.0000e+00	# [1]
	n_delta	= 0.0000e+00	# [1]
	p_delta	= 0.0000e+00	# [1]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Chi0	= 4.8	# [eV]
	Eg0	= -0.27	# [eV]
	alpha	= 4.1000e-04	# [eV K^-1]
	beta	= 1.3600e+02	# [K]
	Tpar	= 0.0000e+00	# [K]
}

FreeCarrierAbsorption
{
  * Coefficients for free carrier absorption:
  * fcaalpha_n for electrons,
  * fcaalpha_p for holes

  * FCA = (alpha_n * n + alpha_p * p) * Light Intensity
	fcaalpha_n	= 4.0000e-18	# [cm^2]
	fcaalpha_p	= 8.0000e-18	# [cm^2]
}

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

	gamma_1	= 4.95	# [1]
	gamma_2	= 1.65	# [1]
	gamma_3	= 2.35	# [1]
	so	= 0.11	# [eV]
	ep_te	= 20.7	# [eV]
	ep_tm	= 20.7	# [eV]
	cr	= 0.019	# [eV]
	A1	= -7.2400e+00	# [1]
	A2	= -5.1000e-01	# [1]
	A3	= 6.73	# [1]
	A4	= -3.3600e+00	# [1]
	A5	= -3.3500e+00	# [1]
	A6	= -4.7200e+00	# [1]
}

QWStrain
{
  * Deformation Potentials (a_nu, a_c, b, C_12, C_11)
  * and StrainConstant eps for energy shift
  * of Laser Quantum Well Subbands:
  * Formula:
  * eps = (a_bulk - a_active)/a_bulk 
  * dE_c = 2 a_c (1- C12/C11) eps 
  * dE_lh = 2 a_nu (1- C12/C11) eps - b (1+ 2 C12/C11) eps 
  * dE_hh = 2 a_nu (1- C12/C11) eps + b (1+ 2 C12/C11) eps 
	* a_nu	= 1.27	# [eV]
	* a_c	= -5.0400e+00	# [eV]
	* b_shear	= -1.7000e+00	# [eV]
	* C_11	= 10.11	# [1]
	* C_12	= 5.61	# [1]
	eps	= 0.0000e+00	# [1]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * me/m0 = (Nc300/2.540e19)^2/3 
  * Nc(T) = Nc300 * (T/300)^3/2 
	Nc300	= 5.6600e+17	# [cm-3]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * mh/m0 = (Nv300/2.540e19)^2/3 
  * Nv(T) = Nv300 * (T/300)^3/2 
	Nv300	= 1.0300e+19	# [cm-3]
}

SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * formula=1 (for materials with Si-like hole band structure)
  *   m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *   where k=(x,y,z) is unit normal vector in reziprocal
  *   space.  '+' for light hole band, '-' for heavy hole band
  * formula=2: Heavy hole mass mh and light hole mass ml are
  *   specified explicitly.
  * formula=3: A is the relative effective mass.  This
  *   formula must only be used for metal and will used in
  *   tunnelling current computation only.
  * formula<0 means no default model and no default parameters
  *   are available, so you have to provide values for
  *   'formula' and the respective parameters in order to use
  *   this parameter set.
	formula	= 2	# [1]
  * Formula 2 parameters:
	ml	= 0.089	# [1]
	mh	= 0.85	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
}

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 4.5000e+03 ,	1.5000e+02	# [cm^2/(Vs)]
	Exponent	= 1.5 ,	1.5	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 4.5000e+03 ,	1.5000e+02	# [cm^2/(Vs)]
	Exponent	= 1.5 ,	1.5	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 4.5000e+03 ,	1.5000e+02	# [cm^2/Vs]
	Ar_alm  	= -1.5000e+00 ,	-1.5000e+00	# [1]
	Ar_mud  	= 0.0000e+00 ,	0.0000e+00	# [cm^2/Vs]
	Ar_ald  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_N0   	= 1.0000e+17 ,	1.0000e+17	# [cm^(-3)]
	Ar_alN  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_a    	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_ala  	= 0.0000e+00 ,	0.0000e+00	# [1]
}

DopingDependence_aniso:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 4.5000e+03 ,	1.5000e+02	# [cm^2/Vs]
	Ar_alm  	= -1.5000e+00 ,	-1.5000e+00	# [1]
	Ar_mud  	= 0.0000e+00 ,	0.0000e+00	# [cm^2/Vs]
	Ar_ald  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_N0   	= 1.0000e+17 ,	1.0000e+17	# [cm^(-3)]
	Ar_alN  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_a    	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_ala  	= 0.0000e+00 ,	0.0000e+00	# [1]
}

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2 ,	2	# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
	A_vsat	= 1.0000e+07 ,	1.0000e+07	# [1]
	B_vsat	= 0.0000e+00 ,	0.0000e+00	# [1]
	vsat_min	= 5.0000e+05 ,	5.0000e+05	# [1]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2 ,	2	# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
	A_vsat	= 1.0000e+07 ,	1.0000e+07	# [1]
	B_vsat	= 0.0000e+00 ,	0.0000e+00	# [1]
	vsat_min	= 5.0000e+05 ,	5.0000e+05	# [1]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

PooleFrenkel
{ * TrapXsection = Xsec0*(1+Gpf) 
  * Gpf = (1+(a-1)*exp(a))/a^2-0.5 
  * where 
  *       a = (1/kT)*(q^3*F/pi/e0/epsPF)^0.5, 
  *       F is the electric field. 
	epsPF	= 18 ,	18	# [1]
}

************Copied from InP
TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *WAVELEN(um)	n	k
0.19	3.25740926	1.69793612;
0.3	3.25740926	1.69793612;
0.31	3.17981579	1.69255087;
0.32	3.14311018	1.71092217;
0.33	3.13342218	1.74804981;
0.34	3.15074761	1.80469699;
0.35	3.20015139	1.87873401;
0.36	3.28743159	1.96943634;
0.37	3.44471204	2.09873435;
0.38	3.77342608	2.15626624;
0.39	4.13274989	2.04310365;
0.4	4.44493424	1.68832731;
0.41	4.44988885	1.28136503;
0.42	4.3435981	1.03376964;
0.43	4.23754417	0.876916616;
0.44	4.14476349	0.769331229;
0.45	4.06673306	0.690659139;
0.46	4.00084449	0.628846335;
0.47	3.94374405	0.578017657;
0.48	3.89314055	0.53548392;
0.49	3.84782974	0.499547347;
0.5	3.8068196	0.468908491;
0.51	3.76998974	0.442930551;
0.52	3.73662373	0.42050974;
0.53	3.70651028	0.401078569;
0.54	3.67945108	0.384214664;
0.55	3.65493658	0.369358687;
0.56	3.63282339	0.35615315;
0.57	3.61280706	0.344306563;
0.58	3.59470504	0.333563127;
0.59	3.57839887	0.323742771;
0.6	3.56363247	0.314682086;
0.61	3.55028126	0.306226388;
0.62	3.53807358	0.298269658;
0.63	3.52707239	0.290788032;
0.64	3.51701101	0.283629055;
0.65	3.5078624	0.276792972;
0.66	3.49955774	0.270193858;
0.67	3.49212939	0.263832715;
0.68	3.48526667	0.257654553;
0.69	3.47910169	0.251617412;
0.7	3.47345472	0.245732313;
0.71	3.46848699	0.239931308;
0.72	3.46401901	0.234190993;
0.73	3.45990471	0.228533561;
0.74	3.45644901	0.222892328;
0.75	3.45339249	0.217278757;
0.76	3.45076658	0.211676119;
0.77	3.44865278	0.206052307;
0.78	3.44696929	0.200411482;
0.79	3.44591922	0.194695944;
0.8	3.44559605	0.188790045;
0.81	3.44619662	0.182433443;
0.82	3.44764618	0.175167228;
0.83	3.44954667	0.166441357;
0.84	3.45131245	0.155873934;
0.85	3.45211184	0.143521685;
0.86	3.45047534	0.130125974;
0.87	3.44649476	0.117384774;
0.88	3.44151066	0.106296869;
0.89	3.43677437	0.097140025;
0.9	3.43379941	0.089538859;
0.91	3.43658132	0.08183384;
0.92	3.44158812	0.0603296;
0.93	3.43470479	0.034452939;
0.94	3.41322799	0.008003767;
0.95	3.38911212	0.002774316;
0.96	3.3705567	0.000542819;
0.97	3.35596325	0.000243585;
0.98	3.34460775	0.00014279;
0.99	3.33442193	7.67E-05;
1	3.32505635	3.50E-05;
10	3.32505635	3.50E-05;
}

RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C	= 2.0000e-10	# [cm^3/s]
}

}

Material = "GaInP"
{

SurfaceRecombination * surface SRH recombination:
{ * s = S0 ( 1 + Sref ( N/Nref )^gamma ) recombination velocity
	S0	= 1.0000e+03 ,	1.0000e+03	# [cm/s]
	Sref	= 1.0000e-03	# [1]
	Nref	= 1.0000e+16	# [cm^(-3)]
	gamma	= 1	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-07 ,	1.0000e-07	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 3.0000e-30 ,	3.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

*  Epsilon{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  refractiveindex{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  LatticeHeatCapacity{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Kappa{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnergyRelaxationTime{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Bandgap{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  FreeCarrierAbsorption{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  BandstructureParameters{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  QWstrain{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  eDOSMass{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  hDOSMass{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  SchroedingerParameters{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  ConstantMobility{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  ConstantMobility_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  DopingDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  DopingDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PhuMob{...} 
*  Philips Unified Mobility Model:
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  HighFieldDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  HighFieldDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaP) + (1-x) * P(InP)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *Ga fraction = .35
  *WAVELEN(um)	n	k
0.206667	1.317272	2.585617	   ;
0.207358	1.322067	2.597646	   ;
0.208054	1.326521	2.610757	   ;
0.208754	1.330713	2.624961	   ;
0.209459	1.33473	2.640267	   ;
0.210169	1.338659	2.656704	   ;
0.210884	1.342582	2.674292	   ;
0.211604	1.346559	2.693061	   ;
0.212329	1.350684	2.713054	   ;
0.213058	1.355042	2.734285	   ;
0.213793	1.359736	2.7568	   ;
0.214533	1.364874	2.780653	  ; 
0.215278	1.370567	2.805827	   ;
0.216028	1.376943	2.832351	   ;
0.216783	1.384116	2.860227	   ;
0.217544	1.392195	2.889421	   ;
0.21831	1.401277	2.919958	   ;
0.219081	1.411468	2.951796	   ;
0.219858	1.422844	2.984938	   ;
0.220641	1.43548	3.019436	   ;
0.221429	1.449444	3.055301	   ;
0.222222	1.464964	3.092694	   ;
0.223022	1.482108	3.131639	   ;
0.223827	1.501147	3.172296	   ;
0.224638	1.522482	3.214759	   ;
0.225455	1.546484	3.259044	   ;
0.226277	1.573684	3.305189	   ;
0.227106	1.604609	3.352949	   ;
0.227941	1.639809	3.401908	   ;
0.228782	1.679929	3.451803	   ;
0.22963	1.725456	3.501804	   ;
0.230483	1.77667	3.551147	   ;
0.231343	1.833883	3.598969	   ;
0.23221	1.896942	3.644195	   ;
0.233083	1.965812	3.685822	   ;
0.233962	2.039846	3.722924	   ;
0.234848	2.118372	3.754566	   ;
0.235741	2.200638	3.78015	   ;
0.236641	2.285553	3.799018	   ;
0.237548	2.372067	3.811058	   ;
0.238462	2.459032	3.816204	   ;
0.239382	2.545489	3.814689	   ;
0.24031	2.630406	3.806931	   ;
0.241245	2.71301	3.793538	   ;
0.242188	2.792757	3.775303	   ;
0.243137	2.869274	3.753039	   ;
0.244094	2.942395	3.727527	   ;
0.245059	3.012195	3.69955	   ;
0.246032	3.078938	3.669749	   ;
0.247012	3.142908	3.63859	   ;
0.248	3.204485	3.606375	   ;
0.248996	3.263993	3.573338	 ;  
0.25	3.321778	3.539695	   ;
0.251012	3.378176	3.505633	;   
0.252033	3.433501	3.471292	 ;  
0.253061	3.488543	3.436908	  ; 
0.254098	3.544173	3.402237	   ;
0.255144	3.601424	3.366682	   ;
0.256198	3.660902	3.328889	   ;
0.257261	3.722838	3.287206	   ;
0.258333	3.786638	3.23977	   ;
0.259414	3.850922	3.184896	   ;
0.260504	3.913525	3.121383	   ;
0.261603	3.971858	3.048951	   ;
0.262712	4.02323	2.968182	   ;
0.26383	4.065158	2.880682	   ;
0.264957	4.095821	2.788859	   ;
0.266094	4.114574	2.695684	   ;
0.267241	4.121349	2.603879	   ;
0.268398	4.117393	2.516193	   ;
0.269565	4.104259	2.434389	   ;
0.270742	4.083881	2.359766	   ;
0.27193	4.058383	2.292877	   ;
0.273128	4.029555	2.233824	   ;
0.274336	3.998835	2.182038	   ;
0.275556	3.967406	2.136948	   ;
0.276786	3.936178	2.097807	   ;
0.278027	3.90569	2.063925	   ;
0.279279	3.876253	2.034741	   ;
0.280543	3.848183	2.009516	   ;
0.281818	3.821549	1.987897	   ;
0.283105	3.796395	1.969325	   ;
0.284404	3.772772	1.953595	   ;
0.285714	3.750681	1.940344	   ;
0.287037	3.730215	1.929396	   ;
0.288372	3.711239	1.920473	   ;
0.28972	3.693741	1.913376	   ;
0.29108	3.677739	1.908016	   ;
0.292453	3.663239	1.904286	   ;
0.293839	3.65018	1.902126	   ;
0.295238	3.638623	1.901269	   ;
0.296651	3.628426	1.901804	   ;
0.298077	3.61975	1.903696	   ;
0.299517	3.612501	1.906721	   ;
0.300971	3.606859	1.911023	   ;
0.302439	3.602637	1.91656	   ;
0.303922	3.600044	1.923249	   ;
0.305419	3.599051	1.931033	   ;
0.306931	3.599798	1.940055	   ;
0.308458	3.602271	1.950304	   ;
0.31	3.606615	1.961782	   ;
0.311558	3.612927	1.974546	;   
0.313131	3.62122	1.988653	  ; 
0.314721	3.631672	2.004479	  ; 
0.316327	3.644446	2.022327	   ;
0.317949	3.660002	2.042771	   ;
0.319588	3.679176	2.066774	   ;
0.321244	3.703549	2.095169	   ;
0.322917	3.73574	2.12875	   ;
0.324607	3.780194	2.167283	   ;
0.326316	3.842344	2.207816	   ;
0.328042	3.927482	2.243567	   ;
0.329787	4.037049	2.263106	   ;
0.331551	4.165965	2.253487	   ;
0.333333	4.301065	2.205109	   ;
0.335135	4.424788	2.116262	   ;
0.336957	4.520744	1.995101	   ;
0.338798	4.579398	1.85669	   ;
0.340659	4.600122	1.717516	   ;
0.342541	4.589498	1.590562	   ;
0.344444	4.557878	1.483034	   ;
0.346369	4.51519	1.396158	   ;
0.348315	4.468697	1.327622	   ;
0.350282	4.422786	1.273928	   ;
0.352273	4.379688	1.231666	   ;
0.354286	4.34024	1.198131	   ;
0.356322	4.304784	1.171259	   ;
0.358382	4.273101	1.14947	   ;
0.360465	4.244936	1.131922	   ;
0.362573	4.220047	1.118061	   ;
0.364706	4.198476	1.107662	   ;
0.366864	4.180878	1.100708	   ;
0.369048	4.168262	1.096632	   ;
0.371257	4.161602	1.094159	   ;
0.373494	4.161367	1.091123	   ;
0.375758	4.166618	1.085251	   ;
0.378049	4.17537	1.075281	   ;
0.380368	4.18547	1.061529	   ;
0.382716	4.196077	1.045315	   ;
0.385093	4.207892	1.027634	   ;
0.3875	4.222388	1.008052	   ;
0.389937	4.240217	0.984481	  ; 
0.392405	4.260142	0.954196	   ;
0.394904	4.279005	0.915443	   ;
0.397436	4.292724	0.868814	   ;
0.4	4.298246	0.817079	   ;
0.402597	4.294614	0.763923;	   
0.405229	4.2825	0.712893	  ; 
0.407895	4.264214	0.666315	 ;  
0.410596	4.242152	0.624961	  ; 
0.413333	4.218472	0.588528	   ;
0.416107	4.194202	0.55613	   ;
0.418919	4.17018	0.526991	   ;
0.421769	4.14652	0.500488	   ;
0.424658	4.123524	0.476128	   ;
0.427586	4.101244	0.45351	   ;
0.430556	4.079663	0.432208	   ;
0.433566	4.058766	0.411851	   ;
0.43662	4.038215	0.392363	   ;
0.439716	4.018218	0.373931	   ;
0.442857	3.999552	0.356587	   ;
0.446043	3.984107	0.337768	   ;
0.449275	3.966821	0.312109	   ;
0.452555	3.938867	0.287201	   ;
0.455882	3.908379	0.27223	   ;
0.459259	3.881984	0.261926	   ;
0.462687	3.858333	0.252827	   ;
0.466165	3.836237	0.244424	   ;
0.469697	3.815344	0.236606	   ;
0.473282	3.795452	0.229292	   ;
0.476923	3.776328	0.22243	   ;
0.48062	3.757979	0.215983	   ;
0.484375	3.740246	0.209912	   ;
0.488189	3.723217	0.204187	   ;
0.492063	3.706731	0.198786	   ;
0.496	3.69074	0.193679	   ;
0.5	3.675215	0.188846	   ;
0.504065	3.660242	0.184252;	   
0.508197	3.64569	0.179894	 ;  
0.512397	3.631663	0.175733	 ;  
0.516667	3.617977	0.171768	  ; 
0.521008	3.604631	0.167988	   ;
0.525424	3.59182	0.164366	   ;
0.529915	3.579182	0.1609	   ;
0.534483	3.56703	0.157586	   ;
0.53913	3.555107	0.154402	   ;
0.54386	3.543533	0.151367	   ;
0.548673	3.532277	0.148493	   ;
0.553571	3.52134	0.14577	   ;
0.558559	3.51067	0.14317	   ;
0.563636	3.500323	0.140668	  ; 
0.568807	3.490332	0.12825	   ;
0.574074	3.480579	0.105915	   ;
0.579439	3.471097	0.083651	   ;
0.584906	3.461944	0.061448	   ;
0.590476	3.452976	0.049314	   ;
0.596154	3.444283	0.027227	   ;
0.601942	3.435834	0;*.065188	   ;
0.607843	3.427662	0;*.043191	   ;
0.613861	3.419679	0;*.021233	   ;
0.62	3.411977	0;*.119308	   ;
0.626263	3.404465	0;*.117411	;   
0.632653	3.397146	0;*.115536	 ;  
0.639175	3.390019	0;
0.645833	3.383085	0;
0.652632	3.376379	0;
0.659574	3.369835	0;
0.666667	3.363577	0;
0.673913	3.357368	0;
0.681319	3.351448	0;
0.688889	3.345726	0;
0.696629	3.340053	0;
0.704545	3.334672	0;
0.712644	3.329456	0;
0.72093	3.324382	0;
0.729412	3.319452	0;
0.738095	3.314781	0;
0.746988	3.310312	0;
0.756098	3.305894	0	   ;
0.765432	3.301795	0	   ;
0.775	3.297842	0	   ;
0.78481	3.294208	0	  ; 
0.794872	3.2908	0	   ;
0.805195	3.287823	0	  ; 
0.815789	3.285387	0	   ;
0.826667	3.283362	0	   ;
0.837838	3.281411	0	   ;
0.849315	3.279016	0	   ;
0.861111	3.275568	0	   ;
0.873239	3.270835	0	   ;
0.885714	3.265569	0	   ;
0.898551	3.260986	0	   ;
0.911765	3.259957	0	   ;
0.925373	3.260509	0	   ;
0.939394	3.246144	0	   ;
0.953846	3.229831	0	   ;
0.96875	3.218564	0	   ;
0.984127	3.209319	0	   ;
1	3.201176	0	   ;
1.016393	3.193828	0	;   
1.033333	3.186989	0	 ;  
1.050847	3.180615	0;	   
1.068966	3.174629	0	;   
1.087719	3.168922	0	  ; 
1.107143	3.163496	0	   ;
1.127273	3.158281	0	   ;
1.148148	3.153351	0	   ;
1.169811	3.148585	0	   ;
1.192308	3.143972	0	   ;
1.215686	3.139514	0	   ;
1.24	3.135284	0	   ;
1.265306	3.131139	0	;   
1.291667	3.127171	0	 ;  
1.319149	3.123352	0	  ; 
1.347826	3.119629	0	   ;
1.377778	3.116065	0	   ;
1.409091	3.112609	0	   ;
1.44186	3.109241	0	   ;
1.47619	3.10597	0	   ;
1.512195	3.102862	0	  ; 
1.55	3.099789	0	   ;
1.589744	3.096872	0	;   
1.631579	3.094032	0	 ;  
1.675676	3.091286	0	  ; 
1.722222	3.08864	0	   ;
1.771429	3.086079	0	   ;
1.823529	3.083612	0	   ;
1.878788	3.081233	0	   ;
1.9375	3.078932	0	   ;
2	3.076717	0	   ;
2.066667	3.074584	0	 ;  
2.137931	3.072531	0	  ; 
2.214286	3.07055	0	;   
2.296296	3.068642	0	;   
2.384615	3.066825	0	 ;  
2.48	3.065074	0	   ;
2.583333	3.063406	0	;   
2.695652	3.061806	0	 ;  
2.818182	3.060297	0	  ; 
2.952381	3.058848	0	   ;
3.1	3.057473	0	   ;
3.263158	3.056176	0;	   
3.444444	3.054947	0	;   
3.647059	3.053786	0	 ;  
3.875	3.052692	0	   ;
4.133333	3.051667	0	 ;  
4.428571	3.05072	0	   ;
4.769231	3.049825	0	   ;
5.166667	3.049015	0	   ;
5.636364	3.04826	0	   ;
6.2	3.04757	0	 ;
10	3.04757	0	 ;

}

BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	g	= 0.068 ,	0.62	# [1]
	mt	= 0.5000e+00 ,	0.5800e+00	# [1]
}

ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
	n_0	= 3.5108	# [1]
	k_0	= 0.0000e+00	# [1]
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
       Formula = 3
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
	Cn_temp	= 4.0000e-04	# [K^-1]
	Tpar	= 3.0000e+02	# [K]
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
	Cn_carr	= 1	# [1]
  
  * Carrier dependence (imag) 
  *    delta_k_carr = wavelength / (4*PI) * (Ck_carr_n*n + Ck_carr_p*p) 
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/2 - Npar ) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 - Npar ) )
	Cn_gain	= 0.0000e+00	# [cm^3]
	Npar	= 1.0000e+18	# [cm^-3]
} 

RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C	= 2.0000e-10	# [cm^3/s]
}

}

Material = "InAlAs"
{

RadiativeRecombination * coefficients:
{ * R_Radiative = C * (T/Tpar)^alpha * (n p - ni_eff^2)
  * C    
  * alpha 
	C	= 0.0000e+00	# [cm^3/s]
	alpha	= 0.0000e+00	# []
}

BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	g	= 1.19 ,	0.34	# [1]
	mt	= 0.0400e+00 ,	0.4200e+00	# [1]
}

TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *Ga fraction = .83
  *WAVELEN(um)	n	k
  0.206666667	1.404897813	2.35622331;
0.20735786	1.415474644	2.362886371;
0.208053691	1.425909492	2.370188735;
0.208754209	1.436260491	2.378094365;
0.209459459	1.446583081	2.386604916;
0.210169492	1.45693414	2.395685528;
0.210884354	1.467352418	2.405344881;
0.211604096	1.477872019	2.415540239;
0.212328767	1.488547134	2.426299774;
0.213058419	1.499404113	2.437566513;
0.213793103	1.510480348	2.449374755;
0.214532872	1.521812881	2.46169758;
0.215277778	1.533443781	2.474523188;
0.216027875	1.545395127	2.48785609;
0.216783217	1.557696678	2.501680295;
0.21754386	1.570398708	2.516012964;
0.218309859	1.583526858	2.530814056;
0.219081272	1.597114284	2.546106577;
0.219858156	1.611248511	2.561890633;
0.220640569	1.625825674	2.578096474;
0.221428571	1.641024722	2.59480053;
0.222222222	1.656844228	2.611956417;
0.223021583	1.673270038	2.629547381;
0.223826715	1.690381236	2.647598499;
0.224637681	1.708173327	2.666065574;
0.225454545	1.726720688	2.684974508;
0.226277372	1.746102175	2.704332929;
0.227106227	1.766209766	2.724076178;
0.227941176	1.787196619	2.744280964;
0.228782288	1.809037359	2.764932856;
0.22962963	1.831793229	2.786058313;
0.230483271	1.855513561	2.807700701;
0.231343284	1.880151484	2.829878993;
0.232209738	1.90590665	2.852739477;
0.233082707	1.932794083	2.876361423;
0.233962264	1.960910356	2.900852383;
0.234848485	1.990496166	2.926411538;
0.235741445	2.021889511	2.953200411;
0.236641221	2.055510471	2.981362426;
0.237547893	2.091812111	3.010918093;
0.238461538	2.131688425	3.041902945;
0.239382239	2.175788445	3.073822978;
0.240310078	2.224900157	3.106248968;
0.241245136	2.279900714	3.138219534;
0.2421875	2.341259934	3.168408381;
0.243137255	2.409230478	3.195405998;
0.244094488	2.483347714	3.217446263;
0.245059289	2.562881201	3.232994848;
0.246031746	2.646372455	3.24064632;
0.247011952	2.731929951	3.239472132;
0.248	2.81755729	3.229305348;
0.248995984	2.901000274	3.210489011;
0.25	2.980538146	3.184305297;
0.251012146	3.054798086	3.152446497;
0.25203252	3.12320917	3.116956501;
0.253061224	3.186085407	3.079935972;
0.254098361	3.244578268	3.043157369;
0.255144033	3.300354729	3.007613321;
0.256198347	3.355436975	2.973512293;
0.257261411	3.411711024	2.940087624;
0.258333333	3.470495753	2.905725559;
0.259414226	3.53228878	2.868276163;
0.260504202	3.596611344	2.825509225;
0.261603376	3.66195192	2.775402208;
0.262711864	3.726158801	2.716763659;
0.263829787	3.786458175	2.64911788;
0.264957265	3.840277099	2.573227432;
0.266094421	3.885167732	2.490489921;
0.267241379	3.919587217	2.403236088;
0.268398268	3.94246152	2.31394688;
0.269565217	3.953910459	2.225312899;
0.270742358	3.954398688	2.139766003;
0.271929825	3.94513422	2.059368418;
0.273127753	3.927842307	1.985675987;
0.274336283	3.904314543	1.919730854;
0.275555556	3.876300191	1.86210379;
0.276785714	3.845619475	1.81278145;
0.278026906	3.81373597	1.771505512;
0.279279279	3.781972682	1.737840305;
0.280542986	3.751280578	1.711069436;
0.281818182	3.722349461	1.690611434;
0.283105023	3.69574352	1.675664383;
0.28440367	3.671857618	1.66583525;
0.285714286	3.651069854	1.660797876;
0.287037037	3.633549828	1.660121849;
0.288372093	3.619869578	1.663761941;
0.289719626	3.610670471	1.671601961;
0.291079812	3.606684768	1.683342232;
0.29245283	3.609045739	1.698595087;
0.293838863	3.61924793	1.716527554;
0.295238095	3.63838131	1.735557971;
0.296650718	3.667435261	1.753514325;
0.298076923	3.706630085	1.767467976;
0.299516908	3.755012573	1.774537796;
0.300970874	3.810067167	1.772019207;
0.302439024	3.868660857	1.758414289;
0.303921569	3.927027231	1.734103254;
0.305418719	3.982151228	1.700951334;
0.306930693	4.032764043	1.662224723;
0.308457711	4.07981321	1.620919804;
0.31	4.126246412	1.578777755;
0.311557789	4.175824914	1.53453688;
0.313131313	4.230839554	1.483832835;
0.314720812	4.289914432	1.420827772;
0.316326531	4.347831443	1.340798386;
0.317948718	4.396413875	1.242597491;
0.319587629	4.428051998	1.129937016;
0.321243523	4.437642276	1.009554856;
0.322916667	4.423862605	0.889975208;
0.32460733	4.389246555	0.778814637;
0.326315789	4.339115206	0.681436323;
0.328042328	4.279657348	0.599988565;
0.329787234	4.216440407	0.534065979;
0.331550802	4.153549615	0.481626709;
0.333333333	4.093452233	0.44002985;
0.335135135	4.037353775	0.406657434;
0.336956522	3.985617052	0.379331548;
0.338797814	3.938034651	0.35635388;
0.340659341	3.894158748	0.33653454;
0.342541436	3.85357834	0.319036028;
0.344444444	3.815651813	0.303357942;
0.346368715	3.780238989	0.289116048;
0.348314607	3.746864663	0.276101079;
0.350282486	3.71530017	0.264140726;
0.352272727	3.685487672	0.253096863;
0.354285714	3.657278401	0.242837927;
0.356321839	3.630519392	0.233250313;
0.358381503	3.605144371	0.224242624;
0.360465116	3.580991321	0.215697241;
0.362573099	3.558169228	0.207499255;
0.364705882	3.53651257	0.199539037;
0.366863905	3.516033393	0.191643703;
0.369047619	3.496551082	0.183543956;
0.371257485	3.477785979	0.174939227;
0.373493976	3.459090738	0.165824015;
0.375757576	3.440019207	0.156690709;
0.37804878	3.420601868	0.148294111;
0.380368098	3.401422056	0.14095701;
0.382716049	3.38295482	0.134485335;
0.385093168	3.365483812	0.128466297;
0.3875	3.348717891	0.122650583;
0.389937107	3.332761369	0.116893139;
0.392405063	3.317327117	0.11116112;
0.394904459	3.302522498	0.105424126;
0.397435897	3.288155768	0.099675523;
0.4	3.27423276	0.093888307;
0.402597403	3.260760057	0.088055327;
0.405228758	3.247744384	0.082175507;
0.407894737	3.235499747	0.076234368;
0.410596026	3.22444484	0.070081377;
0.413333333	3.215690969	0.061907363;
0.416107383	3.205988451	0.047356096;
0.418918919	3.187352041	0.031419686;
0.421768707	3.164945292	0.022504205;
0.424657534	3.144633158	0.017623509;
0.427586207	3.125998688	0.014069225;
0.430555556	3.108317614	0.01136857;
0.433566434	3.091605717	0.009345598;
0.436619718	3.075770611	0.007854782;
0.439716312	3.060608148	0.006774291;
0.442857143	3.046239246	0.006003245;
0.446043165	3.032455477	0.005460339;
0.449275362	3.019265893	0.005079329;
0.452554745	3.00667942	0.004806888;
0.455882353	2.994592628	0.004601347;
0.459259259	2.982899837	0.004431842;
0.462686567	2.9717196	0.004277018;
0.466165414	2.960945005	0.004125516;
0.46969697	2.950352978	0.003973579;
0.473282443	2.940289591	0.003819567;
0.476923077	2.930301087	0.003664327;
0.480620155	2.920734815	0.003507144;
0.484375	2.911363825	0.00334861;
0.488188976	2.902306658	0.003188365;
0.492063492	2.89333327	0.003026848;
0.496	2.884678897	0.002863908;
0.5	2.87622935	0.002699482;
0.504065041	2.867986742	0.002533832;
0.508196721	2.859953164	0.002366748;
0.512396694	2.852011968	0.002198603;
0.516666667	2.844283156	0.002029066;
0.521008403	2.836768755	0.001858289;
0.525423729	2.829350943	0.001686506;
0.52991453	2.822150794	0.001513413;
0.534482759	2.815049731	0.001339353;
0.539130435	2.808048635	0.001164121;
0.543859649	2.801148385	0.00098785;
0.548672566	2.794471427	0.0008105;
0.553571429	2.787897738	0.000632119;
0.558558559	2.781428177	0.000452808;
0.563636364	2.775063597	0.000274753;
0.568807339	2.768804848	0.000117544;
0.574074074	2.762652767	2.65844E-05;
0.579439252	2.756484665	2.40307E-06;
0.58490566	2.750671929	0;
0.59047619	2.744882063	0;
0.596153846	2.739252117	0;
0.601941748	2.733733357	0;
0.607843137	2.728339077	0;
0.613861386	2.723045083	0;
0.62	2.717852062	0;
0.626262626	2.712773279	0;
0.632653061	2.707784263	0;
0.639175258	2.702898236	0;
0.645833333	2.698103188	0;
0.652631579	2.69339969	0;
0.659574468	2.688788304	0;
0.666666667	2.684269588	0;
0.673913043	2.679818559	0;
0.681318681	2.675448403	0;
0.688888889	2.671172402	0;
0.696629213	2.666978248	0;
0.704545455	2.662866395	0;
0.712643678	2.658824406	0;
0.720930233	2.654865563	0;
0.729411765	2.650977374	0;
0.738095238	2.647160205	0;
0.746987952	2.643414416	0;
0.756097561	2.639740365	0;
0.765432099	2.636138402	0;
0.775	2.632595842	0;
0.784810127	2.62912602	0;
0.794871795	2.625716201	0;
0.805194805	2.622353565	0;
0.815789474	2.619064553	0;
0.826666667	2.61584949	0;
0.837837838	2.612682396	0;
0.849315068	2.609576645	0;
0.861111111	2.606545682	0;
0.873239437	2.603563403	0;
0.885714286	2.600630005	0;
0.898550725	2.597772163	0;
0.911764706	2.594963656	0;
0.925373134	2.592204673	0;
0.939393939	2.589508688	0;
0.953846154	2.586862629	0;
0.96875	2.584266676	0;
0.984126984	2.581734342	0;
1	2.579239144	0;
1.016393443	2.576807943	0;
1.033333333	2.574414189	0;
1.050847458	2.572084796	0;
1.068965517	2.569793151	0;
1.087719298	2.567552797	0;
1.107142857	2.56536389	0;
1.127272727	2.563213136	0;
1.148148148	2.561114112	0;
1.169811321	2.559066965	0;
1.192307692	2.557071843	0;
1.215686275	2.55510189	0;
1.24	2.553197709	0;
1.265306122	2.551318904	0;
1.291666667	2.549506145	0;
1.319148936	2.547718961	0;
1.347826087	2.545984527	0;
1.377777778	2.544289405	0;
1.409090909	2.542633687	0;
1.441860465	2.541017463	0;
1.476190476	2.539454418	0;
1.512195122	2.537931062	0;
1.55	2.536433864	0;
1.58974359	2.534990126	0;
1.631578947	2.533586324	0;
1.675675676	2.532222534	0;
1.722222222	2.530898834	0;
1.771428571	2.529615297	0;
1.823529412	2.528358328	0;
1.878787879	2.527155323	0;
1.9375	2.525979009	0;
2	2.524856808	0;
2.066666667	2.523761413	0;
2.137931034	2.522706567	0;
2.214285714	2.521692331	0;
2.296296296	2.520705046	0;
2.384615385	2.519758472	0;
2.48	2.518852663	0;
2.583333333	2.517987669	0;
2.695652174	2.517163541	0;
2.818181818	2.516366582	0;
2.952380952	2.515596824	0;
3.1	2.5148818	0;
3.263157895	2.514194052	0;
3.444444444	2.513547367	0;
3.647058824	2.512928017	0;
3.875	2.512349796	0;
4.133333333	2.511812736	0;
4.428571429	2.511303093	0;
4.769230769	2.510820886	0;
5.166666667	2.510393698	0;
5.636363636	2.509993993	0;
6.2	2.509621786	0;
10	2.509621786	0;
  }
}

Material = "InGaAs"
{

BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	g	= 1.19 ,	0.34	# [1]
	mt	= 0.0400e+00 ,	0.4200e+00	# [1]
}

SurfaceRecombination * surface SRH recombination:
{ * s = S0 ( 1 + Sref ( N/Nref )^gamma ) recombination velocity
	S0	= 1.0000e+03 ,	1.0000e+03	# [cm/s]
	Sref	= 1.0000e-03	# [1]
	Nref	= 1.0000e+16	# [cm^(-3)]
	gamma	= 1	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-07 ,	1.0000e-07	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}


Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	epsilon(0)	= 14.55	# [1]
	epsilon(1)	= 13.18	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + aplpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	refractiveindex(0)	= 3.892	# [1]
	refractiveindex(1)	= 3.5108	# [1]
	alpha(0)	= 2.0000e-04	# [1/K]
	alpha(1)	= 4.0000e-04	# [1/K]
}


LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	cv(0)	= 1.6	# [J/(Kcm^3)]
	cv(1)	= 1.6	# [J/(Kcm^3)]
	cv_b(0)	= 0.0000e+00	# [J/(K^2*cm^3)]
	cv_b(1)	= 0.0000e+00	# [J/(K^2*cm^3)]
	cv_c(0)	= 0.0000e+00	# [J/(K^3*cm^3)]
	cv_c(1)	= 0.0000e+00	# [J/(K^3*cm^3)]
	cv_d(0)	= 0.0000e+00	# [J/(K^4*cm^3)]
	cv_d(1)	= 0.0000e+00	# [J/(K^4*cm^3)]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 0:
  * kappa() = 1 / ( 1/kappa + 1/kappa_b * T + 1/kappa_c * T^2 )
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * The following interpolation polynom can be used on interval [Xmin(I),Xmax(I)]:
  * F(X) = F(I-1)+A(I)*(X-Xmin(I))+B(I)*(X-Xmin(I))^2+C(I)*(X-Xmin(I))^3,
  * where Xmax(I), F(I), B(I), C(I) are defined below for each interval.
  * A(I) is calculated for a boundary condition F(Xmax(I)) = F(I).
  *
  * Definition of mole fraction intervals, parameters, and coefficients:
	* parameter kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa(0)	= 1.5	# [W/(K cm)]
	Xmax(1)	= 1	# [1]
	kappa(1)	= 1.5	# [W/(K cm)]
	B(kappa(1))	= 0.0000e+00	# [W/(K cm)]
	C(kappa(1))	= 0.0000e+00	# [W/(K cm)]

	* parameter kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_b(0)	= 0.0000e+00	# [W/(K^2 cm)]
	Xmax(1)	= 1	# [1]
	kappa_b(1)	= 0.0000e+00	# [W/(K^2 cm)]
	B(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]
	C(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]

	* parameter kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_c(0)	= 0.0000e+00	# [W/(K^3 cm)]
	Xmax(1)	= 1	# [1]
	kappa_c(1)	= 0.0000e+00	# [W/(K^3 cm)]
	B(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]
	C(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]

	* parameter 1/kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa(0)	= 3.7	# [(K cm)/W]
	Xmax(1)	= 1	# [1]
	1/kappa(1)	= 2.17391	# [(K cm)/W]
	B(1/kappa(1))	= -2.3000e+01	# [(K cm)/W]
	C(1/kappa(1))	= 0.0000e+00	# [(K cm)/W]

	* parameter 1/kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_b(0)	= 0.0000e+00	# [cm/W]
	Xmax(1)	= 1	# [1]
	1/kappa_b(1)	= 0.0000e+00	# [cm/W]
	B(1/kappa_b(1))	= 0.0000e+00	# [cm/W]
	C(1/kappa_b(1))	= 0.0000e+00	# [cm/W]

	* parameter 1/kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_c(0)	= 0.0000e+00	# [cm/(W K)]
	Xmax(1)	= 1	# [1]
	1/kappa_c(1)	= 0.0000e+00	# [cm/(W K)]
	B(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]
	C(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]

}


EnergyRelaxationTime
{ *  Energy relaxation times in picoseconds
	tau_w_ele	= 1	# [ps]
	tau_w_hol	= 0.4	# [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8	# [1]
	p_l_f	= 0.8	# [1]
	n_gamma	= 0.0000e+00	# [1]
	p_gamma	= 0.0000e+00	# [1]
	n_delta	= 0.0000e+00	# [1]
	p_delta	= 0.0000e+00	# [1]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Tpar	= 3.0000e+02	# [K]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * The following interpolation polynom can be used on interval [Xmin(I),Xmax(I)]:
  * F(X) = F(I-1)+A(I)*(X-Xmin(I))+B(I)*(X-Xmin(I))^2+C(I)*(X-Xmin(I))^3,
  * where Xmax(I), F(I), B(I), C(I) are defined below for each interval.
  * A(I) is calculated for a boundary condition F(Xmax(I)) = F(I).
  *
  * Definition of mole fraction intervals, parameters, and coefficients:
	* parameter Eg0:
	Xmax(0)	= 0.0000e+00	# [1]
	Eg0(0)	= 0.355482	# [eV]
	Xmax(1)	= 1	# [1]
	Eg0(1)	= 1.42248	# [eV]
	B(Eg0(1))	= 0.555	# [eV]
	C(Eg0(1))	= 0.0000e+00	# [eV]

	* parameter alpha:
	Xmax(0)	= 0.0000e+00	# [1]
	alpha(0)	= 3.3500e-04	# [eV K^-1]
	Xmax(1)	= 1	# [1]
	alpha(1)	= 5.4050e-04	# [eV K^-1]
	B(alpha(1))	= 0.0000e+00	# [eV K^-1]
	C(alpha(1))	= 0.0000e+00	# [eV K^-1]

	* parameter beta:
	Xmax(0)	= 0.0000e+00	# [1]
	beta(0)	= 2.4800e+02	# [K]
	Xmax(1)	= 1	# [1]
	beta(1)	= 2.0400e+02	# [K]
	B(beta(1))	= 0.0000e+00	# [K]
	C(beta(1))	= 0.0000e+00	# [K]

	* parameter Chi0:
	Xmax(0)	= 0.0000e+00	# [1]
	Chi0(0)	= 4.92751	# [eV]
	Xmax(1)	= 1	# [1]
	Chi0(1)	= 4.11826	# [eV]
	B(Chi0(1))	= 0.0000e+00	# [eV]
	C(Chi0(1))	= 0.0000e+00	# [eV]

}

FreeCarrierAbsorption
{
  * Coefficients for free carrier absorption:
  * fcaalpha_n for electrons,
  * fcaalpha_p for holes

  * FCA = (alpha_n * n + alpha_p * p) * Light Intensity
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	fcaalpha_n(0)	= 4.0000e-18	# [cm^2]
	fcaalpha_n(1)	= 4.0000e-18	# [cm^2]
	fcaalpha_p(0)	= 8.0000e-18	# [cm^2]
	fcaalpha_p(1)	= 8.0000e-18	# [cm^2]
}

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	gamma_1(0)	= 20.4	# [1]
	gamma_1(1)	= 6.85	# [1]
	gamma_2(0)	= 8.3	# [1]
	gamma_2(1)	= 2.1	# [1]
	gamma_3(0)	= 9.1	# [1]
	gamma_3(1)	= 2.9	# [1]
	so(0)	= 0.38	# [eV]
	so(1)	= 0.34	# [eV]
	ep_te(0)	= 21.5	# [eV]
	ep_te(1)	= 28.8	# [eV]
	ep_tm(0)	= 21.5	# [eV]
	ep_tm(1)	= 28.8	# [eV]
	A1(0)	= 0.0000e+00	# [1]
	A1(1)	= 0.0000e+00	# [1]
	A2(0)	= 0.0000e+00	# [1]
	A2(1)	= 0.0000e+00	# [1]
	A3(0)	= 0.0000e+00	# [1]
	A3(1)	= 0.0000e+00	# [1]
	A4(0)	= 0.0000e+00	# [1]
	A4(1)	= 0.0000e+00	# [1]
	A5(0)	= 0.0000e+00	# [1]
	A5(1)	= 0.0000e+00	# [1]
	A6(0)	= 0.0000e+00	# [1]
	A6(1)	= 0.0000e+00	# [1]
	cr(0)	= 0.0000e+00	# [eV]
	cr(1)	= 0.0000e+00	# [eV]
}

QWStrain
{
  * Deformation Potentials (a_nu, a_c, b, C_12, C_11)
  * and StrainConstant eps for energy shift
  * of Laser Quantum Well Subbands:
  * Formula:
  * eps = (a_bulk - a_active)/a_bulk 
  * dE_c = 2 a_c (1- C12/C11) eps 
  * dE_lh = 2 a_nu (1- C12/C11) eps - b (1+ 2 C12/C11) eps 
  * dE_hh = 2 a_nu (1- C12/C11) eps + b (1+ 2 C12/C11) eps 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	* a_nu(0)	= 1	# [eV]
	* a_nu(1)	= 1.16	# [eV]
	* a_c(0)	= -5.0800e+00	# [eV]
	* a_c(1)	= -7.1700e+00	# [eV]
	* b(0)	= -1.8000e+00	# [eV]
	* b(1)	= -1.7000e+00	# [eV]
	* C_11(0)	= 8.329	# [eV]
	* C_11(1)	= 11.879	# [eV]
	* C_12(0)	= 4.526	# [eV]
	* C_12(1)	= 5.376	# [eV]
	eps(0)	= 0.0000e+00	# [n.n.]
	eps(1)	= 0.0000e+00	# [n.n.]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * me/m0 = (Nc300/2.540e19)^2/3 
  * Nc(T) = Nc300 * (T/300)^3/2 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a(0)	= 0.1905	# [1]
	a(1)	= 0.1905	# [1]
	ml(0)	= 0.9163	# [1]
	ml(1)	= 0.9163	# [1]
	mm(0)	= 0.0000e+00	# [1]
	mm(1)	= 0.0000e+00	# [1]
	Nc300(0)	= 8.7200e+16	# [cm-3]
	Nc300(1)	= 4.4200e+17	# [cm-3]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * mh/m0 = (Nv300/2.540e19)^2/3 
  * Nv(T) = Nv300 * (T/300)^3/2 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a(0)	= 0.443587	# [1]
	a(1)	= 0.443587	# [1]
	b(0)	= 3.6095e-03	# [K^-1]
	b(1)	= 3.6095e-03	# [K^-1]
	c(0)	= 1.1735e-04	# [K^-2]
	c(1)	= 1.1735e-04	# [K^-2]
	d(0)	= 1.2632e-06	# [K^-3]
	d(1)	= 1.2632e-06	# [K^-3]
	e(0)	= 3.0256e-09	# [K^-4]
	e(1)	= 3.0256e-09	# [K^-4]
	f(0)	= 4.6834e-03	# [K^-1]
	f(1)	= 4.6834e-03	# [K^-1]
	g(0)	= 2.2869e-04	# [K^-2]
	g(1)	= 2.2869e-04	# [K^-2]
	h(0)	= 7.4693e-07	# [K^-3]
	h(1)	= 7.4693e-07	# [K^-3]
	i(0)	= 1.7275e-09	# [K^-4]
	i(1)	= 1.7275e-09	# [K^-4]
	mm(0)	= 0.0000e+00	# [1]
	mm(1)	= 0.0000e+00	# [1]
	Nv300(0)	= 6.6600e+18	# [cm-3]
	Nv300(1)	= 8.4700e+18	# [cm-3]
}


SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * formula=1 (for materials with Si-like hole band structure)
  *   m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *   where k=(x,y,z) is unit normal vector in reziprocal
  *   space.  '+' for light hole band, '-' for heavy hole band
  * formula=2: Heavy hole mass mh and light hole mass ml are
  *   specified explicitly.
  * formula=3: A is the relative effective mass.  This
  *   formula must only be used for metal and will used in
  *   tunnelling current computation only.
  * formula<0 means no default model and no default parameters
  *   are available, so you have to provide values for
  *   'formula' and the respective parameters in order to use
  *   this parameter set.
	formula	= 2	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	A(0)	= 0.0000e+00	# [1]
	A(1)	= 0.0000e+00	# [1]
	B(0)	= 0.0000e+00	# [1]
	B(1)	= 0.0000e+00	# [1]
	C(0)	= 0.0000e+00	# [1]
	C(1)	= 0.0000e+00	# [1]
	ml(0)	= 0.024	# [1]
	ml(1)	= 0.074	# [1]
	mh(0)	= 0.41	# [1]
	mh(1)	= 0.62	# [1]
}

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	Exponent(0)	= 1.5,	1.5	#[1]
	Exponent(1)	= 1,	2.1	#[1]
	mumax(0)	= 2.2600e+04,	2.5000e+02	#[cm^2/(Vs)]
	mumax(1)	= 8.5000e+03,	4.0000e+02	#[cm^2/(Vs)]
	mutunnel(0)	= 0.05,	0.05	#[cm^2/(Vs)]
	mutunnel(1)	= 0.05,	0.05	#[cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	Exponent(0)	= 1.5,	1.5	#[1]
	Exponent(1)	= 1,	2.1	#[1]
	mumax(0)	= 2.2600e+04,	2.5000e+02	#[cm^2/(Vs)]
	mumax(1)	= 8.5000e+03,	4.0000e+02	#[cm^2/(Vs)]
	mutunnel(0)	= 0.05,	0.05	#[cm^2/(Vs)]
	mutunnel(1)	= 0.05,	0.05	#[cm^2/(Vs)]
}


*  DopingDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  DopingDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PhuMob{...} 
*  Philips Unified Mobility Model:
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(GaAs) + (1-x) * P(InAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	beta0(0)	= 2,	2	#[1]
	beta0(1)	= 2,	2	#[1]
	betaexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	betaexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	vsat0(0)	= 1.0000e+07,	1.0000e+07	#[cm/s]
	vsat0(1)	= 7.7000e+06,	7.7000e+06	#[cm/s]
	vsatexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	vsatexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	A_vsat(0)	= 1.0000e+07,	1.0000e+07	#[cm/s]
	A_vsat(1)	= 1.1300e+07,	1.1300e+07	#[cm/s]
	B_vsat(0)	= 0.0000e+00,	0.0000e+00	#[cm/s]
	B_vsat(1)	= 3.6000e+06,	3.6000e+06	#[cm/s]
	vsat_min(0)	= 5.0000e+05,	5.0000e+05	#[cm/s]
	vsat_min(1)	= 5.0000e+05,	5.0000e+05	#[cm/s]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	beta0(0)	= 2,	2	#[1]
	beta0(1)	= 2,	2	#[1]
	betaexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	betaexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	vsat0(0)	= 1.0000e+07,	1.0000e+07	#[cm/s]
	vsat0(1)	= 7.7000e+06,	7.7000e+06	#[cm/s]
	vsatexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	vsatexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	A_vsat(0)	= 1.0000e+07,	1.0000e+07	#[cm/s]
	A_vsat(1)	= 1.1300e+07,	1.1300e+07	#[cm/s]
	B_vsat(0)	= 0.0000e+00,	0.0000e+00	#[cm/s]
	B_vsat(1)	= 3.6000e+06,	3.6000e+06	#[cm/s]
	vsat_min(0)	= 5.0000e+05,	5.0000e+05	#[cm/s]
	vsat_min(1)	= 5.0000e+05,	5.0000e+05	#[cm/s]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *Ga fraction = .83
  *WAVELEN(um)	n	k
0.206666667	1.305768225	2.431537665;
0.20735786	1.308848768	2.437768637;
0.208053691	1.311524385	2.444826486;
0.208754209	1.313847548	2.45270541;
0.209459459	1.315904675	2.461382498;
0.210169492	1.317789268	2.470837948;
0.210884354	1.319519677	2.481074565;
0.211604096	1.321166904	2.492073187;
0.212328767	1.322758084	2.503819026;
0.213058419	1.324358809	2.516323905;
0.213793103	1.325980176	2.529589646;
0.214532872	1.327693006	2.543590207;
0.215277778	1.329508785	2.558359884;
0.216027875	1.331461189	2.573865242;
0.216783217	1.333588945	2.590159963;
0.21754386	1.335929741	2.607225159;
0.218309859	1.33852204	2.625085502;
0.219081272	1.341395436	2.643756365;
0.219858156	1.344607613	2.6632335;
0.220640569	1.348199929	2.683566015;
0.221428571	1.352217822	2.704742687;
0.222222222	1.35671346	2.726772379;
0.223021583	1.361744803	2.749685283;
0.223826715	1.367382853	2.773466435;
0.224637681	1.373682786	2.798141584;
0.225454545	1.380704084	2.823682915;
0.226277372	1.388494199	2.850080917;
0.227106227	1.397117624	2.877321338;
0.227941176	1.406597801	2.90539234;
0.228782288	1.416976316	2.934286753;
0.22962963	1.428244204	2.963999325;
0.230483271	1.440432594	2.994554148;
0.231343284	1.453516526	3.02601252;
0.232209738	1.467514055	3.058486031;
0.233082707	1.482508079	3.092092293;
0.233962264	1.498472498	3.1270015;
0.234848485	1.515699514	3.163478281;
0.235741445	1.534279613	3.201695296;
0.236641221	1.554644981	3.241922053;
0.237547893	1.577264899	3.28435129;
0.238461538	1.602637679	3.329033553;
0.239382239	1.631633277	3.376033775;
0.240310078	1.664882674	3.425039907;
0.241245136	1.703279738	3.475696026;
0.2421875	1.747516245	3.527253981;
0.243137255	1.798286859	3.578814977;
0.244094488	1.856104192	3.629331266;
0.245059289	1.921158699	3.677368054;
0.246031746	1.993258445	3.721665889;
0.247011952	2.071994695	3.760756466;
0.248	2.156560865	3.793281271;
0.248995984	2.245826934	3.818236672;
0.25	2.338393238	3.834784373;
0.251012146	2.432719171	3.842329808;
0.25203252	2.527119431	3.840910973;
0.253061224	2.619918464	3.830788596;
0.254098361	2.709745999	3.812770357;
0.255144033	2.795355389	3.787872667;
0.256198347	2.875941154	3.757449091;
0.257261411	2.951063936	3.722895068;
0.258333333	3.020721424	3.685579273;
0.259414226	3.085293575	3.646741115;
0.260504202	3.145483973	3.6073608;
0.261603376	3.202081903	3.568010495;
0.262711864	3.256011643	3.52904549;
0.263829787	3.307872991	3.490425242;
0.264957265	3.358209921	3.452124111;
0.266094421	3.407694534	3.41421505;
0.267241379	3.45710856	3.376409197;
0.268398268	3.507365027	3.337955676;
0.269565217	3.558610748	3.297521114;
0.270742358	3.610340861	3.254112312;
0.271929825	3.661685963	3.207130961;
0.273127753	3.712135074	3.156406241;
0.274336283	3.761245856	3.101728572;
0.275555556	3.8083485	3.042583973;
0.276785714	3.852591051	2.97865133;
0.278026906	3.892845763	2.909814737;
0.279279279	3.927668432	2.836294107;
0.280542986	3.955578888	2.758845535;
0.281818182	3.975394251	2.678892528;
0.283105023	3.986468198	2.598161887;
0.28440367	3.988612447	2.518678002;
0.285714286	3.982532408	2.442206995;
0.287037037	3.969253958	2.370327743;
0.288372093	3.950117751	2.303863518;
0.289719626	3.926582874	2.243633945;
0.291079812	3.900064348	2.189469957;
0.29245283	3.87172325	2.141324829;
0.293838863	3.842467614	2.098667902;
0.295238095	3.813038704	2.061052483;
0.296650718	3.78388953	2.027910907;
0.298076923	3.7553696	1.998866881;
0.299516908	3.727834631	1.973365496;
0.300970874	3.701272456	1.950980451;
0.302439024	3.675742313	1.931451826;
0.303921569	3.651487422	1.91442288;
0.305418719	3.628398386	1.899742632;
0.306930693	3.606550482	1.88711157;
0.308457711	3.585987285	1.87627954;
0.31	3.566625265	1.867097736;
0.311557789	3.548516064	1.859442681;
0.313131313	3.531670977	1.853244499;
0.314720812	3.515999241	1.848198429;
0.316326531	3.501485036	1.844243358;
0.317948718	3.488125594	1.841302441;
0.319587629	3.47591097	1.839350845;
0.321243523	3.464749217	1.838162071;
0.322916667	3.454632133	1.837750554;
0.32460733	3.445522085	1.838050563;
0.326315789	3.43741096	1.839021971;
0.328042328	3.430216088	1.840571502;
0.329787234	3.423971542	1.842731731;
0.331550802	3.418616145	1.845442075;
0.333333333	3.414163757	1.848744113;
0.335135135	3.410581422	1.8525594;
0.336956522	3.407819804	1.856814951;
0.338797814	3.405939399	1.861625081;
0.340659341	3.404966586	1.867020968;
0.342541436	3.404815669	1.872849794;
0.344444444	3.405592656	1.879245011;
0.346368715	3.407230226	1.886091595;
0.348314607	3.409836701	1.893519398;
0.350282486	3.413407042	1.901474086;
0.352272727	3.417967476	1.909932282;
0.354285714	3.423621819	1.919021273;
0.356321839	3.430377749	1.928626656;
0.358381503	3.438322944	1.938832287;
0.360465116	3.447549224	1.949666154;
0.362573099	3.458125949	1.961072182;
0.364705882	3.470195972	1.97314187;
0.366863905	3.483871434	1.98583415;
0.369047619	3.499327506	1.999166507;
0.371257485	3.516744073	2.013194742;
0.373493976	3.536295405	2.02783248;
0.375757576	3.558227229	2.043224223;
0.37804878	3.582723456	2.059449523;
0.380368098	3.610325995	2.077054822;
0.382716049	3.642328444	2.096750293;
0.385093168	3.681822787	2.118643643;
0.3875	3.733157281	2.139575454;
0.389937107	3.797869683	2.152151075;
0.392405063	3.871255764	2.147883668;
0.394904459	3.942621219	2.123549339;
0.397435897	4.001851412	2.084147349;
0.4	4.044744051	2.039411731;
0.402597403	4.073730258	1.998107157;
0.405228758	4.094148286	1.965010571;
0.407894737	4.11155326	1.941996734;
0.410596026	4.130837688	1.929196292;
0.413333333	4.156950647	1.926041698;
0.416107383	4.196278873	1.93091461;
0.418918919	4.257720077	1.938065204;
0.421768707	4.348713173	1.931408855;
0.424657534	4.460558695	1.885058144;
0.427586207	4.559284223	1.786289249;
0.430555556	4.611114701	1.658208256;
0.433566434	4.61666019	1.539191182;
0.436619718	4.600980177	1.44595069;
0.439716312	4.582578881	1.372022351;
0.442857143	4.565666969	1.307765499;
0.446043165	4.549070405	1.248406212;
0.449275362	4.531276633	1.192456489;
0.452554745	4.511161487	1.139945266;
0.455882353	4.488587352	1.091447154;
0.459259259	4.463944477	1.047755076;
0.462686567	4.438272718	1.009285609;
0.466165414	4.412672393	0.976110255;
0.46969697	4.388155115	0.947965835;
0.473282443	4.365673465	0.924385967;
0.476923077	4.346283726	0.90475254;
0.480620155	4.331006521	0.888330923;
0.484375	4.321092072	0.873909353;
0.488188976	4.317618065	0.859064414;
0.492063492	4.320543546	0.840206583;
0.496	4.327035665	0.813654372;
0.5	4.331831161	0.777979922;
0.504065041	4.329709612	0.735706644;
0.508196721	4.318447805	0.692050985;
0.512396694	4.29967891	0.651718617;
0.516666667	4.276867964	0.616708283;
0.521008403	4.252838002	0.586546515;
0.525423729	4.228957693	0.560016138;
0.52991453	4.205433862	0.536150641;
0.534482759	4.182270811	0.51441201;
0.539130435	4.159610795	0.49453445;
0.543859649	4.137393019	0.47632702;
0.548672566	4.115674688	0.459622398;
0.553571429	4.094683524	0.444276751;
0.558558559	4.074154968	0.43016075;
0.563636364	4.054402977	0.417134551;
0.568807339	4.03531528	0.405080661;
0.574074074	4.016906271	0.393897861;
0.579439252	3.999264061	0.38346385;
0.58490566	3.982287383	0.373682329;
0.59047619	3.966018668	0.364483965;
0.596153846	3.950395067	0.355765368;
0.601941748	3.935447376	0.347461878;
0.607843137	3.921007544	0.339525611;
0.613861386	3.907287015	0.331865522;
0.62	3.893940353	0.32447076;
0.626262626	3.881183292	0.317289499;
0.632653061	3.868978744	0.310288592;
0.639175258	3.857106097	0.303439383;
0.645833333	3.845696349	0.296731921;
0.652631579	3.834636167	0.290153934;
0.659574468	3.824133118	0.283679505;
0.666666667	3.813889559	0.277293288;
0.673913043	3.804218972	0.2709116;
0.681318681	3.794932604	0.264375018;
0.688888889	3.786021481	0.257413517;
0.696629213	3.777019762	0.249916889;
0.704545455	3.767344781	0.242233832;
0.712643678	3.757146668	0.23496556;
0.720930233	3.746676708	0.22854994;
0.729411765	3.736622351	0.222892381;
0.738095238	3.727122273	0.217683286;
0.746987952	3.718077198	0.21268287;
0.756097561	3.709524417	0.207764318;
0.765432099	3.701370169	0.202885965;
0.775	3.693537641	0.198050072;
0.784810127	3.686106379	0.193225748;
0.794871795	3.678943652	0.188415859;
0.805194805	3.672145636	0.183605421;
0.815789474	3.665753865	0.178778902;
0.826666667	3.659921403	0.173928758;
0.837837838	3.654803015	0.169066853;
0.849315068	3.651248999	0.1640753;
0.861111111	3.65120322	0.156838368;
0.873239437	3.651129718	0.140252402;
0.885714286	3.637740946	0.119419562;
0.898550725	3.616900983	0.109940049;
0.911764706	3.600556894	0.107495478;
0.925373134	3.587844525	0.106081323;
0.939393939	3.576899173	0.104774512;
0.953846154	3.5670886	0.10349619;
0.96875	3.558026635	0.102228396;
0.984126984	3.549720297	0.100971593;
1	3.541734714	0.099720874;
1.016393443	3.534313603	0.09847247;
1.033333333	3.527360312	0.09722254;
1.050847458	3.520635648	0.095974992;
1.068965517	3.514282349	0.09471812;
1.087719298	3.508261729	0.093459857;
1.107142857	3.502373003	0;
1.127272727	3.496861043	0;
1.148148148	3.491625867	0;
1.169811321	3.486483879	0;
1.192307692	3.481620809	0;
1.215686275	3.477037574	0;
1.24	3.472549791	0;
1.265306122	3.468240959	0;
1.291666667	3.464214414	0;
1.319148936	3.460284773	0;
1.347826087	3.456536236	0;
1.377777778	3.453071631	0;
1.409090909	3.449644152	0;
1.441860465	3.446543299	0;
1.476190476	3.44362409	0;
1.512195122	3.440966357	0;
1.55	3.43860415	0;
1.58974359	3.436215996	0;
1.631578947	3.433761358	0;
1.675675676	3.43082279	0;
1.722222222	3.427403141	0;
1.771428571	3.4239706	0;
1.823529412	3.42068399	0;
1.878787879	3.417761514	0;
1.9375	3.41515444	0;
2	3.412818701	0;
2.066666667	3.410565602	0;
2.137931034	3.408605137	0;
2.214285714	3.406769621	0;
2.296296296	3.405122431	0;
2.384615385	3.403558719	0;
2.48	3.402225659	0;
2.583333333	3.40112367	0;
2.695652174	3.400378469	0;
2.818181818	3.399926582	0;
2.952380952	3.400331148	0;
3.1	3.402547353	0;
3.263157895	3.407132163	0;
3.444444444	3.405078422	0;
3.647058824	3.394718165	0;
3.875	3.386042586	0;
4.133333333	3.380249442	0;
4.428571429	3.375746764	0;
4.769230769	3.372059492	0;
5.166666667	3.36893828	0;
5.636363636	3.366237679	0;
6.2	3.363938085	0;
10 	3.363938085	0;
}

ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
	n_0	= 3.5108	# [1]
	k_0	= 0.0000e+00	# [1]
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
       Formula = 3
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
	Cn_temp	= 4.0000e-04	# [K^-1]
	Tpar	= 3.0000e+02	# [K]
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
	Cn_carr	= 1	# [1]
  
  * Carrier dependence (imag) 
  *    delta_k_carr = wavelength / (4*PI) * (Ck_carr_n*n + Ck_carr_p*p) 
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/2 - Npar ) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 - Npar ) )
	Cn_gain	= 0.0000e+00	# [cm^3]
	Npar	= 1.0000e+18	# [cm^-3]
} 

RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C	= 2.0000e-10	# [cm^3/s]
}

}

Material = "InGaAsP"
{

RadiativeRecombination * coefficients:
{ * R_Radiative = C * (T/Tpar)^alpha * (n p - ni_eff^2)
  * C    
  * alpha 
	C	= 0.0000e+00	# [cm^3/s]
	alpha	= 0.0000e+00	# []
}

BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	g	= 1.19 ,	0.34	# [1]
	mt	= 0.0400e+00 ,	0.4200e+00	# [1]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *WAVELEN(um)	n	k
   0.19	3.79959633	1.96870586;
  0.3	3.79959633	1.96870586;
0.31	3.66256622	1.89976092;
0.32	3.58658475	1.8884993;
0.33	3.55305061	1.90162946;
0.34	3.54964515	1.9304569;
0.35	3.57244178	1.973211;
0.36	3.62383736	2.02930463;
0.37	3.71065295	2.09795087;
0.38	3.84587886	2.17920229;
0.39	4.11032381	2.27004011;
0.4	4.44120909	2.08670692;
0.41	4.5315991	1.90929495;
0.42	4.73417324	1.88876666;
0.43	5.1288768	1.49672815;
0.44	5.02218681	1.01947198;
0.45	4.84749864	0.776901549;
0.46	4.68903837	0.631766422;
0.47	4.55765836	0.541593365;
0.48	4.45267753	0.480813212;
0.49	4.36732101	0.434604463;
0.5	4.29491962	0.396654699;
0.51	4.23233072	0.365368513;
0.52	4.17683629	0.339107623;
0.53	4.12763857	0.316995277;
0.54	4.08387968	0.298362454;
0.55	4.04472344	0.282352325;
0.56	4.00963261	0.268435481;
0.57	3.97812105	0.256167642;
0.58	3.94977581	0.245185797;
0.59	3.92420566	0.235219264;
0.6	3.9011498	0.226035847;
0.61	3.88008104	0.217447912;
0.62	3.8608037	0.209295794;
0.63	3.84341537	0.201567074;
0.64	3.82732056	0.194095793;
0.65	3.81258393	0.186883257;
0.66	3.79912912	0.179839888;
0.67	3.78692867	0.172884419;
0.68	3.7759462	0.165656072;
0.69	3.76584761	0.157449478;
0.7	3.75529906	0.148149638;
0.71	3.74350683	0.139065224;
0.72	3.73106009	0.131443872;
0.73	3.71929179	0.125452157;
0.74	3.70874309	0.120348776;
0.75	3.69912322	0.115548153;
0.76	3.69032027	0.110875382;
0.77	3.68218891	0.106282015;
0.78	3.67469183	0.101751649;
0.79	3.66772243	0.097274191;
0.8	3.6612522	0.092840036;
0.81	3.65531383	0.088439923;
0.82	3.6499805	0.084067542;
0.83	3.64542258	0.079724477;
0.84	3.64193203	0.075388472;
0.85	3.64021622	0.070801656;
0.86	3.64241426	0.063758029;
0.87	3.6444304	0.047062291;
0.88	3.6360219	0.026223438;
0.89	3.61925198	0.009585547;
0.9	3.59865686	0.001641379;
0.91	3.58263849	0.000421459;
0.92	3.57007087	0.000109163;
0.93	3.55921197	3.45E-05;
0.94	3.54956241	1.02E-05;
0.95	3.54117033	4.21E-06;
0.96	3.53332432	1.24E-06;
0.97	3.52592496	2.52E-07;
0.98	3.51927888	7.39E-08;
0.99	3.51290051	0;
1	3.50670785	0;
10	3.50670785	0;
}

}

Material = "Germanium"
{
Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}
Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 15.8	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + aplpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
	refractiveindex	= 1	# [1]
	alpha	= 2.0000e-04	# [1/K]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 1:
  * kappa() = kappa + kappa_b * T + kappa_c * T^2 
	kappa	= 1.66667	# [W/(K cm)]
	kappa_b	= 0.0000e+00	# [W/(K^2 cm)]
	kappa_c	= 0.0000e+00	# [W/(K^3 cm)]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Chi0	= 3.95988	# [eV]
	Eg0	= 0.744	# [eV]
	alpha	= 4.7700e-04	# [eV K^-1]
	beta	= 2.3500e+02	# [K]
	Tpar	= 0.0000e+00	# [K]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
  * mt = a[Eg(0)/Eg(T)] 
  * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.540e19 ((me/m0)*(T/300))^3/2 
	a	= 0.0000e+00	# [1]
	ml	= 0.0000e+00	# [1]
	mm	= 0.55	# [1]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * mh =  m0*{[(a+bT+cT^2+dT^3+eT^4)/(1+fT+gT^2+hT^3+iT^4)]^(2/3) + mm}
  * Nv(T) = 2(2pi*kB/h_Planck^2*mh*T)^3/2 = 2.540e19 ((mh/m0)*(T/300))^3/2 
	a	= 0	# [1]
	b	= 0	# [K^-1]
	c	= 0	# [K^-2]
	d	= 0	# [K^-3]
	e	= 0	# [K^-4]
	f	= 0	# [K^-1]
	g	= 0	# [K^-2]
	h	= 0	# [K^-3]
	i	= 0	# [K^-4]
	mm	= 0.382	# [1]
}

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 3.9000e+03 ,	1.9000e+03	# [cm^2/(Vs)]
	Exponent	= 1.6 ,	2.3	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 3.9000e+03 ,	1.9000e+03	# [cm^2/(Vs)]
	Exponent	= 1.6 ,	2.3	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 3.9000e+03 ,	1.9000e+03	# [cm^2/Vs]
	Ar_alm  	= -1.6000e+00 ,	-2.3000e+00	# [1]
	Ar_mud  	= 0.0000e+00 ,	0.0000e+00	# [cm^2/Vs]
	Ar_ald  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_N0   	= 1.0000e+17 ,	1.0000e+17	# [cm^(-3)]
	Ar_alN  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_a    	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_ala  	= 0.0000e+00 ,	0.0000e+00	# [1]
}

DopingDependence_aniso:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 3.9000e+03 ,	1.9000e+03	# [cm^2/Vs]
	Ar_alm  	= -1.6000e+00 ,	-2.3000e+00	# [1]
	Ar_mud  	= 0.0000e+00 ,	0.0000e+00	# [cm^2/Vs]
	Ar_ald  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_N0   	= 1.0000e+17 ,	1.0000e+17	# [cm^(-3)]
	Ar_alN  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_a    	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_ala  	= 0.0000e+00 ,	0.0000e+00	# [1]
}

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 1.109 ,	1.213	# [1]
	betaexp	= 0.66 ,	0.17	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 1 ,	1	# [1]
 * Formula1 for saturation velocity:
 *            vsat = vsat0 (T/T0)^(-Vsatexp)
 * (Parameter Vsat_Formula has to be not equal to 2)
	vsat0	= 7.4300e+06 ,	7.4300e+06	# [1]
	vsatexp	= 0.87 ,	0.52	# [1]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 1.109 ,	1.213	# [1]
	betaexp	= 0.66 ,	0.17	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 1 ,	1	# [1]
 * Formula1 for saturation velocity:
 *            vsat = vsat0 (T/T0)^(-Vsatexp)
 * (Parameter Vsat_Formula has to be not equal to 2)
	vsat0	= 7.4300e+06 ,	7.4300e+06	# [1]
	vsatexp	= 0.87 ,	0.52	# [1]
}

PooleFrenkel
{ * TrapXsection = Xsec0*(1+Gpf) 
  * Gpf = (1+(a-1)*exp(a))/a^2-0.5 
  * where 
  *       a = (1/kT)*(q^3*F/pi/e0/epsPF)^0.5, 
  *       F is the electric field. 
	epsPF	= 15.8 ,	15.8	# [1]
}

vanOverstraetendeMan * Impact Ionization:
{ * G_impact = alpha_n n v_drift_n  +  alpha_p p v_drift_p
  * with alpha = gamma a  exp(-b gamma/E) for E<E0 (low) and E>E0 (high)
  *  with gamma = tanh(hbarOmega/(2kT0)) / tanh(hbarOmega/(2kT))
	a(low)	= 8.5500e+06 ,	2.8000e+06	# [1/cm]
	a(high)	= 8.5500e+06 ,	2.8000e+06	# [1/cm]
	b(low)	= 1.4200e+06 ,	1.0000e+06	# [V/cm]
	b(high)	= 1.4200e+06 ,	1.0000e+06	# [V/cm]
	E0	= 4.0000e+05 ,	4.0000e+05	# [V/cm]
	hbarOmega	= 0.037 ,	0.037	# [eV]
}


BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	g	= 1.19 ,	0.34	# [1]
	mt	= 0.0000e+00 ,	0.0000e+00	# [1]
}

TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *Ga fraction = .83
  *WAVELEN(um)	n	k
   0.19	3.753941047	1.967147421;
 0.3	3.753941047	1.967147421;
0.31	3.608199676	1.881251791;
0.32	3.522296508	1.86048057;
0.33	3.479539887	1.868439133;
0.34	3.467855717	1.893427046;
0.35	3.48203176	1.931913736;
0.36	3.522775102	1.982808267;
0.37	3.595162488	2.045405448;
0.38	3.709926057	2.119741059;
0.39	3.934334263	2.203167645;
0.4	4.216545335	2.059906551;
0.41	4.302087152	1.922169021;
0.42	4.48385208	1.915192958;
0.43	4.829770433	1.601748001;
0.44	4.772207551	1.215992407;
0.45	4.665790607	1.005833297;
0.46	4.558345178	0.862800277;
0.47	4.460533489	0.770746872;
0.48	4.385190899	0.713306636;
0.49	4.339956146	0.670119139;
0.5	4.315836134	0.612739003;
0.51	4.276523325	0.54070131;
0.52	4.223057763	0.483313497;
0.53	4.171477041	0.440954346;
0.54	4.124480452	0.407639101;
0.55	4.081708808	0.380459027;
0.56	4.043021288	0.357992482;
0.57	4.008171724	0.339122185;
0.58	3.976833671	0.322977049;
0.59	3.94868896	0.30891664;
0.6	3.923429561	0.29642663;
0.61	3.900488734	0.285073227;
0.62	3.879581154	0.274561602;
0.63	3.860774488	0.264826031;
0.64	3.843398903	0.25558757;
0.65	3.827507902	0.246848817;
0.66	3.812950071	0.238465752;
0.67	3.799686878	0.230388265;
0.68	3.787642783	0.222257697;
0.69	3.776547594	0.213487198;
0.7	3.765273827	0.203966572;
0.71	3.753123601	0.194755681;
0.72	3.740576112	0.186879734;
0.73	3.728748079	0.180468777;
0.74	3.718060894	0.174899195;
0.75	3.708262211	0.169670978;
0.76	3.699271722	0.164624852;
0.77	3.690940102	0.159717372;
0.78	3.683225555	0.154928751;
0.79	3.676047027	0.150242155;
0.8	3.669364202	0.145646746;
0.81	3.663209521	0.141127737;
0.82	3.657639622	0.13667444;
0.83	3.652773225	0.132285618;
0.84	3.648846088	0.127940424;
0.85	3.646466462	0.123418536;
0.86	3.64739689	0.116889723;
0.87	3.648232916	0.102379558;
0.88	3.640464826	0.084455065;
0.89	3.625793854	0.070039345;
0.9	3.607981788	0.062859157;
0.91	3.594031961	0.061282284;
0.92	3.582990357	0.060476755;
0.93	3.573392617	0.059883529;
0.94	3.564820422	0.059346321;
0.95	3.557338495	0.058842617;
0.96	3.550338831	0.058351941;
0.97	3.543733703	0.057871698;
0.98	3.537793451	0.057408559;
0.99	3.532092014	0.056955171;
1	3.526556404	0.056508495;
10	3.526556404	0.056508495;
}


RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C	= 2.0000e-10	# [cm^3/s]
}

}

Material = "GaAs"
{

Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 13.18	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + aplpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
	refractiveindex	= 3.5108	# [1]
	alpha	= 4.0000e-04	# [1/K]
}


LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
	cv	= 1.6	# [J/(K cm^3)]
	cv_b	= 0.0000e+00	# [J/(K^2 cm^3)]
	cv_c	= 0.0000e+00	# [J/(K^3 cm^3)]
	cv_d	= 0.0000e+00	# [J/(K^4 cm^3)]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 1:
  * kappa() = kappa + kappa_b * T + kappa_c * T^2 
	kappa	= 0.46	# [W/(K cm)]
	kappa_b	= 0.0000e+00	# [W/(K^2 cm)]
	kappa_c	= 0.0000e+00	# [W/(K^3 cm)]
}


EnergyRelaxationTime
{ *  Energy relaxation times in picoseconds
	tau_w_ele	= 1	# [ps]
	tau_w_hol	= 0.4	# [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8	# [1]
	p_l_f	= 0.8	# [1]
	n_gamma	= 0.0000e+00	# [1]
	p_gamma	= 0.0000e+00	# [1]
	n_delta	= 0.0000e+00	# [1]
	p_delta	= 0.0000e+00	# [1]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Chi0	= 4.07	# [eV]
	Bgn2Chi	= 0.5	# [1]
	Eg0	= 1.519	# [eV]
	alpha	= 5.4050e-04	# [eV K^-1]
	beta	= 2.0400e+02	# [K]
	Tpar	= 0.0000e+00	# [K]
}

TableBGN
{ * In the band-gap narrowing table, a list of concentrations
  * and the bandgap narrowing for them can be specified.
  * The first possibility is to specify total concentrations (the sum
  * of acceptor and donor concentration) and the band gap narrowing,
  * and then the table entries have the form:
  *   Total       Nt, deltaEg   # [ cm-3, eV ]
  * The second possibility is to specify the band gap narrowing for
  * acceptors and donors separately (This must not be combined with
  * specification of total concentrations).  The bandgap narrowing
  * then will be the sum of both contributions; if no acceptor or donor
  * entry exists, the respective bandgap narrowing contribution is 0.
  * The entries take the form:
  *   Donor       Nd, deltaEg   # [ cm-3, eV ]
  *   Acceptor    Na, deltaEg   # [ cm-3, eV ]
  * For each of the two possibilities, any number of table entries might
  * be given in any order.  For concentrations which are below (above)
  * the smallest (largest) concentration specified in the appropriate
  * table, the bandgap narrowing associated to the smallest (largest)
  * entry is assumed.  For concentration which fall in between table
  * entries, the bandgap narrowing is assumed to be linear in the
  * logarithm of the respective concentration and is interpolated
  * accordingly.
  Donor     1.0000e+16,   0.0000e+00   # [ cm-3, eV ]
  Donor     1.4100e+17,   0.0176   # [ cm-3, eV ]
  Donor     1.8900e+17,   0.0145   # [ cm-3, eV ]
  Donor     7.2000e+17,   0.0137   # [ cm-3, eV ]
  Donor     1.3900e+18,   6.6000e-03   # [ cm-3, eV ]
  Donor     2.0300e+18,   -1.6000e-03   # [ cm-3, eV ]
  Donor     4.2000e+18,   -2.5100e-02   # [ cm-3, eV ]
  Acceptor  1.0000e+17,   0.0000e+00   # [ cm-3, eV ]
  Acceptor  1.4000e+18,   0.0303   # [ cm-3, eV ]
  Acceptor  2.6000e+18,   0.0324   # [ cm-3, eV ]
  Acceptor  3.1000e+18,   0.036   # [ cm-3, eV ]
  Acceptor  4.6000e+18,   0.0453   # [ cm-3, eV ]
  Acceptor  1.0000e+19,   0.0507   # [ cm-3, eV ]
  Acceptor  2.2000e+19,   0.0525   # [ cm-3, eV ]
  Acceptor  2.6000e+19,   0.0498   # [ cm-3, eV ]
  Acceptor  4.1000e+19,   0.0477   # [ cm-3, eV ]
  Acceptor  4.3000e+19,   0.0444   # [ cm-3, eV ]
  Acceptor  6.0000e+19,   0.0476   # [ cm-3, eV ]
  Acceptor  7.5900e+19,   0.0394   # [ cm-3, eV ]
  Acceptor  9.7300e+19,   0.0362   # [ cm-3, eV ]
  Acceptor  1.2800e+20,   0.0302   # [ cm-3, eV ]
  Acceptor  1.3500e+20,   0.03   # [ cm-3, eV ]
  Acceptor  1.3900e+20,   0.0299   # [ cm-3, eV ]
}

FreeCarrierAbsorption
{
  * Coefficients for free carrier absorption:
  * fcaalpha_n for electrons,
  * fcaalpha_p for holes

  * FCA = (alpha_n * n + alpha_p * p) * Light Intensity
	fcaalpha_n	= 4.0000e-18	# [cm^2]
	fcaalpha_p	= 8.0000e-18	# [cm^2]
}

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

	gamma_1	= 6.85	# [1]
	gamma_2	= 2.1	# [1]
	gamma_3	= 2.9	# [1]
	so	= 0.34	# [eV]
	ep_te	= 28.8	# [eV]
	ep_tm	= 28.8	# [eV]
	cr	= 0.019	# [eV]
	A1	= -7.2400e+00	# [1]
	A2	= -5.1000e-01	# [1]
	A3	= 6.73	# [1]
	A4	= -3.3600e+00	# [1]
	A5	= -3.3500e+00	# [1]
	A6	= -4.7200e+00	# [1]
}

QWStrain
{
  * Deformation Potentials (a_nu, a_c, b, C_12, C_11)
  * and StrainConstant eps for energy shift
  * of Laser Quantum Well Subbands:
  * Formula:
  * eps = (a_bulk - a_active)/a_bulk 
  * dE_c = 2 a_c (1- C12/C11) eps 
  * dE_lh = 2 a_nu (1- C12/C11) eps - b (1+ 2 C12/C11) eps 
  * dE_hh = 2 a_nu (1- C12/C11) eps + b (1+ 2 C12/C11) eps 
	* a_nu	= 1.16	# [eV]
	* a_c	= -7.1700e+00	# [eV]
	* b_shear	= -1.7000e+00	# [eV]
	* C_11	= 11.879	# [1]
	* C_12	= 5.376	# [1]
	eps	= 0.0000e+00	# [1]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * me/m0 = (Nc300/2.540e19)^2/3 
  * Nc(T) = Nc300 * (T/300)^3/2 
	Nc300	= 4.4200e+17	# [cm-3]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * mh/m0 = (Nv300/2.540e19)^2/3 
  * Nv(T) = Nv300 * (T/300)^3/2 
	Nv300	= 8.4700e+18	# [cm-3]
}

SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * formula=1 (for materials with Si-like hole band structure)
  *   m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *   where k=(x,y,z) is unit normal vector in reziprocal
  *   space.  '+' for light hole band, '-' for heavy hole band
  * formula=2: Heavy hole mass mh and light hole mass ml are
  *   specified explicitly.
  * formula=3: A is the relative effective mass.  This
  *   formula must only be used for metal and will used in
  *   tunnelling current computation only.
  * formula<0 means no default model and no default parameters
  *   are available, so you have to provide values for
  *   'formula' and the respective parameters in order to use
  *   this parameter set.
	formula	= 2	# [1]
  * Formula 2 parameters:
	ml	= 0.074	# [1]
	mh	= 0.62	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
}

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 8.5000e+03 ,	4.0000e+02	# [cm^2/(Vs)]
	Exponent	= 1 ,	2.1	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 8.5000e+03 ,	4.0000e+02	# [cm^2/(Vs)]
	Exponent	= 1 ,	2.1	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 2.1360e+03 ,	21.48	# [cm^2/Vs]
	Ar_alm  	= -7.4570e-01 ,	-1.1240e+00	# [1]
	Ar_mud  	= 6.3310e+03 ,	3.3120e+02	# [cm^2/Vs]
	Ar_ald  	= -2.6870e+00 ,	-2.3660e+00	# [1]
	Ar_N0   	= 7.3450e+16 ,	5.1360e+17	# [cm^(-3)]
	Ar_alN  	= 3.535 ,	3.69	# [1]
	Ar_a    	= 0.6273 ,	0.8057	# [1]
	Ar_ala  	= -1.4410e-01 ,	0.0000e+00	# [1]
}

DopingDependence_aniso:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 2.1360e+03 ,	21.48	# [cm^2/Vs]
	Ar_alm  	= -7.4570e-01 ,	-1.1240e+00	# [1]
	Ar_mud  	= 6.3310e+03 ,	3.3120e+02	# [cm^2/Vs]
	Ar_ald  	= -2.6870e+00 ,	-2.3660e+00	# [1]
	Ar_N0   	= 7.3450e+16 ,	5.1360e+17	# [cm^(-3)]
	Ar_alN  	= 3.535 ,	3.69	# [1]
	Ar_a    	= 0.6273 ,	0.8057	# [1]
	Ar_ala  	= -1.4410e-01 ,	0.0000e+00	# [1]
}

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2 ,	2	# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
	A_vsat	= 1.1300e+07 ,	1.1300e+07	# [1]
	B_vsat	= 3.6000e+06 ,	3.6000e+06	# [1]
	vsat_min	= 5.0000e+05 ,	5.0000e+05	# [1]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2 ,	2	# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
	A_vsat	= 1.1300e+07 ,	1.1300e+07	# [1]
	B_vsat	= 3.6000e+06 ,	3.6000e+06	# [1]
	vsat_min	= 5.0000e+05 ,	5.0000e+05	# [1]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

PooleFrenkel
{ * TrapXsection = Xsec0*(1+Gpf) 
  * Gpf = (1+(a-1)*exp(a))/a^2-0.5 
  * where 
  *       a = (1/kT)*(q^3*F/pi/e0/epsPF)^0.5, 
  *       F is the electric field. 
	epsPF	= 13.18 ,	13.18	# [1]
}

vanOverstraetendeMan * Impact Ionization:
{ * G_impact = alpha_n n v_drift_n  +  alpha_p p v_drift_p
  * with alpha = gamma a  exp(-b gamma/E) for E<E0 (low) and E>E0 (high)
  *  with gamma = tanh(hbarOmega/(2kT0)) / tanh(hbarOmega/(2kT))
	a(low)	= 4.0000e+06 ,	1.3400e+06	# [1/cm]
	a(high)	= 4.0000e+06 ,	1.3400e+06	# [1/cm]
	b(low)	= 2.3000e+06 ,	2.0300e+06	# [V/cm]
	b(high)	= 2.3000e+06 ,	2.0300e+06	# [V/cm]
	E0	= 4.0000e+05 ,	4.0000e+05	# [V/cm]
	hbarOmega	= 0.035 ,	0.035	# [eV]
}


BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	g	= 0.068 ,	0.62	# [1]
	mt	= 0.05 ,	0.14	# [1]
}

RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C	= 2.0000e-10	# [cm^3/s]
}

TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *WAVELEN(um)	n	k
   0.19	3.79959633	1.96870586;
  0.3	3.79959633	1.96870586;
0.31	3.66256622	1.89976092;
0.32	3.58658475	1.8884993;
0.33	3.55305061	1.90162946;
0.34	3.54964515	1.9304569;
0.35	3.57244178	1.973211;
0.36	3.62383736	2.02930463;
0.37	3.71065295	2.09795087;
0.38	3.84587886	2.17920229;
0.39	4.11032381	2.27004011;
0.4	4.44120909	2.08670692;
0.41	4.5315991	1.90929495;
0.42	4.73417324	1.88876666;
0.43	5.1288768	1.49672815;
0.44	5.02218681	1.01947198;
0.45	4.84749864	0.776901549;
0.46	4.68903837	0.631766422;
0.47	4.55765836	0.541593365;
0.48	4.45267753	0.480813212;
0.49	4.36732101	0.434604463;
0.5	4.29491962	0.396654699;
0.51	4.23233072	0.365368513;
0.52	4.17683629	0.339107623;
0.53	4.12763857	0.316995277;
0.54	4.08387968	0.298362454;
0.55	4.04472344	0.282352325;
0.56	4.00963261	0.268435481;
0.57	3.97812105	0.256167642;
0.58	3.94977581	0.245185797;
0.59	3.92420566	0.235219264;
0.6	3.9011498	0.226035847;
0.61	3.88008104	0.217447912;
0.62	3.8608037	0.209295794;
0.63	3.84341537	0.201567074;
0.64	3.82732056	0.194095793;
0.65	3.81258393	0.186883257;
0.66	3.79912912	0.179839888;
0.67	3.78692867	0.172884419;
0.68	3.7759462	0.165656072;
0.69	3.76584761	0.157449478;
0.7	3.75529906	0.148149638;
0.71	3.74350683	0.139065224;
0.72	3.73106009	0.131443872;
0.73	3.71929179	0.125452157;
0.74	3.70874309	0.120348776;
0.75	3.69912322	0.115548153;
0.76	3.69032027	0.110875382;
0.77	3.68218891	0.106282015;
0.78	3.67469183	0.101751649;
0.79	3.66772243	0.097274191;
0.8	3.6612522	0.092840036;
0.81	3.65531383	0.088439923;
0.82	3.6499805	0.084067542;
0.83	3.64542258	0.079724477;
0.84	3.64193203	0.075388472;
0.85	3.64021622	0.070801656;
0.86	3.64241426	0.063758029;
0.87	3.6444304	0.047062291;
0.88	3.6360219	0.026223438;
0.89	3.61925198	0.009585547;
0.9	3.59865686	0.001641379;
0.91	3.58263849	0.000421459;
0.92	3.57007087	0.000109163;
0.93	3.55921197	3.45E-05;
0.94	3.54956241	1.02E-05;
0.95	3.54117033	4.21E-06;
0.96	3.53332432	1.24E-06;
0.97	3.52592496	2.52E-07;
0.98	3.51927888	7.39E-08;
0.99	3.51290051	0;
1	3.50670785	0;
10	3.50670785	0;
}

ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
	n_0	= 3.5108	# [1]
	k_0	= 0.0000e+00	# [1]
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
       Formula = 3
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
	Cn_temp	= 4.0000e-04	# [K^-1]
	Tpar	= 3.0000e+02	# [K]
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
	Cn_carr	= 1	# [1]
  
  * Carrier dependence (imag) 
  *    delta_k_carr = wavelength / (4*PI) * (Ck_carr_n*n + Ck_carr_p*p) 
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/2 - Npar ) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 - Npar ) )
	Cn_gain	= 0.0000e+00	# [cm^3]
	Npar	= 1.0000e+18	# [cm^-3]
} 

BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	mt	= 0.05 ,	0.14	# [1]	
}

  
ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
	n_0	= 3.5108	# [1]
	k_0	= 0.0000e+00	# [1]
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
       Formula = 3
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
	Cn_temp	= 4.0000e-04	# [K^-1]
	Tpar	= 3.0000e+02	# [K]
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
	Cn_carr	= 1	# [1]
  
  * Carrier dependence (imag) 
  *    delta_k_carr = wavelength / (4*PI) * (Ck_carr_n*n + Ck_carr_p*p) 
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/2 - Npar ) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 - Npar ) )
	Cn_gain	= 0.0000e+00	# [cm^3]
	Npar	= 1.0000e+18	# [cm^-3]
} 
 
}

Material = "InP"
{

Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 12.4	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + aplpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
	refractiveindex	= 3.22	# [1]
	alpha	= 2.0000e-04	# [1/K]
}


EnergyRelaxationTime
{ *  Energy relaxation times in picoseconds
	tau_w_ele	= 1	# [ps]
	tau_w_hol	= 0.4	# [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8	# [1]
	p_l_f	= 0.8	# [1]
	n_gamma	= 0.0000e+00	# [1]
	p_gamma	= 0.0000e+00	# [1]
	n_delta	= 0.0000e+00	# [1]
	p_delta	= 0.0000e+00	# [1]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Chi0	= 4.5	# [eV]
	Eg0	= 1.35	# [eV]
	alpha	= 4.1000e-04	# [eV K^-1]
	beta	= 1.3600e+02	# [K]
	Tpar	= 0.0000e+00	# [K]
}

FreeCarrierAbsorption
{
  * Coefficients for free carrier absorption:
  * fcaalpha_n for electrons,
  * fcaalpha_p for holes

  * FCA = (alpha_n * n + alpha_p * p) * Light Intensity
	fcaalpha_n	= 4.0000e-18	# [cm^2]
	fcaalpha_p	= 8.0000e-18	# [cm^2]
}

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

	gamma_1	= 4.95	# [1]
	gamma_2	= 1.65	# [1]
	gamma_3	= 2.35	# [1]
	so	= 0.11	# [eV]
	ep_te	= 20.7	# [eV]
	ep_tm	= 20.7	# [eV]
	cr	= 0.019	# [eV]
	A1	= -7.2400e+00	# [1]
	A2	= -5.1000e-01	# [1]
	A3	= 6.73	# [1]
	A4	= -3.3600e+00	# [1]
	A5	= -3.3500e+00	# [1]
	A6	= -4.7200e+00	# [1]
}

QWStrain
{
  * Deformation Potentials (a_nu, a_c, b, C_12, C_11)
  * and StrainConstant eps for energy shift
  * of Laser Quantum Well Subbands:
  * Formula:
  * eps = (a_bulk - a_active)/a_bulk 
  * dE_c = 2 a_c (1- C12/C11) eps 
  * dE_lh = 2 a_nu (1- C12/C11) eps - b (1+ 2 C12/C11) eps 
  * dE_hh = 2 a_nu (1- C12/C11) eps + b (1+ 2 C12/C11) eps 
	* a_nu	= 1.27	# [eV]
	* a_c	= -5.0400e+00	# [eV]
	* b_shear	= -1.7000e+00	# [eV]
	* C_11	= 10.11	# [1]
	* C_12	= 5.61	# [1]
	eps	= 0.0000e+00	# [1]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * me/m0 = (Nc300/2.540e19)^2/3 
  * Nc(T) = Nc300 * (T/300)^3/2 
	Nc300	= 5.6600e+17	# [cm-3]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * mh/m0 = (Nv300/2.540e19)^2/3 
  * Nv(T) = Nv300 * (T/300)^3/2 
	Nv300	= 2.0300e+19	# [cm-3]
}

SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * formula=1 (for materials with Si-like hole band structure)
  *   m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *   where k=(x,y,z) is unit normal vector in reziprocal
  *   space.  '+' for light hole band, '-' for heavy hole band
  * formula=2: Heavy hole mass mh and light hole mass ml are
  *   specified explicitly.
  * formula=3: A is the relative effective mass.  This
  *   formula must only be used for metal and will used in
  *   tunnelling current computation only.
  * formula<0 means no default model and no default parameters
  *   are available, so you have to provide values for
  *   'formula' and the respective parameters in order to use
  *   this parameter set.
	formula	= 2	# [1]
  * Formula 2 parameters:
	ml	= 0.089	# [1]
	mh	= 0.85	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
}

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 4.5000e+03 ,	1.5000e+02	# [cm^2/(Vs)]
	Exponent	= 1.5 ,	1.5	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 4.5000e+03 ,	1.5000e+02	# [cm^2/(Vs)]
	Exponent	= 1.5 ,	1.5	# [1]
	mutunnel	= 0.05 ,	0.05	# [cm^2/(Vs)]
}

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 4.5000e+03 ,	1.5000e+02	# [cm^2/Vs]
	Ar_alm  	= -1.5000e+00 ,	-1.5000e+00	# [1]
	Ar_mud  	= 0.0000e+00 ,	0.0000e+00	# [cm^2/Vs]
	Ar_ald  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_N0   	= 1.0000e+17 ,	1.0000e+17	# [cm^(-3)]
	Ar_alN  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_a    	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_ala  	= 0.0000e+00 ,	0.0000e+00	# [1]
}

DopingDependence_aniso:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 2 ,	2	# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 4.5000e+03 ,	1.5000e+02	# [cm^2/Vs]
	Ar_alm  	= -1.5000e+00 ,	-1.5000e+00	# [1]
	Ar_mud  	= 0.0000e+00 ,	0.0000e+00	# [cm^2/Vs]
	Ar_ald  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_N0   	= 1.0000e+17 ,	1.0000e+17	# [cm^(-3)]
	Ar_alN  	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_a    	= 0.0000e+00 ,	0.0000e+00	# [1]
	Ar_ala  	= 0.0000e+00 ,	0.0000e+00	# [1]
}

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2 ,	2	# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
	A_vsat	= 1.0000e+07 ,	1.0000e+07	# [1]
	B_vsat	= 0.0000e+00 ,	0.0000e+00	# [1]
	vsat_min	= 5.0000e+05 ,	5.0000e+05	# [1]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )^1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2 ,	2	# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00	# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2	# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)^4)/(1+(E/E0_TrEf)^4)
	E0_TrEf	= 4.0000e+03 ,	4.0000e+03	# [1]
	Ksmooth_TrEf	= 1 ,	1	# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
	A_vsat	= 1.0000e+07 ,	1.0000e+07	# [1]
	B_vsat	= 0.0000e+00 ,	0.0000e+00	# [1]
	vsat_min	= 5.0000e+05 ,	5.0000e+05	# [1]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

PooleFrenkel
{ * TrapXsection = Xsec0*(1+Gpf) 
  * Gpf = (1+(a-1)*exp(a))/a^2-0.5 
  * where 
  *       a = (1/kT)*(q^3*F/pi/e0/epsPF)^0.5, 
  *       F is the electric field. 
	epsPF	= 12.4 ,	12.4	# [1]
}

TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *WAVELEN(um)	n	k
0.19	3.25740926	1.69793612;
0.3	3.25740926	1.69793612;
0.31	3.17981579	1.69255087;
0.32	3.14311018	1.71092217;
0.33	3.13342218	1.74804981;
0.34	3.15074761	1.80469699;
0.35	3.20015139	1.87873401;
0.36	3.28743159	1.96943634;
0.37	3.44471204	2.09873435;
0.38	3.77342608	2.15626624;
0.39	4.13274989	2.04310365;
0.4	4.44493424	1.68832731;
0.41	4.44988885	1.28136503;
0.42	4.3435981	1.03376964;
0.43	4.23754417	0.876916616;
0.44	4.14476349	0.769331229;
0.45	4.06673306	0.690659139;
0.46	4.00084449	0.628846335;
0.47	3.94374405	0.578017657;
0.48	3.89314055	0.53548392;
0.49	3.84782974	0.499547347;
0.5	3.8068196	0.468908491;
0.51	3.76998974	0.442930551;
0.52	3.73662373	0.42050974;
0.53	3.70651028	0.401078569;
0.54	3.67945108	0.384214664;
0.55	3.65493658	0.369358687;
0.56	3.63282339	0.35615315;
0.57	3.61280706	0.344306563;
0.58	3.59470504	0.333563127;
0.59	3.57839887	0.323742771;
0.6	3.56363247	0.314682086;
0.61	3.55028126	0.306226388;
0.62	3.53807358	0.298269658;
0.63	3.52707239	0.290788032;
0.64	3.51701101	0.283629055;
0.65	3.5078624	0.276792972;
0.66	3.49955774	0.270193858;
0.67	3.49212939	0.263832715;
0.68	3.48526667	0.257654553;
0.69	3.47910169	0.251617412;
0.7	3.47345472	0.245732313;
0.71	3.46848699	0.239931308;
0.72	3.46401901	0.234190993;
0.73	3.45990471	0.228533561;
0.74	3.45644901	0.222892328;
0.75	3.45339249	0.217278757;
0.76	3.45076658	0.211676119;
0.77	3.44865278	0.206052307;
0.78	3.44696929	0.200411482;
0.79	3.44591922	0.194695944;
0.8	3.44559605	0.188790045;
0.81	3.44619662	0.182433443;
0.82	3.44764618	0.175167228;
0.83	3.44954667	0.166441357;
0.84	3.45131245	0.155873934;
0.85	3.45211184	0.143521685;
0.86	3.45047534	0.130125974;
0.87	3.44649476	0.117384774;
0.88	3.44151066	0.106296869;
0.89	3.43677437	0.097140025;
0.9	3.43379941	0.089538859;
0.91	3.43658132	0.08183384;
0.92	3.44158812	0.0603296;
0.93	3.43470479	0.034452939;
0.94	3.41322799	0.008003767;
0.95	3.38911212	0.002774316;
0.96	3.3705567	0.000542819;
0.97	3.35596325	0.000243585;
0.98	3.34460775	0.00014279;
0.99	3.33442193	7.67E-05;
1	3.32505635	3.50E-05;
10	3.32505635	3.50E-05;
}


}

Material = "TiOx"
{

**************************************************
* Material parameter file for TiOx
* Temperature                 : 300 [K]
* Substrate                   : --
* conduction band offset ratio: -- [1]
* Doping concentration        : -- [cm-3]
* Mole fraction x             : -- [1]
* Mole fraction y             : -- [1]
*************************************************


*************************************************
* Material Parameter sections
*************************************************


* Static dielectric permittivity

Epsilon 
{ 
  * Ratio of the permittivities of material and vacuum
  * epsilon() = epsilon
  * epsilon(300.0) = 6.000 
        epsilon = 6.0000     # [1]
}



TableODB {
* Each entry of the table consists of three values:
* complex refractive index n + i*k (unitless)
* refractive index = n,  absorption coefficient = 4*pi*k/wavelength
* WAVELEN[um]	n	k
* Reference: M. Breselge, Simulation von III-V Kaskadensolarzellen und Charakterisierung optischer Materialparameter,
* Diplomarbeit, Albert-Ludwigs-Universität und Fraunhofer ISE Freiburg (2003)
2.48000E-01	2.10831E+00	1.45534E+00;
2.48500E-01	2.12250E+00	1.45372E+00;
2.49000E-01	2.13666E+00	1.45189E+00;
2.49500E-01	2.15078E+00	1.44985E+00;
2.50000E-01	2.16487E+00	1.44761E+00;
2.50510E-01	2.17892E+00	1.44517E+00;
2.51010E-01	2.19294E+00	1.44251E+00;
2.51520E-01	2.20691E+00	1.43965E+00;
2.52030E-01	2.22084E+00	1.43659E+00;
2.52550E-01	2.23473E+00	1.43332E+00;
2.53060E-01	2.24857E+00	1.42984E+00;
2.53580E-01	2.26235E+00	1.42616E+00;
2.54100E-01	2.27609E+00	1.42227E+00;
2.54620E-01	2.28977E+00	1.41818E+00;
2.55140E-01	2.30339E+00	1.41388E+00;
2.55670E-01	2.31695E+00	1.40938E+00;
2.56200E-01	2.33045E+00	1.40468E+00;
2.56730E-01	2.34388E+00	1.39977E+00;
2.57260E-01	2.35724E+00	1.39465E+00;
2.57800E-01	2.37053E+00	1.38934E+00;
2.58330E-01	2.38375E+00	1.38382E+00;
2.58870E-01	2.39689E+00	1.37809E+00;
2.59410E-01	2.40994E+00	1.37217E+00;
2.59960E-01	2.42292E+00	1.36604E+00;
2.60500E-01	2.43581E+00	1.35971E+00;
2.61050E-01	2.44860E+00	1.35318E+00;
2.61600E-01	2.46131E+00	1.34645E+00;
2.62160E-01	2.47392E+00	1.33952E+00;
2.62710E-01	2.48642E+00	1.33239E+00;
2.63270E-01	2.49883E+00	1.32506E+00;
2.63830E-01	2.51112E+00	1.31753E+00;
2.64390E-01	2.52331E+00	1.30981E+00;
2.64960E-01	2.53539E+00	1.30189E+00;
2.65520E-01	2.54734E+00	1.29377E+00;
2.66090E-01	2.55918E+00	1.28546E+00;
2.66670E-01	2.57089E+00	1.27696E+00;
2.67240E-01	2.58247E+00	1.26827E+00;
2.67820E-01	2.59392E+00	1.25938E+00;
2.68400E-01	2.60523E+00	1.25031E+00;
2.68980E-01	2.61640E+00	1.24104E+00;
2.69570E-01	2.62743E+00	1.23160E+00;
2.70150E-01	2.63831E+00	1.22196E+00;
2.70740E-01	2.64903E+00	1.21215E+00;
2.71330E-01	2.65960E+00	1.20216E+00;
2.71930E-01	2.67001E+00	1.19198E+00;
2.72530E-01	2.68026E+00	1.18163E+00;
2.73130E-01	2.69034E+00	1.17111E+00;
2.73730E-01	2.70025E+00	1.16042E+00;
2.74340E-01	2.70998E+00	1.14956E+00;
2.74940E-01	2.71953E+00	1.13853E+00;
2.75560E-01	2.72889E+00	1.12734E+00;
2.76170E-01	2.73807E+00	1.11599E+00;
2.76790E-01	2.74705E+00	1.10448E+00;
2.77400E-01	2.75584E+00	1.09282E+00;
2.78030E-01	2.76443E+00	1.08100E+00;
2.78650E-01	2.77281E+00	1.06905E+00;
2.79280E-01	2.78098E+00	1.05695E+00;
2.79910E-01	2.78895E+00	1.04471E+00;
2.80540E-01	2.79670E+00	1.03233E+00;
2.81180E-01	2.80422E+00	1.01983E+00;
2.81820E-01	2.81153E+00	1.00719E+00;
2.82460E-01	2.81861E+00	9.94440E-01;
2.83110E-01	2.82546E+00	9.81569E-01;
2.83750E-01	2.83207E+00	9.68586E-01;
2.84400E-01	2.83845E+00	9.55496E-01;
2.85060E-01	2.84459E+00	9.42303E-01;
2.85710E-01	2.85049E+00	9.29013E-01;
2.86370E-01	2.85614E+00	9.15630E-01;
2.87040E-01	2.86154E+00	9.02162E-01;
2.87700E-01	2.86669E+00	8.88613E-01;
2.88370E-01	2.87159E+00	8.74989E-01;
2.89040E-01	2.87623E+00	8.61296E-01;
2.89720E-01	2.88062E+00	8.47540E-01;
2.90400E-01	2.88474E+00	8.33726E-01;
2.91080E-01	2.88861E+00	8.19862E-01;
2.91760E-01	2.89221E+00	8.05954E-01;
2.92450E-01	2.89554E+00	7.92007E-01;
2.93140E-01	2.89861E+00	7.78029E-01;
2.93840E-01	2.90141E+00	7.64026E-01;
2.94540E-01	2.90395E+00	7.50005E-01;
2.95240E-01	2.90621E+00	7.35972E-01;
2.95940E-01	2.90821E+00	7.21935E-01;
2.96650E-01	2.90993E+00	7.07900E-01;
2.97360E-01	2.91139E+00	6.93873E-01;
2.98080E-01	2.91258E+00	6.79863E-01;
2.98800E-01	2.91350E+00	6.65875E-01;
2.99520E-01	2.91415E+00	6.51918E-01;
3.00240E-01	2.91454E+00	6.37997E-01;
3.00970E-01	2.91465E+00	6.24121E-01;
3.01700E-01	2.91451E+00	6.10295E-01;
3.02440E-01	2.91410E+00	5.96528E-01;
3.03180E-01	2.91343E+00	5.82824E-01;
3.03920E-01	2.91250E+00	5.69193E-01;
3.04670E-01	2.91131E+00	5.55640E-01;
3.05420E-01	2.90987E+00	5.42173E-01;
3.06170E-01	2.90818E+00	5.28797E-01;
3.06930E-01	2.90624E+00	5.15520E-01;
3.07690E-01	2.90406E+00	5.02348E-01;
3.08460E-01	2.90163E+00	4.89287E-01;
3.09230E-01	2.89897E+00	4.76345E-01;
3.10000E-01	2.89608E+00	4.63526E-01;
3.10780E-01	2.89295E+00	4.50837E-01;
3.11560E-01	2.88960E+00	4.38284E-01;
3.12340E-01	2.88603E+00	4.25873E-01;
3.13130E-01	2.88224E+00	4.13609E-01;
3.13920E-01	2.87825E+00	4.01498E-01;
3.14720E-01	2.87404E+00	3.89544E-01;
3.15520E-01	2.86964E+00	3.77753E-01;
3.16330E-01	2.86504E+00	3.66130E-01;
3.17140E-01	2.86026E+00	3.54679E-01;
3.17950E-01	2.85529E+00	3.43404E-01;
3.18770E-01	2.85015E+00	3.32310E-01;
3.19590E-01	2.84483E+00	3.21402E-01;
3.20410E-01	2.83935E+00	3.10681E-01;
3.21240E-01	2.83372E+00	3.00152E-01;
3.22080E-01	2.82793E+00	2.89819E-01;
3.22920E-01	2.82199E+00	2.79684E-01;
3.23760E-01	2.81592E+00	2.69749E-01;
3.24610E-01	2.80972E+00	2.60018E-01;
3.25460E-01	2.80339E+00	2.50492E-01;
3.26320E-01	2.79695E+00	2.41174E-01;
3.27180E-01	2.79039E+00	2.32065E-01;
3.28040E-01	2.78373E+00	2.23166E-01;
3.28910E-01	2.77698E+00	2.14479E-01;
3.29790E-01	2.77013E+00	2.06004E-01;
3.30670E-01	2.76320E+00	1.97742E-01;
3.31550E-01	2.75620E+00	1.89694E-01;
3.32440E-01	2.74912E+00	1.81859E-01;
3.33330E-01	2.74199E+00	1.74238E-01;
3.34230E-01	2.73480E+00	1.66830E-01;
3.35140E-01	2.72756E+00	1.59633E-01;
3.36040E-01	2.72027E+00	1.52648E-01;
3.36960E-01	2.71295E+00	1.45874E-01;
3.37870E-01	2.70560E+00	1.39308E-01;
3.38800E-01	2.69823E+00	1.32949E-01;
3.39730E-01	2.69084E+00	1.26795E-01;
3.40660E-01	2.68344E+00	1.20844E-01;
3.41600E-01	2.67604E+00	1.15094E-01;
3.42540E-01	2.66863E+00	1.09543E-01;
3.43490E-01	2.66124E+00	1.04188E-01;
3.44440E-01	2.65385E+00	9.90250E-02;
3.45400E-01	2.64648E+00	9.40522E-02;
3.46370E-01	2.63913E+00	8.92663E-02;
3.47340E-01	2.63181E+00	8.46638E-02;
3.48310E-01	2.62452E+00	8.02413E-02;
3.49300E-01	2.61727E+00	7.59952E-02;
3.50280E-01	2.61006E+00	7.19217E-02;
3.51270E-01	2.60289E+00	6.80171E-02;
3.52270E-01	2.59577E+00	6.42774E-02;
3.53280E-01	2.58870E+00	6.06988E-02;
3.54290E-01	2.58168E+00	5.72769E-02;
3.55300E-01	2.57473E+00	5.40079E-02;
3.56320E-01	2.56784E+00	5.08873E-02;
3.57350E-01	2.56101E+00	4.79111E-02;
3.58380E-01	2.55425E+00	4.50750E-02;
3.59420E-01	2.54755E+00	4.23746E-02;
3.60470E-01	2.54093E+00	3.98057E-02;
3.61520E-01	2.53439E+00	3.73640E-02;
3.62570E-01	2.52792E+00	3.50452E-02;
3.63640E-01	2.52153E+00	3.28450E-02;
3.64710E-01	2.51521E+00	3.07590E-02;
3.65780E-01	2.50898E+00	2.87833E-02;
3.66860E-01	2.50282E+00	2.69134E-02;
3.67950E-01	2.49675E+00	2.51454E-02;
3.69050E-01	2.49076E+00	2.34751E-02;
3.70150E-01	2.48486E+00	2.18986E-02;
3.71260E-01	2.47904E+00	2.04118E-02;
3.72370E-01	2.47330E+00	1.90109E-02;
3.73490E-01	2.46765E+00	1.76921E-02;
3.74620E-01	2.46208E+00	1.64517E-02;
3.75760E-01	2.45660E+00	1.52861E-02;
3.76900E-01	2.45119E+00	1.41917E-02;
3.78050E-01	2.44588E+00	1.31651E-02;
3.79200E-01	2.44064E+00	1.22030E-02;
3.80370E-01	2.43549E+00	1.13021E-02;
3.81540E-01	2.43043E+00	1.04593E-02;
3.82720E-01	2.42544E+00	9.67148E-03;
3.83900E-01	2.42053E+00	8.93578E-03;
3.85090E-01	2.41570E+00	8.24936E-03;
3.86290E-01	2.41095E+00	7.60948E-03;
3.87500E-01	2.40628E+00	7.01353E-03;
3.88710E-01	2.40169E+00	6.45899E-03;
3.89940E-01	2.39717E+00	5.94343E-03;
3.91170E-01	2.39272E+00	5.46457E-03;
3.92410E-01	2.38835E+00	5.02017E-03;
3.93650E-01	2.38405E+00	4.60814E-03;
3.94900E-01	2.37982E+00	4.22645E-03;
3.96170E-01	2.37566E+00	3.87320E-03;
3.97440E-01	2.37156E+00	3.54656E-03;
3.98710E-01	2.36754E+00	3.24479E-03;
4.00000E-01	2.36358E+00	2.96624E-03;
4.01290E-01	2.35968E+00	2.70937E-03;
4.02600E-01	2.35585E+00	2.47270E-03;
4.03910E-01	2.35207E+00	2.25484E-03;
4.05230E-01	2.34836E+00	2.05447E-03;
4.06560E-01	2.34471E+00	1.87036E-03;
4.07890E-01	2.34111E+00	1.70133E-03;
4.09240E-01	2.33757E+00	1.54629E-03;
4.10600E-01	2.33409E+00	1.40421E-03;
4.11960E-01	2.33066E+00	1.27412E-03;
4.13330E-01	2.32728E+00	1.15513E-03;
4.14720E-01	2.32395E+00	1.04638E-03;
4.16110E-01	2.32067E+00	9.47073E-04;
4.17510E-01	2.31745E+00	8.56478E-04;
4.18920E-01	2.31427E+00	7.73901E-04;
4.20340E-01	2.31113E+00	6.98700E-04;
4.21770E-01	2.30804E+00	6.30279E-04;
4.23210E-01	2.30500E+00	5.68081E-04;
4.24660E-01	2.30200E+00	5.11593E-04;
4.26120E-01	2.29904E+00	4.60335E-04;
4.27590E-01	2.29613E+00	4.13864E-04;
4.29070E-01	2.29325E+00	3.71774E-04;
4.30560E-01	2.29042E+00	3.33681E-04;
4.32060E-01	2.28762E+00	2.99240E-04;
4.33570E-01	2.28486E+00	2.68128E-04;
4.35090E-01	2.28214E+00	2.40050E-04;
4.36620E-01	2.27945E+00	2.14730E-04;
4.38160E-01	2.27680E+00	1.91918E-04;
4.39720E-01	2.27418E+00	1.71386E-04;
4.41280E-01	2.27160E+00	1.52920E-04;
4.42860E-01	2.26905E+00	1.36329E-04;
4.44440E-01	2.26653E+00	1.21435E-04;
4.46040E-01	2.26404E+00	1.08076E-04;
4.47650E-01	2.26158E+00	9.61056E-05;
4.49280E-01	2.25916E+00	8.53885E-05;
4.50910E-01	2.25676E+00	7.58019E-05;
4.52550E-01	2.25439E+00	6.72345E-05;
4.54210E-01	2.25205E+00	5.95847E-05;
4.55880E-01	2.24974E+00	5.27603E-05;
4.57560E-01	2.24746E+00	4.66779E-05;
4.59260E-01	2.24520E+00	4.12617E-05;
4.60970E-01	2.24297E+00	3.64428E-05;
4.62690E-01	2.24076E+00	3.21593E-05;
4.64420E-01	2.23858E+00	2.83550E-05;
4.66170E-01	2.23642E+00	2.49794E-05;
4.67920E-01	2.23429E+00	2.19870E-05;
4.69700E-01	2.23218E+00	1.93364E-05;
4.71480E-01	2.23010E+00	1.69907E-05;
4.73280E-01	2.22803E+00	1.49169E-05;
4.75100E-01	2.22599E+00	1.30850E-05;
4.76920E-01	2.22398E+00	1.14682E-05;
4.78760E-01	2.22198E+00	1.00425E-05;
4.80620E-01	2.22000E+00	8.78656E-06;
4.82490E-01	2.21805E+00	7.68106E-06;
4.84380E-01	2.21611E+00	6.70893E-06;
4.86270E-01	2.21420E+00	5.85480E-06;
4.88190E-01	2.21231E+00	5.10502E-06;
4.90120E-01	2.21043E+00	4.44743E-06;
4.92060E-01	2.20858E+00	3.87120E-06;
4.94020E-01	2.20674E+00	3.36672E-06;
4.96000E-01	2.20492E+00	2.92547E-06;
4.97990E-01	2.20312E+00	2.53985E-06;
5.00000E-01	2.20134E+00	2.20317E-06;
5.02020E-01	2.19958E+00	1.90946E-06;
5.04070E-01	2.19783E+00	1.65348E-06;
5.06120E-01	2.19610E+00	1.43057E-06;
5.08200E-01	2.19439E+00	1.23665E-06;
5.10290E-01	2.19270E+00	1.06808E-06;
5.12400E-01	2.19102E+00	9.21700E-07;
5.14520E-01	2.18935E+00	7.94695E-07;
5.16670E-01	2.18771E+00	6.84597E-07;
5.18830E-01	2.18608E+00	5.89240E-07;
5.21010E-01	2.18446E+00	5.06727E-07;
5.23210E-01	2.18286E+00	4.35390E-07;
5.25420E-01	2.18128E+00	3.73770E-07;
5.27660E-01	2.17971E+00	3.20593E-07;
5.29910E-01	2.17815E+00	2.74742E-07;
5.32190E-01	2.17661E+00	2.35245E-07;
5.34480E-01	2.17509E+00	2.01250E-07;
5.36800E-01	2.17358E+00	1.72017E-07;
5.39130E-01	2.17208E+00	1.46903E-07;
5.41480E-01	2.17059E+00	1.25346E-07;
5.43860E-01	2.16913E+00	1.06859E-07;
5.46260E-01	2.16767E+00	9.10199E-08;
5.48670E-01	2.16623E+00	7.74615E-08;
5.51110E-01	2.16480E+00	6.58650E-08;
5.53570E-01	2.16338E+00	5.59559E-08;
5.56050E-01	2.16197E+00	4.74960E-08;
5.58560E-01	2.16058E+00	4.02800E-08;
5.61090E-01	2.15920E+00	3.41302E-08;
5.63640E-01	2.15784E+00	2.88943E-08;
5.66210E-01	2.15648E+00	2.44401E-08;
5.68810E-01	2.15514E+00	2.06545E-08;
5.71430E-01	2.15381E+00	1.74400E-08;
5.74070E-01	2.15249E+00	1.47128E-08;
5.76740E-01	2.15119E+00	1.24012E-08;
5.79440E-01	2.14989E+00	1.04437E-08;
5.82160E-01	2.14861E+00	8.78739E-09;
5.84910E-01	2.14734E+00	7.38737E-09;
5.87680E-01	2.14608E+00	6.20499E-09;
5.90480E-01	2.14483E+00	5.20731E-09;
5.93300E-01	2.14359E+00	4.36613E-09;
5.96150E-01	2.14236E+00	3.65772E-09;
5.99030E-01	2.14115E+00	3.06152E-09;
6.01940E-01	2.13994E+00	2.56025E-09;
6.04880E-01	2.13875E+00	0.00000E+00;
6.07840E-01	2.13756E+00	0.00000E+00;
6.10840E-01	2.13639E+00	0.00000E+00;
6.13860E-01	2.13522E+00	0.00000E+00;
6.16920E-01	2.13407E+00	0.00000E+00;
6.20000E-01	2.13292E+00	0.00000E+00;
6.23120E-01	2.13179E+00	0.00000E+00;
6.26260E-01	2.13066E+00	0.00000E+00;
6.29440E-01	2.12955E+00	0.00000E+00;
6.32650E-01	2.12844E+00	0.00000E+00;
6.35900E-01	2.12735E+00	0.00000E+00;
6.39180E-01	2.12626E+00	0.00000E+00;
6.42490E-01	2.12519E+00	0.00000E+00;
6.45830E-01	2.12412E+00	0.00000E+00;
6.49210E-01	2.12306E+00	0.00000E+00;
6.52630E-01	2.12201E+00	0.00000E+00;
6.56080E-01	2.12097E+00	0.00000E+00;
6.59570E-01	2.11994E+00	0.00000E+00;
6.63100E-01	2.11892E+00	0.00000E+00;
6.66670E-01	2.11791E+00	0.00000E+00;
6.70270E-01	2.11690E+00	0.00000E+00;
6.73910E-01	2.11591E+00	0.00000E+00;
6.77600E-01	2.11492E+00	0.00000E+00;
6.81320E-01	2.11394E+00	0.00000E+00;
6.85080E-01	2.11297E+00	0.00000E+00;
6.88890E-01	2.11201E+00	0.00000E+00;
6.92740E-01	2.11105E+00	0.00000E+00;
6.96630E-01	2.11011E+00	0.00000E+00;
7.00560E-01	2.10917E+00	0.00000E+00;
7.04550E-01	2.10824E+00	0.00000E+00;
7.08570E-01	2.10732E+00	0.00000E+00;
7.12640E-01	2.10641E+00	0.00000E+00;
7.16760E-01	2.10550E+00	0.00000E+00;
7.20930E-01	2.10461E+00	0.00000E+00;
7.25150E-01	2.10372E+00	0.00000E+00;
7.29410E-01	2.10284E+00	0.00000E+00;
7.33730E-01	2.10196E+00	0.00000E+00;
7.38100E-01	2.10110E+00	0.00000E+00;
7.42510E-01	2.10024E+00	0.00000E+00;
7.46990E-01	2.09939E+00	0.00000E+00;
7.51520E-01	2.09854E+00	0.00000E+00;
7.56100E-01	2.09770E+00	0.00000E+00;
7.60740E-01	2.09688E+00	0.00000E+00;
7.65430E-01	2.09605E+00	0.00000E+00;
7.70190E-01	2.09524E+00	0.00000E+00;
7.75000E-01	2.09443E+00	0.00000E+00;
7.79870E-01	2.09363E+00	0.00000E+00;
7.84810E-01	2.09284E+00	0.00000E+00;
7.89810E-01	2.09205E+00	0.00000E+00;
7.94870E-01	2.09127E+00	0.00000E+00;
8.00000E-01	2.09050E+00	0.00000E+00;
8.05190E-01	2.08973E+00	0.00000E+00;
8.10460E-01	2.08898E+00	0.00000E+00;
8.15790E-01	2.08822E+00	0.00000E+00;
8.21190E-01	2.08748E+00	0.00000E+00;
8.26670E-01	2.08674E+00	0.00000E+00;
8.32210E-01	2.08601E+00	0.00000E+00;
8.37840E-01	2.08528E+00	0.00000E+00;
8.43540E-01	2.08457E+00	0.00000E+00;
8.49320E-01	2.08385E+00	0.00000E+00;
8.55170E-01	2.08315E+00	0.00000E+00;
8.61110E-01	2.08245E+00	0.00000E+00;
8.67130E-01	2.08176E+00	0.00000E+00;
8.73240E-01	2.08107E+00	0.00000E+00;
8.79430E-01	2.08039E+00	0.00000E+00;
8.85710E-01	2.07972E+00	0.00000E+00;
8.92090E-01	2.07905E+00	0.00000E+00;
8.98550E-01	2.07839E+00	0.00000E+00;
9.05110E-01	2.07773E+00	0.00000E+00;
9.11760E-01	2.07708E+00	0.00000E+00;
9.18520E-01	2.07644E+00	0.00000E+00;
9.25370E-01	2.07580E+00	0.00000E+00;
9.32330E-01	2.07517E+00	0.00000E+00;
9.39390E-01	2.07455E+00	0.00000E+00;
9.46560E-01	2.07393E+00	0.00000E+00;
9.53850E-01	2.07332E+00	0.00000E+00;
9.61240E-01	2.07271E+00	0.00000E+00;
9.68750E-01	2.07211E+00	0.00000E+00;
9.76380E-01	2.07151E+00	0.00000E+00;
9.84130E-01	2.07092E+00	0.00000E+00;
9.92000E-01	2.07034E+00	0.00000E+00;
1.00000E+00	2.06976E+00	0.00000E+00;
1.00810E+00	2.06919E+00	0.00000E+00;
1.01640E+00	2.06862E+00	0.00000E+00;
1.02480E+00	2.06806E+00	0.00000E+00;
1.03330E+00	2.06751E+00	0.00000E+00;
1.04200E+00	2.06696E+00	0.00000E+00;
1.05080E+00	2.06641E+00	0.00000E+00;
1.05980E+00	2.06588E+00	0.00000E+00;
1.06900E+00	2.06534E+00	0.00000E+00;
1.07830E+00	2.06481E+00	0.00000E+00;
1.08770E+00	2.06429E+00	0.00000E+00;
1.09730E+00	2.06378E+00	0.00000E+00;
1.10710E+00	2.06326E+00	0.00000E+00;
1.11710E+00	2.06276E+00	0.00000E+00;
1.12730E+00	2.06226E+00	0.00000E+00;
1.13760E+00	2.06176E+00	0.00000E+00;
1.14810E+00	2.06127E+00	0.00000E+00;
1.15890E+00	2.06079E+00	0.00000E+00;
1.16980E+00	2.06031E+00	0.00000E+00;
1.18100E+00	2.05984E+00	0.00000E+00;
1.19230E+00	2.05937E+00	0.00000E+00;
1.20390E+00	2.05890E+00	0.00000E+00;
1.21570E+00	2.05844E+00	0.00000E+00;
1.22770E+00	2.05799E+00	0.00000E+00;
1.24000E+00	2.05754E+00	0.00000E+00;
1.25250E+00	2.05710E+00	0.00000E+00;
1.26530E+00	2.05666E+00	0.00000E+00;
1.27840E+00	2.05623E+00	0.00000E+00;
1.29170E+00	2.05580E+00	0.00000E+00;
1.30530E+00	2.05538E+00	0.00000E+00;
1.31910E+00	2.05496E+00	0.00000E+00;
1.33330E+00	2.05455E+00	0.00000E+00;
1.34780E+00	2.05414E+00	0.00000E+00;
1.36260E+00	2.05373E+00	0.00000E+00;
1.37780E+00	2.05334E+00	0.00000E+00;
1.39330E+00	2.05294E+00	0.00000E+00;
1.40910E+00	2.05255E+00	0.00000E+00;
1.42530E+00	2.05217E+00	0.00000E+00;
1.44190E+00	2.05179E+00	0.00000E+00;
1.45880E+00	2.05142E+00	0.00000E+00;
1.47620E+00	2.05105E+00	0.00000E+00;
1.49400E+00	2.05069E+00	0.00000E+00;
1.51220E+00	2.05033E+00	0.00000E+00;
1.53090E+00	2.04997E+00	0.00000E+00;
1.55000E+00	2.04962E+00	0.00000E+00;

15.5000E+00	2.04962E+00	0.00000E+00;
}


eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
  * mt = a[Eg(0)/Eg(T)] 
  * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.540e19 ((me/m0)*(T/300))^3/2 
	a	= 0.0000e+00	# [1]
	ml	= 0.0000e+00	# [1]
	mm	= 0.42	# [1]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * mh =  m0*{[(a+bT+cT^2+dT^3+eT^4)/(1+fT+gT^2+hT^3+iT^4)]^(2/3) + mm}
  * Nv(T) = 2(2pi*kB/h_Planck^2*mh*T)^3/2 = 2.540e19 ((mh/m0)*(T/300))^3/2 
	a	= 0	# [1]
	b	= 0	# [K^-1]
	c	= 0	# [K^-2]
	d	= 0	# [K^-3]
	e	= 0	# [K^-4]
	f	= 0	# [K^-1]
	g	= 0	# [K^-2]
	h	= 0	# [K^-3]
	i	= 0	# [K^-4]
	mm	= 1	# [1]
}

}


Material = "MgF"
{

**************************************************
* Material parameter file for MgF
* Temperature                 : 300 [K]
* Substrate                   : --
* conduction band offset ratio: -- [1]
* Doping concentration        : -- [cm-3]
* Mole fraction x             : -- [1]
* Mole fraction y             : -- [1]
*************************************************


*************************************************
* Material Parameter sections
*************************************************


* Static dielectric permittivity

Epsilon 
{ 
  * Ratio of the permittivities of material and vacuum
  * epsilon() = epsilon
  * epsilon(300.0) = 6.000 
        epsilon = 6.0000     # [1]
}



TableODB {
* Each entry of the table consists of three values:
* complex refractive index n + i*k (unitless)
* refractive index = n,  absorption coefficient = 4*pi*k/wavelength
* WAVELEN[um]	n	k
* Reference: M. Breselge, Simulation von III-V Kaskadensolarzellen und Charakterisierung optischer Materialparameter,
* Diplomarbeit, Albert-Ludwigs-Universität und Fraunhofer ISE Freiburg (2003)
2.48000E-01	1.44200E+00	1.39110E-02;
2.48500E-01	1.44177E+00	1.37972E-02;
2.49000E-01	1.44154E+00	1.36844E-02;
2.49500E-01	1.44130E+00	1.35725E-02;
2.50000E-01	1.44107E+00	1.34615E-02;
2.50510E-01	1.44085E+00	1.33515E-02;
2.51010E-01	1.44062E+00	1.32423E-02;
2.51520E-01	1.44039E+00	1.31340E-02;
2.52030E-01	1.44016E+00	1.30266E-02;
2.52550E-01	1.43993E+00	1.29201E-02;
2.53060E-01	1.43970E+00	1.28144E-02;
2.53580E-01	1.43948E+00	1.27096E-02;
2.54100E-01	1.43925E+00	1.26057E-02;
2.54620E-01	1.43903E+00	1.25026E-02;
2.55140E-01	1.43880E+00	1.24004E-02;
2.55670E-01	1.43858E+00	1.22990E-02;
2.56200E-01	1.43835E+00	1.21984E-02;
2.56730E-01	1.43813E+00	1.20986E-02;
2.57260E-01	1.43790E+00	1.19997E-02;
2.57800E-01	1.43768E+00	1.19016E-02;
2.58330E-01	1.43746E+00	1.18043E-02;
2.58870E-01	1.43724E+00	1.17077E-02;
2.59410E-01	1.43701E+00	1.16120E-02;
2.59960E-01	1.43679E+00	1.15170E-02;
2.60500E-01	1.43657E+00	1.14229E-02;
2.61050E-01	1.43635E+00	1.13294E-02;
2.61600E-01	1.43613E+00	1.12368E-02;
2.62160E-01	1.43591E+00	1.11449E-02;
2.62710E-01	1.43569E+00	1.10538E-02;
2.63270E-01	1.43548E+00	1.09634E-02;
2.63830E-01	1.43526E+00	1.08737E-02;
2.64390E-01	1.43504E+00	1.07848E-02;
2.64960E-01	1.43482E+00	1.06966E-02;
2.65520E-01	1.43461E+00	1.06092E-02;
2.66090E-01	1.43439E+00	1.05224E-02;
2.66670E-01	1.43418E+00	1.04364E-02;
2.67240E-01	1.43396E+00	1.03510E-02;
2.67820E-01	1.43375E+00	1.02664E-02;
2.68400E-01	1.43353E+00	1.01824E-02;
2.68980E-01	1.43332E+00	1.00992E-02;
2.69570E-01	1.43310E+00	1.00166E-02;
2.70150E-01	1.43289E+00	9.93465E-03;
2.70740E-01	1.43268E+00	9.85341E-03;
2.71330E-01	1.43247E+00	9.77284E-03;
2.71930E-01	1.43226E+00	9.69292E-03;
2.72530E-01	1.43205E+00	9.61366E-03;
2.73130E-01	1.43183E+00	9.53504E-03;
2.73730E-01	1.43162E+00	9.45707E-03;
2.74340E-01	1.43141E+00	9.37974E-03;
2.74940E-01	1.43121E+00	9.30304E-03;
2.75560E-01	1.43100E+00	9.22696E-03;
2.76170E-01	1.43079E+00	9.15151E-03;
2.76790E-01	1.43058E+00	9.07667E-03;
2.77400E-01	1.43037E+00	9.00245E-03;
2.78030E-01	1.43017E+00	8.92884E-03;
2.78650E-01	1.42996E+00	8.85582E-03;
2.79280E-01	1.42975E+00	8.78340E-03;
2.79910E-01	1.42955E+00	8.71158E-03;
2.80540E-01	1.42934E+00	8.64034E-03;
2.81180E-01	1.42914E+00	8.56968E-03;
2.81820E-01	1.42894E+00	8.49961E-03;
2.82460E-01	1.42873E+00	8.43010E-03;
2.83110E-01	1.42853E+00	8.36117E-03;
2.83750E-01	1.42833E+00	8.29279E-03;
2.84400E-01	1.42812E+00	8.22498E-03;
2.85060E-01	1.42792E+00	8.15772E-03;
2.85710E-01	1.42772E+00	8.09101E-03;
2.86370E-01	1.42752E+00	8.02485E-03;
2.87040E-01	1.42732E+00	7.95923E-03;
2.87700E-01	1.42712E+00	7.89414E-03;
2.88370E-01	1.42692E+00	7.82959E-03;
2.89040E-01	1.42672E+00	7.76556E-03;
2.89720E-01	1.42652E+00	7.70206E-03;
2.90400E-01	1.42633E+00	7.63908E-03;
2.91080E-01	1.42613E+00	7.57661E-03;
2.91760E-01	1.42593E+00	7.51465E-03;
2.92450E-01	1.42573E+00	7.45320E-03;
2.93140E-01	1.42554E+00	7.39226E-03;
2.93840E-01	1.42534E+00	7.33181E-03;
2.94540E-01	1.42515E+00	7.27185E-03;
2.95240E-01	1.42495E+00	7.21239E-03;
2.95940E-01	1.42476E+00	7.15341E-03;
2.96650E-01	1.42456E+00	7.09491E-03;
2.97360E-01	1.42437E+00	7.03689E-03;
2.98080E-01	1.42418E+00	6.97935E-03;
2.98800E-01	1.42399E+00	6.92228E-03;
2.99520E-01	1.42379E+00	6.86567E-03;
3.00240E-01	1.42360E+00	6.80953E-03;
3.00970E-01	1.42341E+00	6.75384E-03;
3.01700E-01	1.42322E+00	6.69862E-03;
3.02440E-01	1.42303E+00	6.64384E-03;
3.03180E-01	1.42284E+00	6.58951E-03;
3.03920E-01	1.42265E+00	6.53563E-03;
3.04670E-01	1.42246E+00	6.48218E-03;
3.05420E-01	1.42227E+00	6.42917E-03;
3.06170E-01	1.42209E+00	6.37660E-03;
3.06930E-01	1.42190E+00	6.32446E-03;
3.07690E-01	1.42171E+00	6.27274E-03;
3.08460E-01	1.42153E+00	6.22144E-03;
3.09230E-01	1.42134E+00	6.17057E-03;
3.10000E-01	1.42115E+00	6.12011E-03;
3.10780E-01	1.42097E+00	6.07006E-03;
3.11560E-01	1.42078E+00	6.02043E-03;
3.12340E-01	1.42060E+00	5.97119E-03;
3.13130E-01	1.42042E+00	5.92237E-03;
3.13920E-01	1.42023E+00	5.87394E-03;
3.14720E-01	1.42005E+00	5.82590E-03;
3.15520E-01	1.41987E+00	5.77826E-03;
3.16330E-01	1.41969E+00	5.73101E-03;
3.17140E-01	1.41951E+00	5.68415E-03;
3.17950E-01	1.41933E+00	5.63767E-03;
3.18770E-01	1.41914E+00	5.59156E-03;
3.19590E-01	1.41896E+00	5.54584E-03;
3.20410E-01	1.41879E+00	5.50049E-03;
3.21240E-01	1.41861E+00	5.45551E-03;
3.22080E-01	1.41843E+00	5.41090E-03;
3.22920E-01	1.41825E+00	5.36665E-03;
3.23760E-01	1.41807E+00	5.32277E-03;
3.24610E-01	1.41789E+00	5.27924E-03;
3.25460E-01	1.41772E+00	5.23607E-03;
3.26320E-01	1.41754E+00	5.19325E-03;
3.27180E-01	1.41737E+00	5.15078E-03;
3.28040E-01	1.41719E+00	5.10866E-03;
3.28910E-01	1.41702E+00	5.06689E-03;
3.29790E-01	1.41684E+00	5.02546E-03;
3.30670E-01	1.41667E+00	4.98436E-03;
3.31550E-01	1.41649E+00	4.94360E-03;
3.32440E-01	1.41632E+00	4.90318E-03;
3.33330E-01	1.41615E+00	4.86308E-03;
3.34230E-01	1.41598E+00	4.82331E-03;
3.35140E-01	1.41580E+00	4.78387E-03;
3.36040E-01	1.41563E+00	4.74475E-03;
3.36960E-01	1.41546E+00	4.70595E-03;
3.37870E-01	1.41529E+00	4.66747E-03;
3.38800E-01	1.41512E+00	4.62930E-03;
3.39730E-01	1.41495E+00	4.59145E-03;
3.40660E-01	1.41479E+00	4.55390E-03;
3.41600E-01	1.41462E+00	4.51666E-03;
3.42540E-01	1.41445E+00	4.47973E-03;
3.43490E-01	1.41428E+00	4.44309E-03;
3.44440E-01	1.41411E+00	4.40676E-03;
3.45400E-01	1.41395E+00	4.37073E-03;
3.46370E-01	1.41378E+00	4.33498E-03;
3.47340E-01	1.41362E+00	4.29954E-03;
3.48310E-01	1.41345E+00	4.26438E-03;
3.49300E-01	1.41329E+00	4.22951E-03;
3.50280E-01	1.41312E+00	4.19492E-03;
3.51270E-01	1.41296E+00	4.16062E-03;
3.52270E-01	1.41280E+00	4.12659E-03;
3.53280E-01	1.41263E+00	4.09285E-03;
3.54290E-01	1.41247E+00	4.05938E-03;
3.55300E-01	1.41231E+00	4.02618E-03;
3.56320E-01	1.41215E+00	3.99326E-03;
3.57350E-01	1.41199E+00	3.96061E-03;
3.58380E-01	1.41183E+00	3.92822E-03;
3.59420E-01	1.41167E+00	3.89610E-03;
3.60470E-01	1.41151E+00	3.86424E-03;
3.61520E-01	1.41135E+00	3.83264E-03;
3.62570E-01	1.41119E+00	3.80130E-03;
3.63640E-01	1.41103E+00	3.77021E-03;
3.64710E-01	1.41087E+00	3.73938E-03;
3.65780E-01	1.41071E+00	3.70880E-03;
3.66860E-01	1.41056E+00	3.67847E-03;
3.67950E-01	1.41040E+00	3.64839E-03;
3.69050E-01	1.41025E+00	3.61856E-03;
3.70150E-01	1.41009E+00	3.58897E-03;
3.71260E-01	1.40994E+00	3.55962E-03;
3.72370E-01	1.40978E+00	3.53051E-03;
3.73490E-01	1.40963E+00	3.50164E-03;
3.74620E-01	1.40947E+00	3.47301E-03;
3.75760E-01	1.40932E+00	3.44461E-03;
3.76900E-01	1.40917E+00	3.41644E-03;
3.78050E-01	1.40902E+00	3.38850E-03;
3.79200E-01	1.40886E+00	3.36079E-03;
3.80370E-01	1.40871E+00	3.33331E-03;
3.81540E-01	1.40856E+00	3.30605E-03;
3.82720E-01	1.40841E+00	3.27902E-03;
3.83900E-01	1.40826E+00	3.25220E-03;
3.85090E-01	1.40811E+00	3.22561E-03;
3.86290E-01	1.40796E+00	3.19923E-03;
3.87500E-01	1.40782E+00	3.17307E-03;
3.88710E-01	1.40767E+00	3.14712E-03;
3.89940E-01	1.40752E+00	3.12139E-03;
3.91170E-01	1.40737E+00	3.09586E-03;
3.92410E-01	1.40723E+00	3.07055E-03;
3.93650E-01	1.40708E+00	3.04544E-03;
3.94900E-01	1.40693E+00	3.02054E-03;
3.96170E-01	1.40679E+00	2.99584E-03;
3.97440E-01	1.40664E+00	2.97134E-03;
3.98710E-01	1.40650E+00	2.94704E-03;
4.00000E-01	1.40636E+00	2.92294E-03;
4.01290E-01	1.40621E+00	2.89904E-03;
4.02600E-01	1.40607E+00	2.87533E-03;
4.03910E-01	1.40593E+00	2.85182E-03;
4.05230E-01	1.40579E+00	2.82850E-03;
4.06560E-01	1.40564E+00	2.80537E-03;
4.07890E-01	1.40550E+00	2.78243E-03;
4.09240E-01	1.40536E+00	2.75968E-03;
4.10600E-01	1.40522E+00	2.73711E-03;
4.11960E-01	1.40508E+00	2.71473E-03;
4.13330E-01	1.40494E+00	2.69253E-03;
4.14720E-01	1.40480E+00	2.67051E-03;
4.16110E-01	1.40467E+00	2.64867E-03;
4.17510E-01	1.40453E+00	2.62701E-03;
4.18920E-01	1.40439E+00	2.60553E-03;
4.20340E-01	1.40425E+00	2.58422E-03;
4.21770E-01	1.40412E+00	2.56309E-03;
4.23210E-01	1.40398E+00	2.54213E-03;
4.24660E-01	1.40385E+00	2.52134E-03;
4.26120E-01	1.40371E+00	2.50073E-03;
4.27590E-01	1.40358E+00	2.48028E-03;
4.29070E-01	1.40344E+00	2.45999E-03;
4.30560E-01	1.40331E+00	2.43988E-03;
4.32060E-01	1.40318E+00	2.41993E-03;
4.33570E-01	1.40304E+00	2.40014E-03;
4.35090E-01	1.40291E+00	2.38051E-03;
4.36620E-01	1.40278E+00	2.36104E-03;
4.38160E-01	1.40265E+00	2.34174E-03;
4.39720E-01	1.40252E+00	2.32259E-03;
4.41280E-01	1.40239E+00	2.30360E-03;
4.42860E-01	1.40226E+00	2.28476E-03;
4.44440E-01	1.40213E+00	2.26607E-03;
4.46040E-01	1.40200E+00	2.24754E-03;
4.47650E-01	1.40187E+00	2.22917E-03;
4.49280E-01	1.40174E+00	2.21094E-03;
4.50910E-01	1.40161E+00	2.19286E-03;
4.52550E-01	1.40149E+00	2.17492E-03;
4.54210E-01	1.40136E+00	2.15714E-03;
4.55880E-01	1.40123E+00	2.13950E-03;
4.57560E-01	1.40111E+00	2.12200E-03;
4.59260E-01	1.40098E+00	2.10465E-03;
4.60970E-01	1.40086E+00	2.08744E-03;
4.62690E-01	1.40073E+00	2.07037E-03;
4.64420E-01	1.40061E+00	2.05344E-03;
4.66170E-01	1.40049E+00	2.03665E-03;
4.67920E-01	1.40036E+00	2.02000E-03;
4.69700E-01	1.40024E+00	2.00348E-03;
4.71480E-01	1.40012E+00	1.98709E-03;
4.73280E-01	1.40000E+00	1.97084E-03;
4.75100E-01	1.39988E+00	1.95473E-03;
4.76920E-01	1.39976E+00	1.93874E-03;
4.78760E-01	1.39964E+00	1.92289E-03;
4.80620E-01	1.39952E+00	1.90717E-03;
4.82490E-01	1.39940E+00	1.89157E-03;
4.84380E-01	1.39928E+00	1.87610E-03;
4.86270E-01	1.39916E+00	1.86076E-03;
4.88190E-01	1.39904E+00	1.84554E-03;
4.90120E-01	1.39892E+00	1.83045E-03;
4.92060E-01	1.39881E+00	1.81548E-03;
4.94020E-01	1.39869E+00	1.80064E-03;
4.96000E-01	1.39857E+00	1.78591E-03;
4.97990E-01	1.39846E+00	1.77131E-03;
5.00000E-01	1.39834E+00	1.75682E-03;
5.02020E-01	1.39823E+00	1.74246E-03;
5.04070E-01	1.39812E+00	1.72821E-03;
5.06120E-01	1.39800E+00	1.71408E-03;
5.08200E-01	1.39789E+00	1.70006E-03;
5.10290E-01	1.39778E+00	1.68616E-03;
5.12400E-01	1.39766E+00	1.67237E-03;
5.14520E-01	1.39755E+00	1.65870E-03;
5.16670E-01	1.39744E+00	1.64513E-03;
5.18830E-01	1.39733E+00	1.63168E-03;
5.21010E-01	1.39722E+00	1.61834E-03;
5.23210E-01	1.39711E+00	1.60510E-03;
5.25420E-01	1.39700E+00	1.59198E-03;
5.27660E-01	1.39689E+00	1.57896E-03;
5.29910E-01	1.39678E+00	1.56605E-03;
5.32190E-01	1.39667E+00	1.55324E-03;
5.34480E-01	1.39657E+00	1.54054E-03;
5.36800E-01	1.39646E+00	1.52794E-03;
5.39130E-01	1.39635E+00	1.51545E-03;
5.41480E-01	1.39625E+00	1.50305E-03;
5.43860E-01	1.39614E+00	1.49076E-03;
5.46260E-01	1.39603E+00	1.47857E-03;
5.48670E-01	1.39593E+00	1.46648E-03;
5.51110E-01	1.39582E+00	1.45449E-03;
5.53570E-01	1.39572E+00	1.44260E-03;
5.56050E-01	1.39562E+00	1.43080E-03;
5.58560E-01	1.39551E+00	1.41910E-03;
5.61090E-01	1.39541E+00	1.40749E-03;
5.63640E-01	1.39531E+00	1.39598E-03;
5.66210E-01	1.39521E+00	1.38457E-03;
5.68810E-01	1.39511E+00	1.37325E-03;
5.71430E-01	1.39501E+00	1.36202E-03;
5.74070E-01	1.39491E+00	1.35088E-03;
5.76740E-01	1.39481E+00	1.33983E-03;
5.79440E-01	1.39471E+00	1.32888E-03;
5.82160E-01	1.39461E+00	1.31801E-03;
5.84910E-01	1.39451E+00	1.30723E-03;
5.87680E-01	1.39441E+00	1.29654E-03;
5.90480E-01	1.39431E+00	1.28594E-03;
5.93300E-01	1.39422E+00	1.27542E-03;
5.96150E-01	1.39412E+00	1.26500E-03;
5.99030E-01	1.39402E+00	1.25465E-03;
6.01940E-01	1.39393E+00	1.24439E-03;
6.04880E-01	1.39383E+00	1.23422E-03;
6.07840E-01	1.39374E+00	1.22412E-03;
6.10840E-01	1.39364E+00	1.21411E-03;
6.13860E-01	1.39355E+00	1.20418E-03;
6.16920E-01	1.39346E+00	1.19434E-03;
6.20000E-01	1.39336E+00	1.18457E-03;
6.23120E-01	1.39327E+00	1.17488E-03;
6.26260E-01	1.39318E+00	1.16528E-03;
6.29440E-01	1.39309E+00	1.15575E-03;
6.32650E-01	1.39300E+00	1.14630E-03;
6.35900E-01	1.39291E+00	1.13692E-03;
6.39180E-01	1.39282E+00	1.12763E-03;
6.42490E-01	1.39273E+00	1.11840E-03;
6.45830E-01	1.39264E+00	1.10926E-03;
6.49210E-01	1.39255E+00	1.10019E-03;
6.52630E-01	1.39246E+00	1.09119E-03;
6.56080E-01	1.39237E+00	1.08227E-03;
6.59570E-01	1.39229E+00	1.07342E-03;
6.63100E-01	1.39220E+00	1.06464E-03;
6.66670E-01	1.39211E+00	1.05593E-03;
6.70270E-01	1.39203E+00	1.04730E-03;
6.73910E-01	1.39194E+00	1.03874E-03;
6.77600E-01	1.39186E+00	1.03024E-03;
6.81320E-01	1.39177E+00	1.02182E-03;
6.85080E-01	1.39169E+00	1.01346E-03;
6.88890E-01	1.39160E+00	1.00517E-03;
6.92740E-01	1.39152E+00	9.96954E-04;
6.96630E-01	1.39144E+00	9.88801E-04;
7.00560E-01	1.39136E+00	9.80715E-04;
7.04550E-01	1.39127E+00	9.72696E-04;
7.08570E-01	1.39119E+00	9.64742E-04;
7.12640E-01	1.39111E+00	9.56852E-04;
7.16760E-01	1.39103E+00	9.49028E-04;
7.20930E-01	1.39095E+00	9.41267E-04;
7.25150E-01	1.39087E+00	9.33570E-04;
7.29410E-01	1.39079E+00	9.25936E-04;
7.33730E-01	1.39071E+00	9.18364E-04;
7.38100E-01	1.39064E+00	9.10855E-04;
7.42510E-01	1.39056E+00	9.03406E-04;
7.46990E-01	1.39048E+00	8.96019E-04;
7.51520E-01	1.39041E+00	8.88692E-04;
7.56100E-01	1.39033E+00	8.81424E-04;
7.60740E-01	1.39025E+00	8.74217E-04;
7.65430E-01	1.39018E+00	8.67068E-04;
7.70190E-01	1.39010E+00	8.59978E-04;
7.75000E-01	1.39003E+00	8.52945E-04;
7.79870E-01	1.38996E+00	8.45970E-04;
7.84810E-01	1.38988E+00	8.39052E-04;
7.89810E-01	1.38981E+00	8.32191E-04;
7.94870E-01	1.38974E+00	8.25386E-04;
8.00000E-01	1.38966E+00	8.18637E-04;
8.05190E-01	1.38959E+00	8.11942E-04;
8.10460E-01	1.38952E+00	8.05303E-04;
8.15790E-01	1.38945E+00	7.98717E-04;
8.21190E-01	1.38938E+00	7.92186E-04;
8.26670E-01	1.38931E+00	7.85708E-04;
8.32210E-01	1.38924E+00	7.79283E-04;
8.37840E-01	1.38917E+00	7.72911E-04;
8.43540E-01	1.38910E+00	7.66590E-04;
8.49320E-01	1.38904E+00	7.60321E-04;
8.55170E-01	1.38897E+00	7.54104E-04;
8.61110E-01	1.38890E+00	7.47937E-04;
8.67130E-01	1.38884E+00	7.41821E-04;
8.73240E-01	1.38877E+00	7.35755E-04;
8.79430E-01	1.38870E+00	7.29738E-04;
8.85710E-01	1.38864E+00	7.23771E-04;
8.92090E-01	1.38858E+00	7.17853E-04;
8.98550E-01	1.38851E+00	7.11982E-04;
9.05110E-01	1.38845E+00	7.06160E-04;
9.11760E-01	1.38838E+00	7.00386E-04;
9.18520E-01	1.38832E+00	6.94658E-04;
9.25370E-01	1.38826E+00	6.88978E-04;
9.32330E-01	1.38820E+00	6.83344E-04;
9.39390E-01	1.38814E+00	6.77756E-04;
9.46560E-01	1.38807E+00	6.72214E-04;
9.53850E-01	1.38801E+00	6.66717E-04;
9.61240E-01	1.38795E+00	6.61265E-04;
9.68750E-01	1.38789E+00	6.55857E-04;
9.76380E-01	1.38784E+00	6.50494E-04;
9.84130E-01	1.38778E+00	6.45175E-04;
9.92000E-01	1.38772E+00	6.39899E-04;
1.00000E+00	1.38766E+00	6.34666E-04;
1.00810E+00	1.38760E+00	6.29476E-04;
1.01640E+00	1.38755E+00	6.24329E-04;
1.02480E+00	1.38749E+00	6.19224E-04;
1.03330E+00	1.38744E+00	6.14160E-04;
1.04200E+00	1.38738E+00	6.09138E-04;
1.05080E+00	1.38733E+00	6.04156E-04;
1.05980E+00	1.38727E+00	5.99216E-04;
1.06900E+00	1.38722E+00	5.94316E-04;
1.07830E+00	1.38716E+00	5.89456E-04;
1.08770E+00	1.38711E+00	5.84636E-04;
1.09730E+00	1.38706E+00	5.79855E-04;
1.10710E+00	1.38701E+00	5.75113E-04;
1.11710E+00	1.38695E+00	5.70411E-04;
1.12730E+00	1.38690E+00	5.65746E-04;
1.13760E+00	1.38685E+00	5.61120E-04;
1.14810E+00	1.38680E+00	5.56531E-04;
1.15890E+00	1.38675E+00	5.51980E-04;
1.16980E+00	1.38670E+00	5.47466E-04;
1.18100E+00	1.38665E+00	5.42990E-04;
1.19230E+00	1.38661E+00	5.38549E-04;
1.20390E+00	1.38656E+00	5.34145E-04;
1.21570E+00	1.38651E+00	5.29778E-04;
1.22770E+00	1.38646E+00	5.25445E-04;
1.24000E+00	1.38642E+00	5.21149E-04;
1.25250E+00	1.38637E+00	5.16887E-04;
1.26530E+00	1.38632E+00	5.12660E-04;
1.27840E+00	1.38628E+00	5.08468E-04;
1.29170E+00	1.38623E+00	5.04310E-04;
1.30530E+00	1.38619E+00	5.00186E-04;
1.31910E+00	1.38615E+00	4.96096E-04;
1.33330E+00	1.38610E+00	4.92039E-04;
1.34780E+00	1.38606E+00	4.88016E-04;
1.36260E+00	1.38602E+00	4.84025E-04;
1.37780E+00	1.38598E+00	4.80067E-04;
1.39330E+00	1.38593E+00	4.76141E-04;
1.40910E+00	1.38589E+00	4.72248E-04;
1.42530E+00	1.38585E+00	4.68386E-04;
1.44190E+00	1.38581E+00	4.64556E-04;
1.45880E+00	1.38577E+00	4.60757E-04;
1.47620E+00	1.38573E+00	4.56989E-04;
1.49400E+00	1.38570E+00	4.53252E-04;
1.51220E+00	1.38566E+00	4.49546E-04;
1.53090E+00	1.38562E+00	4.45869E-04;
1.55000E+00	1.38558E+00	4.42223E-04;
2.00000E+00	1.38558E+00	4.42223E-04;

10.00000E+00	1.38558E+00	4.42223E-04;
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
  * mt = a[Eg(0)/Eg(T)] 
  * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.540e19 ((me/m0)*(T/300))^3/2 
	a	= 0.0000e+00	# [1]
	ml	= 0.0000e+00	# [1]
	mm	= 0.42	# [1]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * mh =  m0*{[(a+bT+cT^2+dT^3+eT^4)/(1+fT+gT^2+hT^3+iT^4)]^(2/3) + mm}
  * Nv(T) = 2(2pi*kB/h_Planck^2*mh*T)^3/2 = 2.540e19 ((mh/m0)*(T/300))^3/2 
	a	= 0	# [1]
	b	= 0	# [K^-1]
	c	= 0	# [K^-2]
	d	= 0	# [K^-3]
	e	= 0	# [K^-4]
	f	= 0	# [K^-1]
	g	= 0	# [K^-2]
	h	= 0	# [K^-3]
	i	= 0	# [K^-4]
	mm	= 1	# [1]
}

}

Material = "AlInP"
{

**************************************************
* Material parameter file for AlInP
* Temperature                 : 300 [K]
* Substrate                   : GaAs
* conduction band offset ratio: -- [1]
* Doping concentration        : -5e18 [cm-3]
* Mole fraction x             : 0.5 [1]
* Mole fraction y             : -- [1]
*************************************************


*************************************************
* Material Parameter sections
*************************************************


* Static dielectric permittivity

Epsilon 
{ 
  * Ratio of the permittivities of material and vacuum
  * epsilon() = epsilon
  * epsilon(300.0) = 11.355 
        epsilon = 11.3550     # [1]
}


* Band gap, electron affinity

Bandgap
{
  * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
  * Chi(300.0) = 3.62657 eV
  * Eg(300.0) = 2.33291 eV
        Chi0	= 3.6145        # [eV]
	    Bgn2Chi = 0.5           # [1]
        Eg0     = 2.3570        # [eV]
        alpha   = 1.5900e-04    # [eV K^(-1)]
        beta	= 2.9400e+02    # [K]
        Tpar	= 0.0000e+00    # [K]
 }


* electron DOS mass

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
  * Formula1:
  * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
  * mt = a[Eg(0)/Eg(T)] 
  * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.540e19 ((me/m0)*(T/300))^3/2 
  * me/m0(300.0) = 0.2300 
  * Nc(300.0) = 2.7680e+18 cm^(-3)
 	    Formula   = 1             # [1]
        a         = 0.0000e+00    # [1]
        ml        = 0.0000e+00    # [1]
        mm        = 2.3000e-01    # [1]
}


* hole DOS mass

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
  * Formula1:
  * mh =  m0*{[(a+bT+cT^2+dT^3+eT^4)/(1+fT+gT^2+hT^3+iT^4)]^(2/3) + mm}
  * Nv(T) = 2(2pi*kB/h_Planck^2*mh*T)^3/2 = 2.540e19 ((mh/m0)*(T/300))^3/2 
  * mh/m0(300.0) = 0.3600 
  * Nv(300.0) = 5.4203e+18 cm^(-3)
	    Formula   = 1             # [1]
        a         = 0.0000e+00    # [1]
        b         = 0.0000e+00    # [1]
        c         = 0.0000e+00    # [1]
        d         = 0.0000e+00    # [1]
        e         = 0.0000e+00    # [1]
        f         = 0.0000e+00    # [1]
        g         = 0.0000e+00    # [1]
        h         = 0.0000e+00    # [1]
        i         = 0.0000e+00    # [1]
        mm        = 3.6000e-01    # [1]
        Nv300     = 5.4203e+18    # [cm-3]
}


* Low field Mobility models: Constant mobility  and Doping dependent Mobility

ConstantMobility:
{ 
  * mu_const = mumax (T/T0)^(-Exponent)
  * mu_const_n(300.0) = 1.5000e+02 cm^2/(Vs)
  * mu_const_p(300.0) = 1.8000e+02 cm^2/(Vs)
	mumax	        =  1.5000e+02 , 1.8000e+02     # [cm^2/(Vs)]
        Exponent	=  1.00       , 1.00           # [1]
	mutunnel	=  0.05       , 0.05           # [cm^2/(Vs)]
}


* Masetti Doping Dependent Mobility model

DopingDependence: 
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
 	formula	= 1          , 1              # [1]
  * If formula=1, model suggested by Masetti et al. is used:
  * mu_dop = mumin1 exp(-Pc/N) + (mu_const - mumin2)/(1+(N/Cr)^alpha)
  *                             - mu1/(1+(Cs/N)^beta)
  * with mu_const from ConstantMobility
  * mu_const_n(300.0) = 1.5000e+02 cm^2/(Vs)
  * mu_dop_n(300.0,-5.000e+18) = 4.0226e+01 cm^2/(Vs)
  * mu_const_p(300.0) = 1.8000e+02 cm^2/(Vs)
  * mu_dop_p(300.0,-5.000e+18) = 4.3240e+01 cm^2/(Vs)
    	mumin1	= 0.0000e+00 , 0.0000e+00     # [cm^2/(Vs)]
    	mumin2	= 0.0000e+00 , 0.0000e+00     # [cm^2/(Vs)]
    	mu1	= 0.0000e+00 , 0.0000e+00     # [cm^2/(Vs)]
    	Pc	= 0.0000e+00 , 0.0000e+00     # [cm^3]
    	Cr	= 5.0000e+17 , 2.7500e+17     # [cm^3]
    	Cs	= 0.0000e+00 , 0.0000e+00     # [cm^3]
    	alpha	= 4.3600e-01 , 3.9700e-01     # [1]
    	beta	= 0.0000e+00 , 0.0000e+00     # [1]
}


* Absorption model

TableODB
{ 
  * Each entry of the table consists of three values:
  * complex refractive index n + i*k (unitless) 
  * refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *  WAVELEN(um)        n	       k
  0.206666667	1.320475752	2.539712001;
0.20735786	1.327341394	2.544006929;
0.208053691	1.333746056	2.549409117;
0.208754209	1.339794165	2.555887693;
0.209459459	1.345565773	2.563470579;
0.210169492	1.351159215	2.57216176;
0.210884354	1.35666411	2.581960707;
0.211604096	1.362156863	2.592884046;
0.212328767	1.36776449	2.604955692;
0.213058419	1.373586041	2.618156904;
0.213793103	1.379768504	2.632501556;
0.214532872	1.386442985	2.647973699;
0.215277778	1.393768101	2.6644898;
0.216027875	1.40187754	2.681968236;
0.216783217	1.410905774	2.700292706;
0.21754386	1.420960719	2.719287263;
0.218309859	1.43208535	2.738772698;
0.219081272	1.444291491	2.758530077;
0.219858156	1.457541709	2.778368437;
0.220640569	1.471617531	2.798087059;
0.221428571	1.486415583	2.81759197;
0.222222222	1.501702883	2.836829184;
0.223021583	1.51721225	2.855799738;
0.223826715	1.532731212	2.874632786;
0.224637681	1.548053142	2.893507805;
0.225454545	1.563084353	2.912699317;
0.226277372	1.577798006	2.93250083;
0.227106227	1.592175719	2.9531796;
0.227941176	1.606407625	2.975084862;
0.228782288	1.620657727	2.998450885;
0.22962963	1.635210188	3.023468878;
0.230483271	1.650352901	3.050304022;
0.231343284	1.666334798	3.079006212;
0.232209738	1.683483688	3.109680605;
0.233082707	1.702059068	3.142339544;
0.233962264	1.722294896	3.177030394;
0.234848485	1.744499579	3.213842935;
0.235741445	1.76904918	3.252849923;
0.236641221	1.796399291	3.294170091;
0.237547893	1.827059228	3.337829379;
0.238461538	1.861875241	3.383847326;
0.239382239	1.901665914	3.431895642;
0.240310078	1.947293992	3.481516259;
0.241245136	1.99980538	3.531859932;
0.2421875	2.060008951	3.58170595;
0.243137255	2.128377645	3.629506939;
0.244094488	2.204929948	3.673404219;
0.245059289	2.289160686	3.711507743;
0.246031746	2.380000699	3.742044153;
0.247011952	2.475584736	3.763500092;
0.248	2.573896909	3.775161965;
0.248995984	2.672308951	3.776837407;
0.25	2.768606674	3.769501632;
0.251012146	2.860966819	3.754878308;
0.25203252	2.948229261	3.735250202;
0.253061224	3.030587639	3.713290744;
0.254098361	3.109562087	3.691394245;
0.255144033	3.187737804	3.670949549;
0.256198347	3.268171403	3.651789658;
0.257261411	3.35389994	3.632114021;
0.258333333	3.446763922	3.608547014;
0.259414226	3.546880702	3.576862128;
0.260504202	3.652303702	3.532895308;
0.261603376	3.759240036	3.473425273;
0.262711864	3.862918181	3.397160813;
0.263829787	3.958014811	3.304573647;
0.264957265	4.039940644	3.198187933;
0.266094421	4.105383194	3.081958144;
0.267241379	4.15265512	2.960518524;
0.268398268	4.181668216	2.838563389;
0.269565217	4.193816995	2.720141136;
0.270742358	4.191271647	2.608380374;
0.271929825	4.176835669	2.505484945;
0.273127753	4.15340222	2.412614074;
0.274336283	4.123505865	2.329988197;
0.275555556	4.089410739	2.257506867;
0.276785714	4.052936409	2.194430488;
0.278026906	4.015529588	2.140116852;
0.279279279	3.978255249	2.093693737;
0.280542986	3.941853644	2.05428616;
0.281818182	3.906857788	2.021196461;
0.283105023	3.873612544	1.993580255;
0.28440367	3.842470064	1.971075667;
0.285714286	3.813611515	1.953176693;
0.287037037	3.78720149	1.939517547;
0.288372093	3.763545942	1.929877118;
0.289719626	3.742990405	1.92398693;
0.291079812	3.725932997	1.921561686;
0.29245283	3.713012867	1.922341815;
0.293838863	3.705006974	1.925774792;
0.295238095	3.702453745	1.930835089;
0.296650718	3.705949985	1.936398089;
0.298076923	3.715604839	1.94079731;
0.299516908	3.730911264	1.942369269;
0.300970874	3.750613916	1.939663246;
0.302439024	3.773040656	1.931796287;
0.303921569	3.796151676	1.918773554;
0.305418719	3.818303793	1.901469002;
0.306930693	3.838770265	1.881596462;
0.308457711	3.858005151	1.860744594;
0.31	3.877439279	1.839718873;
0.311557789	3.899081667	1.817971552;
0.313131313	3.924070392	1.793094856;
0.314720812	3.951730042	1.76210316;
0.316326531	3.979341274	1.722477109;
0.317948718	4.002541751	1.673496001;
0.319587629	4.017318824	1.617153808;
0.321243523	4.02088844	1.556917399;
0.322916667	4.012556294	1.497357027;
0.32460733	3.993661251	1.442585979;
0.326315789	3.966925277	1.395298294;
0.328042328	3.935739013	1.356855522;
0.329787234	3.902958003	1.326904591;
0.331550802	3.870800105	1.304434037;
0.333333333	3.840622961	1.288118081;
0.335135135	3.813092802	1.276560729;
0.336956522	3.788409511	1.268608751;
0.338797814	3.766542573	1.263415673;
0.340659341	3.747292788	1.260328341;
0.342541436	3.73047817	1.258878213;
0.344444444	3.715821996	1.258851374;
0.346368715	3.703301044	1.260003241;
0.348314607	3.692728774	1.262266189;
0.350282486	3.68406582	1.265578496;
0.352272727	3.677256339	1.269768774;
0.354285714	3.672324832	1.274873006;
0.356321839	3.669270018	1.28094501;
0.358381503	3.668044978	1.287914836;
0.360465116	3.668772672	1.296112947;
0.362573099	3.671730179	1.305754063;
0.364705882	3.677419482	1.31717273;
0.366863905	3.687145621	1.330731982;
0.369047619	3.702528165	1.345798474;
0.371257485	3.725271818	1.360541815;
0.373493976	3.755747935	1.37197214;
0.375757576	3.792408815	1.377150318;
0.37804878	3.832285405	1.374792039;
0.380368098	3.872634704	1.365724005;
0.382716049	3.912429994	1.352029592;
0.385093168	3.952956767	1.335165602;
0.3875	3.996257605	1.314528248;
0.389937107	4.043449446	1.28705035;
0.392405063	4.092724044	1.248794936;
0.394904459	4.139382661	1.197217057;
0.397435897	4.177292531	1.133331157;
0.4	4.202076126	1.061356925;
0.402597403	4.212180118	0.986926411;
0.405228758	4.208818911	0.915404372;
0.407894737	4.19560355	0.850323975;
0.410596026	4.17655093	0.792835749;
0.413333333	4.155350836	0.741573007;
0.416107383	4.132083063	0.693006699;
0.418918919	4.103774256	0.648591165;
0.421768707	4.073356968	0.611767348;
0.424657534	4.044181563	0.580348889;
0.427586207	4.01610813	0.55248361;
0.430555556	3.98895988	0.527560534;
0.433566434	3.96283245	0.505158959;
0.436619718	3.937724614	0.484930442;
0.439716312	3.913593972	0.466548863;
0.442857143	3.890512837	0.449744374;
0.446043165	3.868395058	0.434269732;
0.449275362	3.847205252	0.419918757;
0.452554745	3.826915634	0.40651355;
0.455882353	3.807447801	0.393905332;
0.459259259	3.788656697	0.381994195;
0.462686567	3.770513813	0.370695444;
0.466165414	3.753025685	0.359925677;
0.46969697	3.735998605	0.349663025;
0.473282443	3.719526835	0.339869671;
0.476923077	3.70337238	0.330518765;
0.480620155	3.687709866	0.321596845;
0.484375	3.672418076	0.313075252;
0.488188976	3.657554978	0.304939218;
0.492063492	3.64300136	0.297181469;
0.496	3.628796005	0.289780546;
0.5	3.614956833	0.282725487;
0.504065041	3.601481054	0.27598407;
0.508196721	3.588291502	0.269563619;
0.512396694	3.575482309	0.263419932;
0.516666667	3.562957211	0.257560732;
0.521008403	3.550715736	0.251974815;
0.525423729	3.538854788	0.246625174;
0.52991453	3.527276029	0.241509633;
0.534482759	3.515999766	0.236623424;
0.539130435	3.505023728	0.231930007;
0.543859649	3.494269088	0;*0.227441125;
0.548672566	3.483877783	0;*0.22312714;
0.553571429	3.473788539	0;*0.218974737;
0.558558559	3.463920917	0;*0.214986566;
0.563636364	3.454356584	0;*0.211141705;
0.568807339	3.445013027	0;
0.574074074	3.435974081	0;
0.579439252	3.427093767	0;
0.58490566	3.418644658	0;
0.59047619	3.410375596	0;
0.596153846	3.402354405	0;
0.601941748	3.394641544	0;
0.607843137	3.387160057	0;
0.613861386	3.379897811	0;
0.62	3.372855359	0;
0.626262626	3.366039661	0;
0.632653061	3.359438446	0;
0.639175258	3.353058651	0;
0.645833333	3.346894353	0;
0.652631579	3.34086165	0;
0.659574468	3.335130951	0;
0.666666667	3.329617807	0;
0.673913043	3.324224801	0;
0.681318681	3.319044008	0;
0.688888889	3.314081717	0;
0.696629213	3.309247173	0;
0.704545455	3.304626377	0;
0.712643678	3.300298663	0;
0.720930233	3.29609883	0;
0.729411765	3.29202152	0;
0.738095238	3.288238469	0;
0.746987952	3.284664374	0;
0.756097561	3.281213536	0;
0.765432099	3.278144971	0;
0.775	3.275193221	0;
0.784810127	3.2726254	0;
0.794871795	3.2704331	0;
0.805194805	3.268779367	0;
0.815789474	3.267839231	0;
0.826666667	3.267418498	0;
0.837837838	3.267138317	0;
0.849315068	3.266231253	0;
0.861111111	3.263532963	0;
0.873239437	3.258909176	0;
0.885714286	3.25342995	0;
0.898550725	3.248933805	0;
0.911764706	3.249712173	0;
0.925373134	3.252822275	0;
0.939393939	3.23350635	0;
0.953846154	3.211226958	0;
0.96875	3.196460113	0;
0.984126984	3.184691635	0;
1	3.174511685	0;
1.016393443	3.165502179	0;
1.033333333	3.157208573	0;
1.050847458	3.149560832	0;
1.068965517	3.142460006	0;
1.087719298	3.135734299	0;
1.107142857	3.129386776	0;
1.127272727	3.123321303	0;
1.148148148	3.117639217	0;
1.169811321	3.112157856	0;
1.192307692	3.106878488	0;
1.215686275	3.101788636	0;
1.24	3.097003266	0;
1.265306122	3.092316668	0;
1.291666667	3.087843568	0;
1.319148936	3.083564418	0;
1.347826087	3.079400061	0;
1.377777778	3.075438187	0;
1.409090909	3.071585523	0;
1.441860465	3.067842535	0;
1.476190476	3.06421658	0;
1.512195122	3.060795834	0;
1.55	3.057384703	0;
1.58974359	3.054177302	0;
1.631578947	3.05106296	0;
1.675675676	3.048051505	0;
1.722222222	3.045152799	0;
1.771428571	3.042357672	0;
1.823529412	3.039659505	0;
1.878787879	3.03706292	0;
1.9375	3.03455431	0;
2	3.032157387	0;
2.066666667	3.029839377	0;
2.137931034	3.027617026	0;
2.214285714	3.025480966	0;
2.296296296	3.023424438	0;
2.384615385	3.021464198	0;
2.48	3.019581209	0;
2.583333333	3.017785255	0;
2.695652174	3.016066867	0;
2.818181818	3.014438499	0;
2.952380952	3.012871373	0;
3.1	3.011398851	0;
3.263157895	3.009997465	0;
3.444444444	3.008674305	0;
3.647058824	3.007422498	0;
3.875	3.006249126	0;
4.133333333	3.005154287	0;
4.428571429	3.004131087	0;
4.769230769	3.003169918	0;
5.166666667	3.002304205	0;
5.636363636	3.001490976	0;
6.2	3.00075936	0;
10	3.035861793	0;

}


Scharfetter * relation and trap level for SRH recombination:
{ 
  * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 , 0.0000e+00     # [s]
	taumax	= 1.0000e-09 , 1.0000e-09     # [s]
	Nref	= 1.0000e+16 , 1.0000e+16     # [cm^(-3)]
	gamma	= 1.0        , 1.0            # [1]
	Talpha	= 0.0000e+00 , 0.0000e+00     # [1]
	Tcoeff	= 0.0000e+00 , 0.0000e+00     # [1]
	Etrap	= 0.0000e+00                  # [eV]
}




RadiativeRecombination * coefficients:
{ 
  * R_Radiative = C * (T/Tpar)^alpha * (n p - ni_eff^2)
  * C    
  * alpha 
	C	= 1.0000e-10    # [cm^3/s]
	alpha	= 0.0000e+00    # []
}

Auger * coefficients:
{ 
  * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
       A	= 3.0000e-30 , 3.0000e-30     # [cm^6/s]
       B	= 0.0000e+00 , 0.0000e+00     # [cm^6/s]
       C	= 0.0000e+00 , 0.0000e+00     # [cm^6/s]
       H	= 0.0000e+00 , 0.0000e+00     # [1]
}   

    
ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
	n_0	= 3.5108	# [1]
	k_0	= 0.0000e+00	# [1]
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
       Formula = 3
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
	Cn_temp	= 4.0000e-04	# [K^-1]
	Tpar	= 3.0000e+02	# [K]
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
	Cn_carr	= 1	# [1]
  
  * Carrier dependence (imag) 
  *    delta_k_carr = wavelength / (4*PI) * (Ck_carr_n*n + Ck_carr_p*p) 
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/2 - Npar ) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 - Npar ) )
	Cn_gain	= 0.0000e+00	# [cm^3]
	Npar	= 1.0000e+18	# [cm^-3]
}   


BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	g	= 0.068 ,	0.62	# [1]
	mt	= 0.5000e+00 ,	0.5800e+00	# [1]
}

}


*Ga = .25
Material = "GaInP_25"
{

**************************************************
* Material parameter file for GaInP
* Temperature                 : 300 [K]
* Substrate                   : GaAs
* conduction band offset ratio: -- [1]
* Doping concentration        : -1E+019 [cm-3]
* Mole fraction x             : 0.25 [1]
* Mole fraction y             : -- [1]
*************************************************


*************************************************
* Material Parameter sections
*************************************************


* Static dielectric permittivity

Epsilon 
{ 
  * Ratio of the permittivities of material and vacuum
  * epsilon() = epsilon
  * epsilon(300.0) = 12.457 
        epsilon = 12.4575     # [1]
}


* Band gap, electron affinity

Bandgap
{
  * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
  * Chi(300.0) = 4.19329 eV
  * Eg(300.0) = 1.60919 eV
        Chi0	= 4.1642        # [eV]
	    Bgn2Chi = 0.5           # [1]
        Eg0     = 1.6673        # [eV]
        alpha   = 2.7225e-04    # [eV K^(-1)]
        beta	= 1.2150e+02    # [K]
        Tpar	= 0.0000e+00    # [K]
 }


* electron DOS mass

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
  * Formula1:
  * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
  * mt = a[Eg(0)/Eg(T)] 
  * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.540e19 ((me/m0)*(T/300))^3/2 
  * me/m0(300.0) = 0.0852 
  * Nc(300.0) = 6.2354e+17 cm^(-3)
 	    Formula   = 1             # [1]
        a         = 0.0000e+00    # [1]
        ml        = 0.0000e+00    # [1]
        mm        = 8.5152e-02    # [1]
}


* hole DOS mass

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
  * Formula1:
  * mh =  m0*{[(a+bT+cT^2+dT^3+eT^4)/(1+fT+gT^2+hT^3+iT^4)]^(2/3) + mm}
  * Nv(T) = 2(2pi*kB/h_Planck^2*mh*T)^3/2 = 2.540e19 ((mh/m0)*(T/300))^3/2 
  * mh/m0(300.0) = 0.6544 
  * Nv(300.0) = 1.3286e+19 cm^(-3)
	    Formula   = 1             # [1]
        a         = 0.0000e+00    # [1]
        b         = 0.0000e+00    # [1]
        c         = 0.0000e+00    # [1]
        d         = 0.0000e+00    # [1]
        e         = 0.0000e+00    # [1]
        f         = 0.0000e+00    # [1]
        g         = 0.0000e+00    # [1]
        h         = 0.0000e+00    # [1]
        i         = 0.0000e+00    # [1]
        mm        = 6.5445e-01    # [1]
        Nv300     = 1.3286e+19    # [cm-3]
}


* Arora Doping Dependent Mobility model

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
 	formula	= 2          , 2              # [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
  * mu_dop_n(300.0,-1.000e+19) = 4.4968e+02 cm^2/(Vs)
  * mu_dop_p(300.0,-1.000e+19) = 1.9533e+01 cm^2/(Vs)
        Ar_mumin    = +4.0000e+02 , +1.5000e+01     # [cm^2/(Vs)]
	Ar_alm      = +0.0000e+00 , +0.0000e+00     # [1]
	Ar_mud      = +3.9000e+03 , +1.3500e+02     # [cm^2/(Vs)]
	Ar_ald      = +0.0000e+00 , +0.0000e+00     # [1]
	Ar_N0       = +2.0000e+16 , +1.5000e+17     # [cm^(-3)]
	Ar_alN      = +1.9550e+00 , +1.4700e+00     # [1]
	Ar_a        = +7.0000e-01 , +8.0000e-01     # [1]
	Ar_ala      = +0.0000e+00 , +0.0000e+00     # [1]
}


* Low field Mobility models: Constant mobility  and Doping dependent Mobility

ConstantMobility:
{ 
  * mu_const = mumax (T/T0)^(-Exponent)
  * mu_const_n(300.0) = 4.3000e+03 cm^2/(Vs)
  * mu_const_p(300.0) = 1.5000e+02 cm^2/(Vs)
	mumax	        =  4.3000e+03 , 1.5000e+02     # [cm^2/(Vs)]
        Exponent	=  1.66       , 2.00           # [1]
	mutunnel	=  0.05       , 0.05           # [cm^2/(Vs)]
}


* Absorption model

TableODB
{ 
  * Each entry of the table consists of three values:
  * complex refractive index n + i*k (unitless) 
  * refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *  WAVELEN(um)        n	       k
   2.4824700e-01  2.8674300e+00  3.7472870e+00;
   2.4956665e-01  2.9708460e+00  3.7129171e+00;
   2.5092106e-01  3.1262030e+00  3.6723694e+00;
   2.5272377e-01  3.2684190e+00  3.6112721e+00;
   2.5455258e-01  3.4106350e+00  3.5224457e+00;
   2.5639723e-01  3.5268810e+00  3.4208076e+00;
   2.5874511e-01  3.6819280e+00  3.2778512e+00;
   2.6111955e-01  3.7980190e+00  3.1256823e+00;
   2.6352090e-01  3.8751540e+00  2.9332170e+00;
   2.6693214e-01  3.9260090e+00  2.7256443e+00;
   2.6991259e-01  3.9380640e+00  2.5554274e+00;
   2.7294815e-01  3.9241480e+00  2.4201103e+00;
   2.7552929e-01  3.9103870e+00  2.3194147e+00;
   2.7815348e-01  3.8836410e+00  2.2273557e+00;
   2.8082806e-01  3.8568950e+00  2.1527587e+00;
   2.8355459e-01  3.8301490e+00  2.0890265e+00;
   2.8632782e-01  3.7904180e+00  2.0349934e+00;
   2.8916279e-01  3.7636720e+00  1.9888654e+00;
   2.9264247e-01  3.7367710e+00  1.9492723e+00;
   2.9560443e-01  3.7100260e+00  1.9138545e+00;
   2.9862697e-01  3.6832800e+00  1.8787249e+00;
   3.0297751e-01  3.6692090e+00  1.8672638e+00;
   3.1008062e-01  3.6545170e+00  1.8503124e+00;
   3.1342427e-01  3.6537420e+00  1.8425043e+00;
   3.1684082e-01  3.6529660e+00  1.8343037e+00;
   3.2033276e-01  3.6521910e+00  1.8310237e+00;
   3.2391962e-01  3.6773850e+00  1.8360381e+00;
   3.2757897e-01  3.6895950e+00  1.8410407e+00;
   3.3133098e-01  3.7147900e+00  1.8403976e+00;
   3.3517918e-01  3.7529700e+00  1.8393931e+00;
   3.3911781e-01  3.7911500e+00  1.8383887e+00;
   3.4315002e-01  3.8293290e+00  1.8373846e+00;
   3.4645151e-01  3.8676650e+00  1.8393183e+00;
   3.4981704e-01  3.9059990e+00  1.8457584e+00;
   3.5240240e-01  3.9574750e+00  1.8475098e+00;
   3.5590597e-01  4.0217800e+00  1.8271416e+00;
   3.5857177e-01  4.0602700e+00  1.8137243e+00;
   3.6128865e-01  4.1117450e+00  1.8021160e+00;
   3.6404691e-01  4.1632210e+00  1.7905082e+00;
   3.6685869e-01  4.2276810e+00  1.7633123e+00;
   3.6876492e-01  4.2793120e+00  1.7352787e+00;
   3.7163897e-01  4.3307870e+00  1.6902068e+00;
   3.7456983e-01  4.3952470e+00  1.6449569e+00;
   3.7754716e-01  4.4597080e+00  1.5823503e+00;
   3.8057221e-01  4.5241680e+00  1.5112203e+00;
   3.8362191e-01  4.5626590e+00  1.4365080e+00;
   3.8879008e-01  4.6008390e+00  1.2618407e+00;
   3.9298280e-01  4.5872330e+00  1.1265626e+00;
   3.9618396e-01  4.5737820e+00  1.0261265e+00;
   3.9943758e-01  4.5603320e+00  9.3571989e-01;
   4.0161894e-01  4.5340510e+00  8.8763577e-01;
   4.0382427e-01  4.5077710e+00  8.5107716e-01;
   4.0605381e-01  4.4814900e+00  8.1463335e-01;
   4.0830824e-01  4.4552100e+00  7.8052495e-01;
   4.1058771e-01  4.4289290e+00  7.4641857e-01;
   4.1289291e-01  4.4026480e+00  7.1231017e-01;
   4.1639959e-01  4.3632280e+00  6.6114962e-01;
   4.1996634e-01  4.3238070e+00  6.0998908e-01;
   4.2359458e-01  4.2843860e+00  5.7467274e-01;
   4.2728635e-01  4.2449660e+00  5.3958138e-01;
   4.3230974e-01  4.1924040e+00  4.9279598e-01;
   4.3746839e-01  4.1528280e+00  4.6239359e-01;
   4.4408836e-01  4.1001120e+00  4.3037865e-01;
   4.5091176e-01  4.0473960e+00  4.0253419e-01;
   4.5794828e-01  3.9946800e+00  3.7119513e-01;
   4.6522553e-01  3.9549490e+00  3.4654715e-01;
   4.7122334e-01  3.9283580e+00  3.3300306e-01;
   4.7893216e-01  3.8886270e+00  3.1680392e-01;
   4.8689759e-01  3.8488960e+00  3.0149030e-01;
   4.9515242e-01  3.8221500e+00  2.8548985e-01;
   5.0369199e-01  3.7954040e+00  2.6853969e-01;
   5.1253149e-01  3.7686580e+00  2.5250967e-01;
   5.2168657e-01  3.7419120e+00  2.3715953e-01;
   5.3117466e-01  3.7151660e+00  2.2633848e-01;
   5.4101427e-01  3.6884210e+00  2.1937338e-01;
   5.5122530e-01  3.6616740e+00  2.1240829e-01;
   5.6398362e-01  3.6217890e+00  2.0406014e-01;
   5.8202608e-01  3.6075620e+00  1.9233892e-01;
   5.9388985e-01  3.5938020e+00  1.8415801e-01;
   6.0624732e-01  3.5800410e+00  1.7647759e-01;
   6.1916153e-01  3.5792650e+00  1.6947903e-01;
   6.3267083e-01  3.5914750e+00  1.6246373e-01;
   6.4391714e-01  3.6038400e+00  1.3307706e-01;
   6.5850539e-01  3.6030640e+00  7.4690647e-02;
   6.6743352e-01  3.5506580e+00  1.3879595e-02;
   6.7350864e-01  3.5113920e+00  1.3487889e-03;
   6.7977177e-01  3.4980970e+00  1.3091392e-03;
   6.8611337e-01  3.4718170e+00  1.2697302e-03;
   6.9923912e-01  3.4452260e+00  1.1904330e-03;
   7.1643306e-01  3.4314650e+00  1.0909569e-03;
   7.3444995e-01  3.4047190e+00  9.9171705e-04;
   7.5339594e-01  3.3779730e+00  8.9247957e-04;
   7.7334529e-01  3.3512270e+00  7.9324210e-04;
   7.9437985e-01  3.3244810e+00  6.9400462e-04;
   8.1664553e-01  3.3107210e+00  5.9452779e-04;
   8.4508148e-01  3.2968050e+00  4.7510444e-04;
   8.7556856e-01  3.2828890e+00  3.5568343e-04;
   9.1976672e-01  3.2556780e+00  1.9661281e-04;
   9.6232622e-01  3.2416070e+00  5.7248949e-05;
   1.0160706e+00  3.2273810e+00  0.0000000e+00;
   1.0761731e+00  3.2131550e+00  0.0000000e+00;
   1.1348999e+00  3.1990840e+00  0.0000000e+00;
   1.2004073e+00  3.1850130e+00  0.0000000e+00;
   1.2628695e+00  3.1710970e+00  0.0000000e+00;
   1.3321888e+00  3.1571810e+00  0.0000000e+00;
   1.4095599e+00  3.1432650e+00  0.0000000e+00;
   1.4664525e+00  3.1426450e+00  0.0000000e+00;
   1.4664525e+01  3.1426450e+00  0.0000000e+00;
}


* Recombination Parameters: SRH, Radiative, Auger

RadiativeRecombination * coefficients:
{ 
  * R_Radiative = C * (T/Tpar)^alpha * (n p - ni_eff^2)
  * C    
  * alpha 
	C	= 1.0000e-10    # [cm^3/s]
	alpha	= 0.0000e+00    # []
}


Scharfetter * relation and trap level for SRH recombination:
{ 
  * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 , 0.0000e+00     # [s]
	taumax	= 1.0000e-09 , 1.0000e-09     # [s]
	Nref	= 1.0000e+16 , 1.0000e+16     # [cm^(-3)]
	gamma	= 1.0        , 1.0            # [1]
	Talpha	= 0.0000e+00 , 0.0000e+00     # [1]
	Tcoeff	= 0.0000e+00 , 0.0000e+00     # [1]
	Etrap	= 0.0000e+00                  # [eV]
}


Auger * coefficients:
{ 
  * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
       A	= 3.0000e-30 , 3.0000e-30     # [cm^6/s]
       B	= 0.0000e+00 , 0.0000e+00     # [cm^6/s]
       C	= 0.0000e+00 , 0.0000e+00     # [cm^6/s]
       H	= 0.0000e+00 , 0.0000e+00     # [1]
       N0	= 1.0000e+18 , 1.0000e+18     # [cm^(-3)]
}



  
ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
	n_0	= 3.5108	# [1]
	k_0	= 0.0000e+00	# [1]
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
       Formula = 3
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
	Cn_temp	= 4.0000e-04	# [K^-1]
	Tpar	= 3.0000e+02	# [K]
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
	Cn_carr	= 1	# [1]
  
  * Carrier dependence (imag) 
  *    delta_k_carr = wavelength / (4*PI) * (Ck_carr_n*n + Ck_carr_p*p) 
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/2 - Npar ) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 - Npar ) )
	Cn_gain	= 0.0000e+00	# [cm^3]
	Npar	= 1.0000e+18	# [cm^-3]
} 


}

Material = "AlGaAs"
{

Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	epsilon(0)	= 13.18	# [1]
	epsilon(1)	= 10.06	# [1]
}


Epsilon_aniso
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	epsilon(0)	= 13.18	# [1]
	epsilon(1)	= 10.06	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + alpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	refractiveindex(0)	= 3.5108	# [1]
	refractiveindex(1)	= 2.90805	# [1]
	alpha(0)	= 4.0000e-04	# [1/K]
	alpha(1)	= 1.0000e-04	# [1/K]
	CarrDepCoeff(0)	= 1	# [1]
	CarrDepCoeff(1)	= 1	# [1]

  * Gain dependence of refractive index in active region:
  * a) Linear model: delta n = a0 * ( (n+p)/2 - N0 )
  * b) Logarithmic model: delta n = a0 * log ( (n+p)/(2 * N0) )
  * where n/p are the carrier densities in the active region. 
	a0	= 0.0000e+00	# [cm^3 or 1]
	N0	= 1.0000e+18	# [1/cm^3]
}


ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *    n_0, k_0 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	n_0(0)	= 3.5108	# [1]
	n_0(1)	= 2.90805	# [1]
	k_0(0)	= 0.0000e+00	# [1]
	k_0(1)	= 0.0000e+00	# [1]
  
  * Wavelength dependence (real and imag): 
  *    Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *               delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *    Formula 1: Read tabulated values 
  *               NumericalTable (...)  
  *    Formula 2: Read tabulated values from file 
  *               NumericalTable = <string> 
  *    Formula 3: Read tabulated values from ODB Table 
       Formula = 0
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
  
  * Temperature dependence (real): 
  *    delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	Cn_temp(0)	= 4.0000e-04	# [K^-1]
	Cn_temp(1)	= 1.0000e-04	# [K^-1]
	Tpar	= 3.0000e+02	# [K]
  
  * Carrier dependence (real) 
  *    delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	Cn_carr(0)	= 1	# [1]
	Cn_carr(1)	= 1	# [1]
  
  * Carrier dependence (imag) 
  *    delta_k_carr = wavelength / (4*PI) * (Ck_carr_n*n + Ck_carr_p*p) 
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
  
  * Gain dependence (real) 
  *    lin: delta_n_gain = Cn_gain * ( (n+p)/2 - Npar ) 
  *    log: delta_n_gain = Cn_gain * log ( (n+p)/(2 - Npar ) )
	Cn_gain	= 0.0000e+00	# [cm^3]
	Npar	= 1.0000e+18	# [cm^-3]
} 


SpectralConversion
{ * Spectral Conversion Model
  * No default model, user has to define.
  * All wavelength parameters should be in nanometers.
  * Choice of Analytic or NumericalTable selected in Physics section of region
  *
  * ConversionEfficiency = float     * ratio of absorbed photons that are reemitted.
  * AbsorptionScaling = float        * scale absorption
  * EmissionScaling = float          * scale emission
  * Analytic (
  *   AbsorptionProfile = (
  *      Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
  *      Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
  *      ...
  *   )
  *   EmissionProfile = (
  *      Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
  *      Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
  *      ...
  *   )
  * )
  * NumericalTable (
  *   AbsorptionProfile = (
  *      lambda0 value0
  *      lambda1 value1
  *      ...
  *   )
  *   EmissionProfile = (
  *      lambda0 value0
  *      lambda1 value1
  *      ...
  *   )

  ConversionEfficiency = 1.0
}

LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	cv(0)	= 1.6	# [J/(Kcm^3)]
	cv(1)	= 1.16	# [J/(Kcm^3)]
	cv_b(0)	= 0.0000e+00	# [J/(K^2*cm^3)]
	cv_b(1)	= 0.0000e+00	# [J/(K^2*cm^3)]
	cv_c(0)	= 0.0000e+00	# [J/(K^3*cm^3)]
	cv_c(1)	= 0.0000e+00	# [J/(K^3*cm^3)]
	cv_d(0)	= 0.0000e+00	# [J/(K^4*cm^3)]
	cv_d(1)	= 0.0000e+00	# [J/(K^4*cm^3)]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 0:
  * kappa() = 1 / ( 1/kappa + 1/kappa_b * T + 1/kappa_c * T^2 )
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * The following interpolation polynom can be used on interval [Xmin(I),Xmax(I)]:
  * F(X) = F(I-1)+A(I)*(X-Xmin(I))+B(I)*(X-Xmin(I))^2+C(I)*(X-Xmin(I))^3,
  * where Xmax(I), F(I), B(I), C(I) are defined below for each interval.
  * A(I) is calculated for a boundary condition F(Xmax(I)) = F(I).
  *
  * Definition of mole fraction intervals, parameters, and coefficients:
	* parameter kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa(0)	= 1.5	# [W/(K cm)]
	Xmax(1)	= 1	# [1]
	kappa(1)	= 1.5	# [W/(K cm)]
	B(kappa(1))	= 0.0000e+00	# [W/(K cm)]
	C(kappa(1))	= 0.0000e+00	# [W/(K cm)]

	* parameter kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_b(0)	= 0.0000e+00	# [W/(K^2 cm)]
	Xmax(1)	= 1	# [1]
	kappa_b(1)	= 0.0000e+00	# [W/(K^2 cm)]
	B(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]
	C(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]

	* parameter kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_c(0)	= 0.0000e+00	# [W/(K^3 cm)]
	Xmax(1)	= 1	# [1]
	kappa_c(1)	= 0.0000e+00	# [W/(K^3 cm)]
	B(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]
	C(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]

	* parameter 1/kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa(0)	= 2.17391	# [(K cm)/W]
	Xmax(1)	= 1	# [1]
	1/kappa(1)	= 1.1	# [(K cm)/W]
	B(1/kappa(1))	= -3.0000e+01	# [(K cm)/W]
	C(1/kappa(1))	= 0.0000e+00	# [(K cm)/W]

	* parameter 1/kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_b(0)	= 0.0000e+00	# [cm/W]
	Xmax(1)	= 1	# [1]
	1/kappa_b(1)	= 0.0000e+00	# [cm/W]
	B(1/kappa_b(1))	= 0.0000e+00	# [cm/W]
	C(1/kappa_b(1))	= 0.0000e+00	# [cm/W]

	* parameter 1/kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_c(0)	= 0.0000e+00	# [cm/(W K)]
	Xmax(1)	= 1	# [1]
	1/kappa_c(1)	= 0.0000e+00	# [cm/(W K)]
	B(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]
	C(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]

}


Kappa_aniso
{ *  Lattice thermal conductivity

  * Formula = 0:
  * kappa() = 1 / ( 1/kappa + 1/kappa_b * T + 1/kappa_c * T^2 )
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * The following interpolation polynom can be used on interval [Xmin(I),Xmax(I)]:
  * F(X) = F(I-1)+A(I)*(X-Xmin(I))+B(I)*(X-Xmin(I))^2+C(I)*(X-Xmin(I))^3,
  * where Xmax(I), F(I), B(I), C(I) are defined below for each interval.
  * A(I) is calculated for a boundary condition F(Xmax(I)) = F(I).
  *
  * Definition of mole fraction intervals, parameters, and coefficients:
	* parameter kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa(0)	= 1.5	# [W/(K cm)]
	Xmax(1)	= 1	# [1]
	kappa(1)	= 1.5	# [W/(K cm)]
	B(kappa(1))	= 0.0000e+00	# [W/(K cm)]
	C(kappa(1))	= 0.0000e+00	# [W/(K cm)]

	* parameter kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_b(0)	= 0.0000e+00	# [W/(K^2 cm)]
	Xmax(1)	= 1	# [1]
	kappa_b(1)	= 0.0000e+00	# [W/(K^2 cm)]
	B(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]
	C(kappa_b(1))	= 0.0000e+00	# [W/(K^2 cm)]

	* parameter kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	kappa_c(0)	= 0.0000e+00	# [W/(K^3 cm)]
	Xmax(1)	= 1	# [1]
	kappa_c(1)	= 0.0000e+00	# [W/(K^3 cm)]
	B(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]
	C(kappa_c(1))	= 0.0000e+00	# [W/(K^3 cm)]

	* parameter 1/kappa:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa(0)	= 2.17391	# [(K cm)/W]
	Xmax(1)	= 1	# [1]
	1/kappa(1)	= 1.1	# [(K cm)/W]
	B(1/kappa(1))	= -3.0000e+01	# [(K cm)/W]
	C(1/kappa(1))	= 0.0000e+00	# [(K cm)/W]

	* parameter 1/kappa_b:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_b(0)	= 0.0000e+00	# [cm/W]
	Xmax(1)	= 1	# [1]
	1/kappa_b(1)	= 0.0000e+00	# [cm/W]
	B(1/kappa_b(1))	= 0.0000e+00	# [cm/W]
	C(1/kappa_b(1))	= 0.0000e+00	# [cm/W]

	* parameter 1/kappa_c:
	Xmax(0)	= 0.0000e+00	# [1]
	1/kappa_c(0)	= 0.0000e+00	# [cm/(W K)]
	Xmax(1)	= 1	# [1]
	1/kappa_c(1)	= 0.0000e+00	# [cm/(W K)]
	B(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]
	C(1/kappa_c(1))	= 0.0000e+00	# [cm/(W K)]

}


EnergyRelaxationTime
{ *  Energy relaxation times in picoseconds
	tau_w_ele	= 1	# [ps]
	tau_w_hol	= 0.4	# [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8	# [1]
	p_l_f	= 0.8	# [1]
	n_gamma	= 0.0000e+00	# [1]
	p_gamma	= 0.0000e+00	# [1]
	n_delta	= 0.0000e+00	# [1]
	p_delta	= 0.0000e+00	# [1]
}

Bandgap
{ * Eg = Eg0 + alpha Tpar^2 / (beta + Tpar) - alpha T^2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Tpar	= 3.0000e+02	# [K]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * The following interpolation polynom can be used on interval [Xmin(I),Xmax(I)]:
  * F(X) = F(I-1)+A(I)*(X-Xmin(I))+B(I)*(X-Xmin(I))^2+C(I)*(X-Xmin(I))^3,
  * where Xmax(I), F(I), B(I), C(I) are defined below for each interval.
  * A(I) is calculated for a boundary condition F(Xmax(I)) = F(I).
  *
  * Definition of mole fraction intervals, parameters, and coefficients:
	* parameter dEg0(OldSlotboom):
	Xmax(0)	= 0.0000e+00	# [1]
	dEg0(OldSlotboom)(0)	= 0.0000e+00	# [eV]
	Xmax(1)	= 0.45	# [1]
	dEg0(OldSlotboom)(1)	= 0.0000e+00	# [eV]
	B(dEg0(OldSlotboom)(1))	= 0.0000e+00	# [eV]
	C(dEg0(OldSlotboom)(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	dEg0(OldSlotboom)(2)	= 0.0000e+00	# [eV]
	B(dEg0(OldSlotboom)(2))	= 0.0000e+00	# [eV]
	C(dEg0(OldSlotboom)(2))	= 0.0000e+00	# [eV]

	* parameter dEg0(Slotboom):
	Xmax(0)	= 0.0000e+00	# [1]
	dEg0(Slotboom)(0)	= 0.0000e+00	# [eV]
	Xmax(1)	= 0.45	# [1]
	dEg0(Slotboom)(1)	= 0.0000e+00	# [eV]
	B(dEg0(Slotboom)(1))	= 0.0000e+00	# [eV]
	C(dEg0(Slotboom)(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	dEg0(Slotboom)(2)	= 0.0000e+00	# [eV]
	B(dEg0(Slotboom)(2))	= 0.0000e+00	# [eV]
	C(dEg0(Slotboom)(2))	= 0.0000e+00	# [eV]

	* parameter dEg0(delAlamo):
	Xmax(0)	= 0.0000e+00	# [1]
	dEg0(delAlamo)(0)	= 0.0000e+00	# [eV]
	Xmax(1)	= 0.45	# [1]
	dEg0(delAlamo)(1)	= 0.0000e+00	# [eV]
	B(dEg0(delAlamo)(1))	= 0.0000e+00	# [eV]
	C(dEg0(delAlamo)(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	dEg0(delAlamo)(2)	= 0.0000e+00	# [eV]
	B(dEg0(delAlamo)(2))	= 0.0000e+00	# [eV]
	C(dEg0(delAlamo)(2))	= 0.0000e+00	# [eV]

	* parameter dEg0(Bennett):
	Xmax(0)	= 0.0000e+00	# [1]
	dEg0(Bennett)(0)	= 0.0000e+00	# [eV]
	Xmax(1)	= 0.45	# [1]
	dEg0(Bennett)(1)	= 0.0000e+00	# [eV]
	B(dEg0(Bennett)(1))	= 0.0000e+00	# [eV]
	C(dEg0(Bennett)(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	dEg0(Bennett)(2)	= 0.0000e+00	# [eV]
	B(dEg0(Bennett)(2))	= 0.0000e+00	# [eV]
	C(dEg0(Bennett)(2))	= 0.0000e+00	# [eV]

	* parameter Bgn2Chi:
	Xmax(0)	= 0.0000e+00	# [1]
	Bgn2Chi(0)	= 0.5	# [1]
	Xmax(1)	= 0.45	# [1]
	Bgn2Chi(1)	= 0.5	# [1]
	B(Bgn2Chi(1))	= 0.0000e+00	# [1]
	C(Bgn2Chi(1))	= 0.0000e+00	# [1]
	Xmax(2)	= 1	# [1]
	Bgn2Chi(2)	= 0.5	# [1]
	B(Bgn2Chi(2))	= 0.0000e+00	# [1]
	C(Bgn2Chi(2))	= 0.0000e+00	# [1]

	* parameter Eg0:
	Xmax(0)	= 0.0000e+00	# [1]
	Eg0(0)	= 1.42248	# [eV]
	Xmax(1)	= 0.45	# [1]
	Eg0(1)	= 1.98515	# [eV]
	B(Eg0(1))	= 0.0000e+00	# [eV]
	C(Eg0(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	Eg0(2)	= 2.11	# [eV]
	B(Eg0(2))	= 0.143	# [eV]
	C(Eg0(2))	= 0.0000e+00	# [eV]

	* parameter alpha:
	Xmax(0)	= 0.0000e+00	# [1]
	alpha(0)	= 5.4050e-04	# [eV/K]
	Xmax(1)	= 0.45	# [1]
	alpha(1)	= 4.7727e-04	# [eV/K]
	B(alpha(1))	= 0.0000e+00	# [eV/K]
	C(alpha(1))	= 0.0000e+00	# [eV/K]
	Xmax(2)	= 1	# [1]
	alpha(2)	= 4.0000e-04	# [eV/K]
	B(alpha(2))	= 0.0000e+00	# [eV/K]
	C(alpha(2))	= 0.0000e+00	# [eV/K]

	* parameter alpha2:
	Xmax(0)	= 0.0000e+00	# [1]
	alpha2(0)	= 0.0000e+00	# [eV/K]
	Xmax(1)	= 0.45	# [1]
	alpha2(1)	= 0.0000e+00	# [eV/K]
	B(alpha2(1))	= 0.0000e+00	# [eV/K]
	C(alpha2(1))	= 0.0000e+00	# [eV/K]
	Xmax(2)	= 1	# [1]
	alpha2(2)	= 0.0000e+00	# [eV/K]
	B(alpha2(2))	= 0.0000e+00	# [eV/K]
	C(alpha2(2))	= 0.0000e+00	# [eV/K]

	* parameter beta:
	Xmax(0)	= 0.0000e+00	# [1]
	beta(0)	= 2.0400e+02	# [K]
	Xmax(1)	= 0.45	# [1]
	beta(1)	= 1.1220e+02	# [K]
	B(beta(1))	= 0.0000e+00	# [K]
	C(beta(1))	= 0.0000e+00	# [K]
	Xmax(2)	= 1	# [1]
	beta(2)	= 0.0000e+00	# [K]
	B(beta(2))	= 0.0000e+00	# [K]
	C(beta(2))	= 0.0000e+00	# [K]

	* parameter beta2:
	Xmax(0)	= 0.0000e+00	# [1]
	beta2(0)	= 0.0000e+00	# [K]
	Xmax(1)	= 0.45	# [1]
	beta2(1)	= 0.0000e+00	# [K]
	B(beta2(1))	= 0.0000e+00	# [K]
	C(beta2(1))	= 0.0000e+00	# [K]
	Xmax(2)	= 1	# [1]
	beta2(2)	= 0.0000e+00	# [K]
	B(beta2(2))	= 0.0000e+00	# [K]
	C(beta2(2))	= 0.0000e+00	# [K]

	* parameter Chi0:
	Xmax(0)	= 0.0000e+00	# [1]
	Chi0(0)	= 4.11826	# [eV]
	Xmax(1)	= 0.45	# [1]
	Chi0(1)	= 3.575	# [eV]
	B(Chi0(1))	= 0.0000e+00	# [eV]
	C(Chi0(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	Chi0(2)	= 3.56	# [eV]
	B(Chi0(2))	= 0.0000e+00	# [eV]
	C(Chi0(2))	= 0.0000e+00	# [eV]

	* parameter WorkFunction:
	Xmax(0)	= 0.0000e+00	# [1]
	WorkFunction(0)	= 4.25	# [eV]
	Xmax(1)	= 0.45	# [1]
	WorkFunction(1)	= 4.25	# [eV]
	B(WorkFunction(1))	= 0.0000e+00	# [eV]
	C(WorkFunction(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	WorkFunction(2)	= 4.25	# [eV]
	B(WorkFunction(2))	= 0.0000e+00	# [eV]
	C(WorkFunction(2))	= 0.0000e+00	# [eV]

	* parameter FermiEnergy:
	Xmax(0)	= 0.0000e+00	# [1]
	FermiEnergy(0)	= 11.7	# [eV]
	Xmax(1)	= 0.45	# [1]
	FermiEnergy(1)	= 11.7	# [eV]
	B(FermiEnergy(1))	= 0.0000e+00	# [eV]
	C(FermiEnergy(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	FermiEnergy(2)	= 11.7	# [eV]
	B(FermiEnergy(2))	= 0.0000e+00	# [eV]
	C(FermiEnergy(2))	= 0.0000e+00	# [eV]

	* parameter EgMin:
	Xmax(0)	= 0.0000e+00	# [1]
	EgMin(0)	= -1.0000e+01	# [eV]
	Xmax(1)	= 0.45	# [1]
	EgMin(1)	= -1.0000e+01	# [eV]
	B(EgMin(1))	= 0.0000e+00	# [eV]
	C(EgMin(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	EgMin(2)	= -1.0000e+01	# [eV]
	B(EgMin(2))	= 0.0000e+00	# [eV]
	C(EgMin(2))	= 0.0000e+00	# [eV]

	* parameter dEgMin:
	Xmax(0)	= 0.0000e+00	# [1]
	dEgMin(0)	= 0.0000e+00	# [eV]
	Xmax(1)	= 0.45	# [1]
	dEgMin(1)	= 0.0000e+00	# [eV]
	B(dEgMin(1))	= 0.0000e+00	# [eV]
	C(dEgMin(1))	= 0.0000e+00	# [eV]
	Xmax(2)	= 1	# [1]
	dEgMin(2)	= 0.0000e+00	# [eV]
	B(dEgMin(2))	= 0.0000e+00	# [eV]
	C(dEgMin(2))	= 0.0000e+00	# [eV]

}


*  OldSlotboom { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Slotboom { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  delAlamo { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Bennett { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

JainRoulston
{ * deltaEg = A_i N^(1/3) + B_i N^(1/4) + C_i N^(1/2) + D_i N^(1/2)
  * where i is n for n-type or p for p-type
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	A_n(0)	= 0.0000e+00	# [eV cm]
	A_n(1)	= 0.0000e+00	# [eV cm]
	B_n(0)	= 0.0000e+00	# [eV cm^(3/4)]
	B_n(1)	= 0.0000e+00	# [eV cm^(3/4)]
	C_n(0)	= 0.0000e+00	# [eV cm^(3/2)]
	C_n(1)	= 0.0000e+00	# [eV cm^(3/2)]
	D_n(0)	= 0.0000e+00	# [eV cm^(3/2)]
	D_n(1)	= 0.0000e+00	# [eV cm^(3/2)]
	A_p(0)	= 0.0000e+00	# [eV cm]
	A_p(1)	= 0.0000e+00	# [eV cm]
	B_p(0)	= 0.0000e+00	# [eV cm^(3/4)]
	B_p(1)	= 0.0000e+00	# [eV cm^(3/4)]
	C_p(0)	= 0.0000e+00	# [eV cm^(3/2)]
	C_p(1)	= 0.0000e+00	# [eV cm^(3/2)]
	D_p(0)	= 0.0000e+00	# [eV cm^(3/2)]
	D_p(1)	= 0.0000e+00	# [eV cm^(3/2)]
}

FreeCarrierAbsorption
{
  * Coefficients for free carrier absorption:
  * fcaalpha_n for electrons,
  * fcaalpha_p for holes

  * FCA = (alpha_n * n + alpha_p * p) * Light Intensity
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	fcaalpha_n(0)	= 4.0000e-18	# [cm^2]
	fcaalpha_n(1)	= 4.0000e-18	# [cm^2]
	fcaalpha_p(0)	= 8.0000e-18	# [cm^2]
	fcaalpha_p(1)	= 8.0000e-18	# [cm^2]
}

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	gamma_1(0)	= 6.85	# [1]
	gamma_1(1)	= 3.45	# [1]
	gamma_2(0)	= 2.1	# [1]
	gamma_2(1)	= 0.68	# [1]
	gamma_3(0)	= 2.9	# [1]
	gamma_3(1)	= 1.29	# [1]
	so(0)	= 0.34	# [eV]
	so(1)	= 0.28	# [eV]
	ep_te(0)	= 28.8	# [eV]
	ep_te(1)	= 21.1	# [eV]
	ep_tm(0)	= 28.8	# [eV]
	ep_tm(1)	= 21.1	# [eV]
	A1(0)	= 0.0000e+00	# [1]
	A1(1)	= 0.0000e+00	# [1]
	A2(0)	= 0.0000e+00	# [1]
	A2(1)	= 0.0000e+00	# [1]
	A3(0)	= 0.0000e+00	# [1]
	A3(1)	= 0.0000e+00	# [1]
	A4(0)	= 0.0000e+00	# [1]
	A4(1)	= 0.0000e+00	# [1]
	A5(0)	= 0.0000e+00	# [1]
	A5(1)	= 0.0000e+00	# [1]
	A6(0)	= 0.0000e+00	# [1]
	A6(1)	= 0.0000e+00	# [1]
	cr(0)	= 0.0000e+00	# [eV]
	cr(1)	= 0.0000e+00	# [eV]
}

QWStrain
{
  * Zincblende crystals:
  *   Parameters: a_nu, a_c, b, C_12, C_11
  *   StrainConstant eps (formula = 1) or lattice constant
  *   a0 (formula = 2) for energy shift of quantum-well
  *   subbands.
  *   a0(T) = a0 + alpha (T-Tpar)

  * Wurtzite crystals:
  *   Parameters: a_c, D1, D2, D3, D4, C_13, C_33
  *   Lattice constants a0 and c0 (formula 2 must be used)
  *   a0(T) = a0 + alpha (T-Tpar)
  *   c0(T) = c0 + alpha (T-Tpar)

	  * Default formula	= 1	# [1]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a_nu(0)	= 1.16	# [eV]
	a_nu(1)	= 2.47	# [eV]
	a_c(0)	= -7.1700e+00	# [eV]
	a_c(1)	= -5.6400e+00	# [eV]
	b_shear(0)	= -1.7000e+00	# [eV]
	b_shear(1)	= -1.5000e+00	# [eV]
	C_11(0)	= 11.879	# [1e-2 GPa]
	C_11(1)	= 12.5	# [1e-2 GPa]
	C_12(0)	= 5.376	# [1e-2 GPa]
	C_12(1)	= 5.34	# [1e-2 GPa]
	eps(0)	= 0.0000e+00	# [1]
	eps(1)	= 0.0000e+00	# [1]
	a0(0)	= 5.6533e-10	# [m]
	a0(1)	= 5.6611e-10	# [m]
	alpha(0)	= 3.8800e-15	# [m/K]
	alpha(1)	= 2.9000e-15	# [m/K]
	D1(0)	= 0.0000e+00	# [eV]
	D1(1)	= 0.0000e+00	# [eV]
	D2(0)	= 0.0000e+00	# [eV]
	D2(1)	= 0.0000e+00	# [eV]
	D3(0)	= 0.0000e+00	# [eV]
	D3(1)	= 0.0000e+00	# [eV]
	D4(0)	= 0.0000e+00	# [eV]
	D4(1)	= 0.0000e+00	# [eV]
	C_13(0)	= 0.0000e+00	# [1e-2 GPa]
	C_13(1)	= 0.0000e+00	# [1e-2 GPa]
	C_33(0)	= 0.0000e+00	# [1e-2 GPa]
	C_33(1)	= 0.0000e+00	# [1e-2 GPa]
	c0(0)	= 0.0000e+00	# [cm]
	c0(1)	= 0.0000e+00	# [cm]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * me/m0 = (Nc300/2.540e19)^2/3 
  * Nc(T) = Nc300 * (T/300)^3/2 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a(0)	= 0.1905	# [1]
	a(1)	= 0.1905	# [1]
	ml(0)	= 0.9163	# [1]
	ml(1)	= 0.9163	# [1]
	mm(0)	= 0.0000e+00	# [1]
	mm(1)	= 0.0000e+00	# [1]
	Nc300(0)	= 4.4200e+17	# [cm-3]
	Nc300(1)	= 1.1100e+18	# [cm-3]
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 2	# [1]
  * Formula2:
  * mh/m0 = (Nv300/2.540e19)^2/3 
  * Nv(T) = Nv300 * (T/300)^3/2 
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a(0)	= 0.443587	# [1]
	a(1)	= 0.443587	# [1]
	b(0)	= 3.6095e-03	# [K^-1]
	b(1)	= 3.6095e-03	# [K^-1]
	c(0)	= 1.1735e-04	# [K^-2]
	c(1)	= 1.1735e-04	# [K^-2]
	d(0)	= 1.2632e-06	# [K^-3]
	d(1)	= 1.2632e-06	# [K^-3]
	e(0)	= 3.0256e-09	# [K^-4]
	e(1)	= 3.0256e-09	# [K^-4]
	f(0)	= 4.6834e-03	# [K^-1]
	f(1)	= 4.6834e-03	# [K^-1]
	g(0)	= 2.2869e-04	# [K^-2]
	g(1)	= 2.2869e-04	# [K^-2]
	h(0)	= 7.4693e-07	# [K^-3]
	h(1)	= 7.4693e-07	# [K^-3]
	i(0)	= 1.7275e-09	# [K^-4]
	i(1)	= 1.7275e-09	# [K^-4]
	mm(0)	= 0.0000e+00	# [1]
	mm(1)	= 0.0000e+00	# [1]
	Nv300(0)	= 8.4700e+18	# [cm-3]
	Nv300(1)	= 1.2400e+19	# [cm-3]
}

SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *    where k=(x,y,z) is unit normal vector in reziprocal
  *    space.  '+' for light hole band, '-' for heavy hole band
  * 2: Heavy hole mass mh and light hole mass ml are
  *    specified explicitly.
  *    Use me as electron mass for free-carrier effect in 
  *    the refractive index model.
  * For electron masses, the following formula options exist:
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    use the a, ml, and mm parameters from eDOSMass.
  *    Typically, this leads to anisotropy.
  * formula<0 means no default model and no default parameters
  *   are available, so you have to provide values for
  *   'formula' and the respective parameters in order to use
  *   this parameter set.
	formula	= 0 ,	2	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
  * Alternative to the specification of formula, offset,
  * and masses, you can make an arbitrary number of ladder
  * specification, 'eLadder(mz, mxy, deg, dE) and hLadder(...)
  * Here, mz is the quantization mass, mxy an in-plane DOS mass,
  * deg the ladder degeneracy, and dE an shift of the band edge
  * for the ladder (non-negative; the shift is always outward,
  * away from midgap).  When present, we solve the Schroedinger
  * equation separately for each ladder

  * Temperatures in rescaling of the mxy for eLadder and hLadder
	ShiftTemperature	= 1.0000e+10 ,	1.0000e+10	# [K]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	A(0)	= 4.22	# [1]
	A(1)	= 4.22	# [1]
	B(0)	= 0.6084	# [1]
	B(1)	= 0.6084	# [1]
	C(0)	= 23.058	# [1]
	C(1)	= 23.058	# [1]
	ml(0)	= 0.074	# [1]
	ml(1)	= 0.26	# [1]
	mh(0)	= 0.62	# [1]
	mh(1)	= 0.5	# [1]
	me(0)	= 0.07	# [1]
	me(1)	= 0.07	# [1]
	eoffset(0)	= 0.0000e+00	# [eV]
	eoffset(1)	= 0.0000e+00	# [eV]
	hoffset(0)	= 0.0000e+00	# [eV]
	hoffset(1)	= 0.0000e+00	# [eV]
}


*  QuantumPotentialParameters { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	Exponent(0)	= 1,	2.1	#[1]
	Exponent(1)	= 1,	2.1	#[1]
	mumax(0)	= 8.5000e+03,	4.0000e+02	#[cm^2/(Vs)]
	mumax(1)	= 2.5000e+03,	1.5000e+02	#[cm^2/(Vs)]
	mutunnel(0)	= 0.05,	0.05	#[cm^2/(Vs)]
	mutunnel(1)	= 0.05,	0.05	#[cm^2/(Vs)]
}

ConstantMobility_aniso:
{ * mu_const = mumax (T/T0)^(-Exponent)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	Exponent(0)	= 1,	2.1	#[1]
	Exponent(1)	= 1,	2.1	#[1]
	mumax(0)	= 8.5000e+03,	4.0000e+02	#[cm^2/(Vs)]
	mumax(1)	= 2.5000e+03,	1.5000e+02	#[cm^2/(Vs)]
	mutunnel(0)	= 0.05,	0.05	#[cm^2/(Vs)]
	mutunnel(1)	= 0.05,	0.05	#[cm^2/(Vs)]
}


*  DopingDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  DopingDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PhuMob{...} 
*  Philips Unified Mobility Model:
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence "100" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso "100" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence "110" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso "110" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence "111" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso "111" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  NegInterfaceChargeMobility{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  NegInterfaceChargeMobility_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PosInterfaceChargeMobility{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PosInterfaceChargeMobility_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Coulomb2DMobility{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Coulomb2DMobility_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = ( (alpha+1)*mu_lowfield ) / 
  *        ( alpha + ( 1 + ( (alpha+1)*mu_lowfield*E/vsat)^beta )^(1/beta) ) 
  * beta = beta0 (T/T0)^betaexp.
 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	beta0(0)	= 2,	2	#[1]
	beta0(1)	= 2,	2	#[1]
	betaexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	betaexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	alpha(0)	= 0.0000e+00,	0.0000e+00	#[1]
	alpha(1)	= 0.0000e+00,	0.0000e+00	#[1]
	K_dT(0)	= 0.2,	0.2	#[1]
	K_dT(1)	= 0.2,	0.2	#[1]
	E0_TrEf(0)	= 4.0000e+03,	4.0000e+03	#[V/cm]
	E0_TrEf(1)	= 4.0000e+03,	4.0000e+03	#[V/cm]
	Ksmooth_TrEf(0)	= 1,	1	#[1]
	Ksmooth_TrEf(1)	= 1,	1	#[1]
	vsat0(0)	= 7.7000e+06,	7.7000e+06	#[cm/s]
	vsat0(1)	= 7.7000e+06,	7.7000e+06	#[cm/s]
	vsatexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	vsatexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	A_vsat(0)	= 1.1300e+07,	1.1300e+07	#[cm/s]
	A_vsat(1)	= 1.1300e+07,	1.1300e+07	#[cm/s]
	B_vsat(0)	= 3.6000e+06,	3.6000e+06	#[cm/s]
	B_vsat(1)	= 3.6000e+06,	3.6000e+06	#[cm/s]
	vsat_min(0)	= 5.0000e+05,	5.0000e+05	#[cm/s]
	vsat_min(1)	= 5.0000e+05,	5.0000e+05	#[cm/s]
}

HighFieldDependence_aniso:
{ * Caughey-Thomas model:
  * mu_highfield = ( (alpha+1)*mu_lowfield ) / 
  *        ( alpha + ( 1 + ( (alpha+1)*mu_lowfield*E/vsat)^beta )^(1/beta) ) 
  * beta = beta0 (T/T0)^betaexp.
 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2	# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2)
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	beta0(0)	= 2,	2	#[1]
	beta0(1)	= 2,	2	#[1]
	betaexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	betaexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	alpha(0)	= 0.0000e+00,	0.0000e+00	#[1]
	alpha(1)	= 0.0000e+00,	0.0000e+00	#[1]
	K_dT(0)	= 0.2,	0.2	#[1]
	K_dT(1)	= 0.2,	0.2	#[1]
	E0_TrEf(0)	= 4.0000e+03,	4.0000e+03	#[V/cm]
	E0_TrEf(1)	= 4.0000e+03,	4.0000e+03	#[V/cm]
	Ksmooth_TrEf(0)	= 1,	1	#[1]
	Ksmooth_TrEf(1)	= 1,	1	#[1]
	vsat0(0)	= 7.7000e+06,	7.7000e+06	#[cm/s]
	vsat0(1)	= 7.7000e+06,	7.7000e+06	#[cm/s]
	vsatexp(0)	= 0.0000e+00,	0.0000e+00	#[1]
	vsatexp(1)	= 0.0000e+00,	0.0000e+00	#[1]
	A_vsat(0)	= 1.1300e+07,	1.1300e+07	#[cm/s]
	A_vsat(1)	= 1.1300e+07,	1.1300e+07	#[cm/s]
	B_vsat(0)	= 3.6000e+06,	3.6000e+06	#[cm/s]
	B_vsat(1)	= 3.6000e+06,	3.6000e+06	#[cm/s]
	vsat_min(0)	= 5.0000e+05,	5.0000e+05	#[cm/s]
	vsat_min(1)	= 5.0000e+05,	5.0000e+05	#[cm/s]
}

Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-07 ,	1.0000e-07	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.9000e-31 ,	1.2000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

vanOverstraetendeMan * Impact Ionization:
{ * G_impact = alpha_n n v_drift_n  +  alpha_p p v_drift_p
  * with alpha = gamma a  exp(-b gamma/E) for E<E0 (low) and E>E0 (high)
  *  with gamma = tanh(hbarOmega/(2kT0)) / tanh(hbarOmega/(2kT))
* Mole fraction dependent model.
* Linear interpolation is used on the interval [0,1].
	a(low)(0)	= 4.0000e+06,	1.3400e+06	#[1/cm]
	a(low)(1)	= 4.0000e+06,	1.3400e+06	#[1/cm]
	a(high)(0)	= 4.0000e+06,	1.3400e+06	#[1/cm]
	a(high)(1)	= 4.0000e+06,	1.3400e+06	#[1/cm]
	b(low)(0)	= 2.3000e+06,	2.0300e+06	#[V/cm]
	b(low)(1)	= 2.3000e+06,	2.0300e+06	#[V/cm]
	b(high)(0)	= 2.3000e+06,	2.0300e+06	#[V/cm]
	b(high)(1)	= 2.3000e+06,	2.0300e+06	#[V/cm]
	E0(0)	= 4.0000e+05,	4.0000e+05	#[V/cm]
	E0(1)	= 4.0000e+05,	4.0000e+05	#[V/cm]
	hbarOmega(0)	= 0.035,	0.035	#[V/cm]
	hbarOmega(1)	= 0.035,	0.035	#[V/cm]
}

vanOverstraetendeMan_aniso * Impact Ionization:
{ * G_impact = alpha_n n v_drift_n  +  alpha_p p v_drift_p
  * with alpha = gamma a  exp(-b gamma/E) for E<E0 (low) and E>E0 (high)
  *  with gamma = tanh(hbarOmega/(2kT0)) / tanh(hbarOmega/(2kT))
* Mole fraction dependent model.
* Linear interpolation is used on the interval [0,1].
	a(low)(0)	= 4.0000e+06,	1.3400e+06	#[1/cm]
	a(low)(1)	= 4.0000e+06,	1.3400e+06	#[1/cm]
	a(high)(0)	= 4.0000e+06,	1.3400e+06	#[1/cm]
	a(high)(1)	= 4.0000e+06,	1.3400e+06	#[1/cm]
	b(low)(0)	= 2.3000e+06,	2.0300e+06	#[V/cm]
	b(low)(1)	= 2.3000e+06,	2.0300e+06	#[V/cm]
	b(high)(0)	= 2.3000e+06,	2.0300e+06	#[V/cm]
	b(high)(1)	= 2.3000e+06,	2.0300e+06	#[V/cm]
	E0(0)	= 4.0000e+05,	4.0000e+05	#[V/cm]
	E0(1)	= 4.0000e+05,	4.0000e+05	#[V/cm]
	hbarOmega(0)	= 0.035,	0.035	#[V/cm]
	hbarOmega(1)	= 0.035,	0.035	#[V/cm]
}


*  Radiative Recombination Model{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  MLDAQMModel { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  LatticeParameters: {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Piezoelectric_Polarization{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlAs) + (1-x) * P(GaAs)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

RadiativeRecombination * coefficients:
{ 
  * R_Radiative = C * (T/Tpar)^alpha * (n p - ni_eff^2)
  * C    
  * alpha 
	C	= 1.0000e-10    # [cm^3/s]
	alpha	= 0.0000e+00    # []
}

BarrierTunneling  
{ * Non Local Barrier Tunneling 
  * G(r) = g*A*T/kB*F(r)*Pt(r)*ln[(1+exp((E(r)-Es)/kB/T))/(1+exp((E(r)-Em)/kB/T))]
  * where: 
  *     Pt(r) is WKB approximation for the tunneling probability 
  *     g = As/A, As is the Richardson constant for carriers in semiconductor
  *     A is the Richardson constant for free electrons 
  *     F(r) is the electric field 
  *     E(r) is carrier energy 
  *     Es is carrier quasi fermi energy in semiconductor
  *     Em is carrier fermi energy in metal 
	g	= 0.068 ,	0.62	# [1]
	mt	= 0.5000e+00 ,	0.5800e+00	# [1]
}

TableODB
{ *Table format of the Optik DataBase
  *complex refractive index n + i*k (unitless) 
  *refractive index = n,  absorption coefficient = 4*pi*k/wavelength 
  *WAVELEN(um)	n	k
   0.19	3.79959633	1.96870586;
  0.3	3.79959633	1.96870586;
0.31	3.66256622	1.89976092;
0.32	3.58658475	1.8884993;
0.33	3.55305061	1.90162946;
0.34	3.54964515	1.9304569;
0.35	3.57244178	1.973211;
0.36	3.62383736	2.02930463;
0.37	3.71065295	2.09795087;
0.38	3.84587886	2.17920229;
0.39	4.11032381	2.27004011;
0.4	4.44120909	2.08670692;
0.41	4.5315991	1.90929495;
0.42	4.73417324	1.88876666;
0.43	5.1288768	1.49672815;
0.44	5.02218681	1.01947198;
0.45	4.84749864	0.776901549;
0.46	4.68903837	0.631766422;
0.47	4.55765836	0.541593365;
0.48	4.45267753	0.480813212;
0.49	4.36732101	0.434604463;
0.5	4.29491962	0.396654699;
0.51	4.23233072	0.365368513;
0.52	4.17683629	0.339107623;
0.53	4.12763857	0.316995277;
0.54	4.08387968	0.298362454;
0.55	4.04472344	0.282352325;
0.56	4.00963261	0.268435481;
0.57	3.97812105	0.256167642;
0.58	3.94977581	0.245185797;
0.59	3.92420566	0.235219264;
0.6	3.9011498	0.226035847;
0.61	3.88008104	0.217447912;
0.62	3.8608037	0.209295794;
0.63	3.84341537	0.201567074;
0.64	3.82732056	0.194095793;
0.65	3.81258393	0.186883257;
0.66	3.79912912	0.179839888;
0.67	3.78692867	0.172884419;
0.68	3.7759462	0.165656072;
0.69	3.76584761	0.157449478;
0.7	3.75529906	0.148149638;
0.71	3.74350683	0.139065224;
0.72	3.73106009	0.131443872;
0.73	3.71929179	0.125452157;
0.74	3.70874309	0.120348776;
0.75	3.69912322	0.115548153;
0.76	3.69032027	0.100875382;
0.77	3.68218891	0.086282015;
0.78	3.67469183	0.061751649;
0.79	3.66772243	0.047274191;
0.8	3.6612522	0.022840036;
0.81	3.65531383	0;*.048439923;
0.82	3.6499805	0;*.024067542;
0.83	3.64542258	0;*0.079724477;
0.84	3.64193203	0;*0.075388472;
0.85	3.64021622	0;*0.070801656;
0.86	3.64241426	0;
0.87	3.6444304	0;
0.88	3.6360219	0;
0.89	3.61925198	0;
0.9	3.59865686	0;
0.91	3.58263849	0;
0.92	3.57007087	0;
0.93	3.55921197	0;
0.94	3.54956241	0;
0.95	3.54117033	0;
0.96	3.53332432	0;
0.97	3.52592496	0;
0.98	3.51927888	0;
0.99	3.51290051	0;
1	3.50670785	0;
10	3.50670785	0;
}

}








